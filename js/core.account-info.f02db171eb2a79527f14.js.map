{"version":3,"sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher-account-list.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-account-wrapper.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-mobile.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["CurrencyDisplay","currency","is_virtual","i18n_default_text","getCurrencyName","AccountDisplay","account_type","getMT5AccountDisplay","AccountList","balance","currency_icon","display_type","has_balance","has_reset_balance","is_eu","is_disabled","loginid","onClickAccount","onClickResetVirtualBalance","selected_loginid","market_type","React","startsWith","localize","currency_badge","id","className","classNames","onClick","undefined","icon","size","e","stopPropagation","secondary","small","color","getCurrencyDisplayCode","amount","formatMoney","should_format","show_currency","AccountWrapper","children","header","is_visible","toggleVisibility","title","is_expanded","onToggle","is_title_spaced","propTypes","PropTypes","node","oneOfType","object","string","bool","func","AccountSwitcher","props","section","setState","state","setWrapperRef","wrapper_ref","updateAccountTabIndex","index","active_tab_index","handleClickOutside","event","accounts_toggle_btn","target","classList","contains","closeAccountsDialog","handleLogout","is_positions_drawer_on","togglePositionsDrawer","logoutClient","then","routeBackInApp","history","toggleAccountsDialog","redirectToMt5","push","routes","mt5","openMt5RealAccount","has_required_account","has_malta_account","has_maltainvest_account","openAccountNeededModal","standpoint","gaming_company","financial_company","sessionStorage","setItem","redirectToMt5Real","is_logged_in","is_mt5_allowed","window","open","urlFor","legacy","onListEnter","has_autohide","onListLeave","openMt5DemoAccount","redirectToMt5Demo","setAccountCurrency","toggleSetCurrencyModal","showAccountTypesModal","toggleAccountTypesModal","isDemo","account","test","group","isReal","getRemainingAccounts","existing_mt5_groups","mt5_config","account_types","type","api_key","forEach","split","index_to_remove","findIndex","indexOf","splice","filter","config_item","company","landing_companies","resetBalance","resetVirtualBalance","should_show_real_accounts_list","is_demo_deriv_visible","is_demo_dmt5_visible","is_real_deriv_visible","is_real_dmt5_visible","document","addEventListener","this","updateMt5LoginList","toggleShouldShowRealAccountsList","removeEventListener","account_loginid","switchAccount","total_assets_message_demo","total_assets_message_real","total_assets_message","is_real_account_tab","demo_accounts","sorted_account_list","map","key","accounts","doSwitch","bind","is_loading_mt5","speed","demo_mt5","length","login","getMT5Account","display_login","remaining_demo_mt5","real_accounts","onMouseEnter","onMouseLeave","remaining_real_accounts","getAccountTitle","account_residence","client_residence","openRealAccountSignup","can_upgrade","can_open_multi","has_set_currency","has_fiat","available_crypto_currencies","real_mt5","remaining_real_mt5","mt5_login_list_error","has_any_real_account","is_pending_authentication","has_required_credentials","ref","active_index","onTabItemClick","top","label","height","max_autoheight_offset","is_mobile","line_height","weight","obj_total_balance","total_real_assets","total_demo_assets","is_uk","has_effect","text","align","account_settings","citizen","tax_identification_number","tax_residence","account_list","slice","sort","a","b","a_currency","b_currency","a_is_crypto","isCryptocurrency","b_is_crypto","a_is_fiat","b_is_fiat","mt5_login_list","sorted_mt5_list","existing_demo_mt5_groups","Object","keys","existing_real_mt5_groups","upgradeable_landing_companies","some","can_upgrade_to","vrtc_loginid","find","vrtc_balance","mt5_demo_total","reduce","total","Array","isArray","amount_real","amount_mt5","array","can_change_fiat_currency","account_switcher","withRouter","connect","client","common","ui","residence","is_populating_mt5_account_list","logout","AccountSwitcherMobile","disableApp","enableApp","is_upgrade_enabled","toggle","is_open","is_vertical_top","has_close_icon","toggleModal","width","any","onClose","visible","wrapperClassName","AccountInfoWrapper","disabled_message","alignment","message","zIndex","AccountInfoIcon","AccountInfo","acc_switcher_disabled_message","is_dialog_on","toggleDialog","currency_lower","toLowerCase","CSSTransition","in","timeout","enter","enterDone","exit","unmountOnExit"],"mappings":"uNAgGMA,EAAkB,SAAC,GAA6B,IAA3BC,EAA2B,EAA3BA,SACvB,OADkD,EAAjBC,WAEtB,gBAAC,WAAD,CAAUC,kBAAkB,SAElCF,EAGEG,0BAAgBH,GAFZ,gBAAC,WAAD,CAAUE,kBAAkB,0BAKrCE,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OAAsB,2BAAMC,+BAAqBD,KAEzDE,EAtGK,SAAC,GAef,IAdFF,EAcE,EAdFA,aACAG,EAaE,EAbFA,QACAR,EAYE,EAZFA,SACAS,EAWE,EAXFA,cACAC,EAUE,EAVFA,aACAC,EASE,EATFA,YACAC,EAQE,EARFA,kBACAC,EAOE,EAPFA,MACAC,EAME,EANFA,YACAb,EAKE,EALFA,WACAc,EAIE,EAJFA,QACAC,EAGE,EAHFA,eACAC,EAEE,EAFFA,2BACAC,EACE,EADFA,iBAEMC,EAAcC,WAAc,WAC9B,OAAIL,EAAQM,WAAW,OAASN,EAAQM,WAAW,OACxCC,mBAAS,aACTP,EAAQM,WAAW,MACnBC,mBAAS,aAEb,KACR,CAACP,IAEJ,GAAID,IAAgBd,EAAU,OAAO,KACrC,IAAMuB,EAAiBvB,EAAWS,EAAgB,oBAElD,OACI,gCACI,uBACIe,GAAE,aAAQT,GACVU,UAAWC,IAAW,wBAAyB,CAC3C,kCAAmCX,IAAYG,EAC/C,kCAAmCJ,IAEvCa,QAASb,OAAcc,EAAYZ,GAEnC,wBAAMS,UAAU,oBACZ,gBAAC,OAAD,CACII,KAAM5B,EAAa,oBAAsBsB,EACzCE,UAAW,wBACXK,KAAM,KAEV,4BACsB,aAAjBpB,EACG,gBAAC,EAAD,CACIT,WAAYA,EACZD,SAAUA,EACVa,MAAOA,EACPM,YAAaA,IAGjB,gBAAC,EAAD,CAAgBd,aAAcA,IAElC,uBAAKoB,UAAU,8BAA8BV,IAEhDH,EACG,gBAAC,SAAD,CACIE,YAAaA,EACba,QAAS,SAAAI,GACLA,EAAEC,kBACFf,KAEJQ,UAAU,kCACVQ,WAAS,EACTC,OAAK,GAEJZ,mBAAS,kBAGdX,GACI,gBAAC,OAAD,CAAMmB,KAAK,KAAKK,MAAM,YAAYV,UAAU,yBACvCzB,GACG,gBAAC,QAAD,CACIA,SAAUoC,iCAAuBpC,GACjCqC,OAAQC,sBAAYtC,EAAUQ,GAAS,GACvC+B,eAAe,EACfC,eAAa,SChF/CC,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,WAAYC,EAAjC,EAAiCA,iBAAjC,OACnB,gBAAC,kBAAD,CACIpB,UAAU,eACVqB,MAAOH,EACPI,YAAaH,EACbI,SAAUH,EACVI,iBAAe,GAEdP,IAITD,EAAeS,UAAY,CACvBR,SAAUS,IAAUC,KACpBT,OAAQQ,IAAUE,UAAU,CAACF,IAAUG,OAAQH,IAAUI,SACzDX,WAAYO,IAAUK,KACtBX,iBAAkBM,IAAUM,MAGjBhB,Q,g9ECCTiB,E,wQACF,WAAYC,GAAO,a,4FAAA,UACf,cAAMA,IAYVd,iBAAmB,SAAAe,G,UACf,EAAKC,U,EAAL,G,EAAA,aAAuBD,EAAvB,Y,GAA4C,EAAKE,MAAL,aAAiBF,EAAjB,a,kGAd7B,EAiBnBG,cAAgB,SAAAX,GACZ,EAAKY,YAAcZ,GAlBJ,EAqBnBa,sBAAwB,SAAAC,GACpB,EAAKL,SAAS,CAAEM,iBAAkBD,KAtBnB,EAyBnBE,mBAAqB,SAAAC,GACjB,IAAMC,GAAuBD,EAAME,OAAOC,UAAUC,SAAS,YAEzD,EAAKT,cACJ,EAAKA,YAAYS,SAASJ,EAAME,SACjC,EAAKZ,MAAMf,YACX0B,GAEA,EAAKI,uBAjCM,EAqCnBC,aAAe,WACX,EAAKD,sBACD,EAAKf,MAAMiB,wBACX,EAAKjB,MAAMkB,wBAEf,EAAKlB,MAAMmB,eAAeC,MAAK,WAC3B,EAAKpB,MAAMqB,eAAe,EAAKrB,MAAMsB,aA3C1B,EA+CnBP,oBAAsB,WAClB,EAAKf,MAAMuB,sBAAqB,IAhDjB,EAmDnBC,cAAgB,SAAA9E,GACZ,EAAKqE,sBACL,EAAKf,MAAMsB,QAAQG,KAAnB,UAA2BC,SAAOC,IAAlC,YAAyCjF,KArD1B,EAwDnBkF,mBAAqB,SAAAlF,GACjB,IAAMmF,EACe,cAAjBnF,EAA+B,EAAKsD,MAAM8B,kBAAoB,EAAK9B,MAAM+B,wBAEzE,EAAK/B,MAAM9C,QAAU2E,GACrB,EAAKd,sBACL,EAAKf,MAAMgC,uBACU,cAAjBtF,EACM,EAAKsD,MAAMiC,WAAWC,eACtB,EAAKlC,MAAMiC,WAAWE,kBACX,cAAjBzF,EAA+BiB,mBAAS,mBAAqBA,mBAAS,mBACrD,cAAjBjB,EAA+BiB,mBAAS,kBAAoBA,mBAAS,qBAGzEyE,eAAeC,QAAQ,wBAAvB,eAAwD3F,IACxD,EAAK4F,sBAvEM,EA2EnBA,kBAAoB,YACX,EAAKtC,MAAMuC,cAAgB,EAAKvC,MAAMwC,eACvC,EAAKhB,cAAc,QAEnBiB,OAAOC,KAAKC,iBAAO,kBAAmB,CAAEC,QAAQ,MA/ErC,EAmFnBC,YAAc,kBAAM,EAAK3C,SAAS,CAAE4C,cAAc,KAnF/B,EAqFnBC,YAAc,kBAAM,EAAK7C,SAAS,CAAE4C,cAAc,KArF/B,EAuFnBE,mBAAqB,SAAAtG,GACjB0F,eAAeC,QAAQ,wBAAvB,eAAwD3F,IACxD,EAAKuG,qBAzFU,EA4FnBA,kBAAoB,WAChB,EAAKzB,cAAc,SA7FJ,EAgGnB0B,mBAAqB,WACjB,EAAKnC,sBACL,EAAKf,MAAMmD,0BAlGI,EAqGnBC,sBAAwB,WACpB,EAAKrC,sBACL,EAAKf,MAAMqD,yBAAwB,IAvGpB,EA0GnBC,OAAS,SAAAC,GAAO,MAAI,QAAQC,KAAKD,EAAQE,QA1GtB,EA4GnBC,OAAS,SAAAH,GAAO,OAAK,EAAKD,OAAOC,IA5Gd,EA8GnBI,qBAAuB,SAAAC,GACnB,IAKMC,EAAa,CACf,CACIC,cAAe,CAAC,MAAO,SACvB5F,KAAM,YACNiB,MAAOxB,mBAAS,aAChBoG,KAAM,YACNC,QAAS,+BAEb,CAEIF,cAAe,CAAC,UAAW,eAAgB,gBAAiB,yBAC5D5F,KAAM,YACNiB,MAAOxB,mBAAS,aAChBoG,KAAM,YACNC,QAAS,kCAEb,CACIF,cAAe,CAAC,UAChB5F,KAAM,gBACNiB,MAAOxB,mBAAS,iBAChBoG,KAAM,gBACNC,QAAS,uCAUjB,OANAJ,EAAoBK,SAAQ,SAAAR,GACxB,IAAMM,EAAON,EAAMS,MAAM,gBAAgB,GACnCC,EAAkBN,EAAWO,WAAU,SAAAb,GAAO,OAAIA,EAAQO,cAAcO,QAAQN,IAAS,KAC/FF,EAAWS,OAAOH,EAAiB,MAGhCN,EAAWU,QApCW,SAAAC,GAAe,YAChBA,EAAYR,QAAQE,MAAM,KADV,GACjCO,EADiC,KACxBV,EADwB,KAExC,SAAQ,UAAC,EAAK/D,MAAM0E,yBAAZ,iBAAC,EAA+BD,UAAhC,aAAC,EAA0CV,QAjHxC,EAsKnBY,aAtKmB,2BAsKJ,6FACX,EAAK5D,sBACL,EAAKf,MAAM4E,sBAFA,2CAnKX,EAAKzE,MAAQ,CACTK,kBAAmBR,EAAM1D,YAAc0D,EAAM6E,+BAAiC,EAAI,EAClFC,uBAAuB,EACvBC,sBAAsB,EACtBC,uBAAuB,EACvBC,sBAAsB,EACtBnC,cAAc,GATH,E,yDAuJfoC,SAASC,iBAAiB,YAAaC,KAAK3E,oBAC5C2E,KAAKpF,MAAMqF,uB,6CAIXD,KAAKpF,MAAMsF,kCAAiC,GAC5CJ,SAASK,oBAAoB,YAAaH,KAAK3E,sB,+DAGpCrD,G,mFACXgI,KAAKrE,sBACDqE,KAAKpF,MAAMwF,kBAAoBpI,E,iEAC7BgI,KAAKpF,MAAMyF,cAAcrI,G,6HAqH1B,aACL,IAAKgI,KAAKpF,MAAMuC,aAAc,OAAO,EAErC,IAAMmD,EAA4BN,KAAKpF,MAAMwC,eACvC7E,mBAAS,sDACTA,mBAAS,6CAETgI,EAA4BP,KAAKpF,MAAMwC,eACvC7E,mBAAS,sDACTA,mBAAS,6CAETiI,EAAuBR,KAAKS,oBAAsBF,EAA4BD,EAE9EI,EACF,uBAAKhI,UAAU,8BACX,gBAAC,EAAD,CACIkB,OAAQrB,mBAAS,kBACjBsB,WAAYmG,KAAKjF,MAAM2E,sBACvB5F,iBAAkB,WACd,EAAKA,iBAAiB,gBAG1B,uBAAKpB,UAAU,0BACVsH,KAAKW,oBACDxB,QAAO,SAAAhB,GAAO,OAAIA,EAAQjH,cAC1B0J,KAAI,SAAAzC,GAAO,OACR,gBAAC,EAAD,CACI0C,IAAK1C,EAAQnG,QACbP,QAAS,EAAKmD,MAAMkG,SAAS3C,EAAQnG,SAASP,QAC9CR,SAAU,EAAK2D,MAAMkG,SAAS3C,EAAQnG,SAASf,SAC/CS,cAAa,qBAAgByG,EAAQrF,MACrCnB,aAAc,WACdC,YAAa,YAAa,EAAKgD,MAAMkG,SAAS3C,EAAQnG,SACtDH,kBAAmB,EAAK+C,MAAMkG,SAAS,EAAKlG,MAAMwF,iBAAiBlJ,WACnEa,YAAaoG,EAAQpG,YACrBb,WAAYiH,EAAQjH,WACpBc,QAASmG,EAAQnG,QACjBC,eACIkG,EAAQpG,iBAAcc,EAAY,EAAKkI,SAASC,KAAK,EAAM7C,EAAQnG,SAEvEE,2BAA4B,EAAKqH,aACjCpH,iBAAkB,EAAKyC,MAAMwF,uBAKhDJ,KAAKpF,MAAMwC,gBACR,gBAAC,WAAD,KACI,uBAAK1E,UAAU,gEACf,gBAAC,EAAD,CACIkB,OAAQrB,mBAAS,iBACjBsB,WAAYmG,KAAKjF,MAAM4E,qBACvB7F,iBAAkB,WACd,EAAKA,iBAAiB,eAGzBkG,KAAKpF,MAAMqG,eACR,uBAAKvI,UAAU,sCACX,gBAAC,IAAD,CAAoBwI,MAAO,KAG/B,gBAAC,WAAD,OACOlB,KAAKmB,SAASC,QACb,uBAAK1I,UAAU,0BACVsH,KAAKmB,SAASP,KAAI,SAAAzC,GAAO,OACtB,gBAAC,EAAD,CACI0C,IAAK1C,EAAQkD,MACb/J,aAAc6G,EAAQE,MACtB5G,QAAS0G,EAAQ1G,QACjBR,SAAUkH,EAAQlH,SAClBS,cAAa,gBAAW4J,wBAAcnD,EAAQE,QAC9CzG,YAAa,YAAauG,EAC1BnG,QAASmG,EAAQoD,cACjBtJ,eAAgB,EAAK4F,wBAKpCmC,KAAKwB,mBAAmBZ,KAAI,SAAAzC,GAAO,OAChC,uBAAK0C,IAAK1C,EAAQpE,MAAOrB,UAAU,6BAC/B,gBAAC,OAAD,CAAMI,KAAI,gBAAWqF,EAAQrF,MAAQC,KAAM,KAC3C,gBAAC,OAAD,CAAMA,KAAK,KAAKK,MAAM,UAAUV,UAAU,kCACrCyF,EAAQpE,OAEb,gBAAC,SAAD,CACInB,QAAS,kBAAM,EAAKgF,mBAAmBO,EAAQQ,OAC/CjG,UAAU,gCACVQ,WAAS,EACTC,OAAK,GAEJZ,mBAAS,gBAY5CkJ,EACF,uBAAK/I,UAAU,6BAA6BgJ,aAAc1B,KAAKvC,YAAakE,aAAc3B,KAAKrC,aAC3F,gBAAC,WAAD,KACI,gBAAC,EAAD,CACI/D,OAAQrB,mBAAS,kBACjBsB,WAAYmG,KAAKjF,MAAM6E,sBACvB9F,iBAAkB,WACd,EAAKA,iBAAiB,gBAG1B,uBAAKpB,UAAU,0BACVsH,KAAKW,oBACDxB,QAAO,SAAAhB,GAAO,OAAKA,EAAQjH,cAC3B0J,KAAI,SAAAzC,GACD,OACI,gBAAC,EAAD,CACI0C,IAAK1C,EAAQnG,QACbP,QAAS,EAAKmD,MAAMkG,SAAS3C,EAAQnG,SAASP,QAC9CR,SAAU,EAAK2D,MAAMkG,SAAS3C,EAAQnG,SAASf,SAC/CS,cAAa,qBAAgByG,EAAQrF,MACrCnB,aAAc,WACdC,YAAa,YAAa,EAAKgD,MAAMkG,SAAS3C,EAAQnG,SACtDD,YAAaoG,EAAQpG,YACrBb,WAAYiH,EAAQjH,WACpBY,MAAO,EAAK8C,MAAM9C,MAClBE,QAASmG,EAAQnG,QACjBC,eACIkG,EAAQpG,iBACFc,EACA,EAAKkI,SAASC,KAAK,EAAM7C,EAAQnG,SAE3CG,iBAAkB,EAAKyC,MAAMwF,sBAKhDJ,KAAK4B,wBAAwBhB,KAAI,SAACzC,EAAShD,GAAV,OAC9B,uBAAK0F,IAAK1F,EAAOzC,UAAU,6BACvB,gBAAC,OAAD,CAAMI,KAAK,UAAUC,KAAM,KAC3B,gBAAC,OAAD,CAAMA,KAAK,KAAKK,MAAM,UAAUV,UAAU,kCACrCmJ,YAAgB1D,EAAS,CACtB2D,kBAAmB,EAAKlH,MAAMmH,oBAGtC,gBAAC,SAAD,CACInJ,QAAS,kBAAM,EAAKgC,MAAMoH,sBAAsB7D,IAChDzF,UAAU,gCACVQ,WAAS,EACTC,OAAK,GAEJZ,mBAAS,aAIpByH,KAAKiC,aAAejC,KAAKkC,gBACvB,gBAAC,SAAD,CACIxJ,UAAU,oBACVQ,WAAS,EACTN,QACIoH,KAAKmC,iBACC,kBAAM,EAAKvH,MAAMoH,sBAAsB,WACvChC,KAAKlC,oBAGdkC,KAAKpF,MAAMwH,UAA+D,KAAnD,UAAApC,KAAKpF,MAAMyH,mCAAX,eAAwCjB,QAC1D7I,mBAAS,kBACTA,mBAAS,4BAK9ByH,KAAKpF,MAAMwC,gBACR,gBAAC,WAAD,KACI,uBAAK1E,UAAU,gEACf,gBAAC,EAAD,CACIkB,OAAQrB,mBAAS,iBACjBsB,WAAYmG,KAAKjF,MAAM8E,qBACvB/F,iBAAkB,WACd,EAAKA,iBAAiB,eAGzBkG,KAAKpF,MAAMqG,eACR,uBAAKvI,UAAU,sCACX,gBAAC,IAAD,CAAoBwI,MAAO,KAG/B,gBAAC,WAAD,OACOlB,KAAKsC,SAASlB,QACb,uBAAK1I,UAAU,0BACVsH,KAAKsC,SAAS1B,KAAI,SAAAzC,GAAO,OACtB,gBAAC,EAAD,CACI0C,IAAK1C,EAAQkD,MACb/J,aAAc6G,EAAQE,MACtB5G,QAAS0G,EAAQ1G,QACjBR,SAAUkH,EAAQlH,SAClBS,cAAa,gBAAW4J,wBAAcnD,EAAQE,QAC9CzG,YAAa,YAAauG,EAC1BnG,QAASmG,EAAQoD,cACjBtJ,eAAgB,EAAKiF,wBAKpC8C,KAAKuC,mBAAmB3B,KAAI,SAAAzC,GAAO,OAChC,uBACI0C,IAAK1C,EAAQpE,MACbrB,UAAWC,IAAW,4BAA6B,CAC/C,sCAAuC,EAAKiC,MAAM4H,wBAGtD,gBAAC,OAAD,CAAM1J,KAAI,gBAAWqF,EAAQrF,MAAQC,KAAM,KAC3C,gBAAC,OAAD,CAAMA,KAAK,KAAKK,MAAM,UAAUV,UAAU,kCACrCyF,EAAQpE,OAEb,gBAAC,SAAD,CACInB,QAAS,kBAAM,EAAK4D,mBAAmB2B,EAAQQ,OAC/CjG,UAAU,gCACVQ,WAAS,EACTC,OAAK,EACLpB,aACM,EAAK6C,MAAM9C,QAAU,EAAK8C,MAAM6H,sBAChB,kBAAjBtE,EAAQQ,OACJ,EAAK/D,MAAM8H,2BACR,EAAKC,6BACX,EAAK/H,MAAM4H,sBAGhBjK,mBAAS,gBAYlD,OACI,uBAAKG,UAAU,qBAAqBkK,IAAK5C,KAAKhF,eAC1C,gBAAC,OAAD,CACI6H,aAAc7C,KAAKjF,MAAMK,iBACzB1C,UAAU,0BACVoK,eAAgB9C,KAAK9E,sBACrB6H,KAAG,GAIH,uBAAKC,MAAOzK,mBAAS,SACjB,gBAAC,iBAAD,KACI,gBAAC,mBAAD,CAAkB0K,OAAO,SAASxB,IAEtC,gBAAC,gBAAD,KACI,gBAAC,oBAAD,CAAmB/I,UAAU,+BAA+BwK,sBAAsB,SAC7EzB,KAIb,uBAAKuB,MAAOzK,mBAAS,SACjB,gBAAC,iBAAD,KACI,gBAAC,mBAAD,CAAkB0K,OAAO,SAASvC,IAEtC,gBAAC,gBAAD,KACI,gBAAC,oBAAD,CAAmBhI,UAAU,+BAA+BwK,sBAAsB,SAC7ExC,MAKjB,uBACIhI,UAAWC,IAAW,0BAA2B,CAC7C,uCAAwCqH,KAAKpF,MAAMuI,cAG3D,uBAAKzK,UAAU,uBACX,gBAAC,OAAD,CAAM0K,YAAY,IAAIrK,KAAK,KAAKsK,OAAO,OAAOjK,MAAM,aAChD,gBAAC,WAAD,CAAUjC,kBAAkB,kBAEhC,gBAAC,OAAD,CAAM4B,KAAK,KAAKK,MAAM,YAAYV,UAAU,yBACxC,gBAAC,QAAD,CACIzB,SAAU+I,KAAKS,oBAAsBT,KAAKpF,MAAM0I,kBAAkBrM,SAAW,MAC7EqC,OAAQC,sBACJyG,KAAKS,oBAAsBT,KAAKpF,MAAM0I,kBAAkBrM,SAAW,MACnE+I,KAAKS,oBAAsBT,KAAKuD,kBAAoBvD,KAAKwD,mBACzD,GAEJ/J,eAAa,EACbD,eAAe,MAI3B,gBAAC,OAAD,CAAMJ,MAAM,iBAAiBgK,YAAY,IAAIrK,KAAK,OAAOL,UAAU,gCAC9D8H,GAEL,uBAAK9H,UAAU,4BACf,uBAAKA,UAAU,wBACVsH,KAAKpF,MAAM6I,OAASzD,KAAKpF,MAAM6H,sBAC5B,gBAAC,SAAD,CACI/J,UAAU,wBACViG,KAAK,SACL+E,YAAU,EACV9K,QAASoH,KAAKhC,sBACd2F,KAAMpL,mBAAS,WACfW,WAAS,IAGjB,uBAAKT,GAAG,mBAAmBC,UAAU,uBAAuBE,QAASoH,KAAKpE,cACtE,gBAAC,OAAD,CAAMxC,MAAM,YAAYL,KAAK,KAAK6K,MAAM,OAAOlL,UAAU,6BACpDH,mBAAS,YAEd,gBAAC,OAAD,CACIO,KAAK,WACLJ,UAAU,yCACVE,QAASoH,KAAKpE,oB,0CAvalC,OAAuC,IAAhCoE,KAAKjF,MAAMK,mB,+CAKlB,IAAK4E,KAAKpF,MAAMiJ,iBAAkB,OAAO,EAFd,MAGmC7D,KAAKpF,MAAMiJ,iBAAjEC,EAHmB,EAGnBA,QAASC,EAHU,EAGVA,0BAA2BC,EAHjB,EAGiBA,cAC5C,SAAUF,GAAWC,GAA6BC,K,0CAG5B,WAGtB,OAAOhE,KAAKpF,MAAMqJ,aAAaC,QAAQC,MAAK,SAACC,EAAGC,GAC5C,IAAMC,EAAa,EAAK1J,MAAMkG,SAASsD,EAAEpM,SAASf,SAC5CsN,EAAa,EAAK3J,MAAMkG,SAASuD,EAAErM,SAASf,SAC5CuN,EAAcC,2BAAiBH,GAC/BI,EAAcD,2BAAiBF,GAC/BI,GAAaH,EACbI,GAAaF,EACnB,OAAIN,EAAElN,YAAcmN,EAAEnN,WACXkN,EAAElN,WAAa,GAAK,EACnBsN,GAAeE,GAAiBC,GAAaC,EAC9CN,EAAaC,GAAc,EAAI,EAC/BI,GAAaD,GACZ,EAEL,O,sCAMX,OAAO1E,KAAKpF,MAAMiK,eAAeX,QAAQC,MAAK,SAACC,EAAGC,GAC9C,MAAI,OAAOjG,KAAKgG,EAAE/F,SAAW,OAAOD,KAAKiG,EAAEhG,OAChC,EAEP,OAAOD,KAAKiG,EAAEhG,SAAW,OAAOD,KAAKgG,EAAE/F,QAGvC,OAAOD,KAAKgG,EAAE/F,QAFN,EAMR,mCAAmCD,KAAKgG,EAAE/F,OACnC,OAAOD,KAAKiG,EAAEhG,OAAS,GAAK,EAEhC,O,+BAKX,OAAO2B,KAAK8E,gBAAgB3F,OAAOa,KAAK9B,U,yCAGnB,WACf6G,EAA2BC,OAAOC,KAAKjF,KAAKmB,UAAUP,KAAI,SAAAzC,GAAO,OAAI,EAAKgD,SAAShD,GAASE,SAClG,OAAO2B,KAAKzB,qBAAqBwG,K,+BAIjC,OAAO/E,KAAK8E,gBAAgB3F,OAAOa,KAAK1B,U,yCAGnB,WACf4G,EAA2BF,OAAOC,KAAKjF,KAAKsC,UAAU1B,KAAI,SAAAzC,GAAO,OAAI,EAAKmE,SAASnE,GAASE,SAClG,OAAO2B,KAAKzB,qBAAqB2G,K,8CAKjC,OAAOlF,KAAKkC,eAAiB,GAAKlC,KAAKpF,MAAMuK,gC,uCAI7C,OAAOnF,KAAKpF,MAAMqJ,aAAa9E,QAAO,SAAAhB,GAAO,OAAKA,EAAQjH,cAAYkO,MAAK,SAAAjH,GAAO,MAAsB,SAAlBA,EAAQpE,W,kCAI9F,SAAUiG,KAAKpF,MAAM1D,aAAc8I,KAAKpF,MAAMyK,kB,qCAI9C,OAAIrF,KAAKpF,MAAM9C,QACXkI,KAAKpF,MAAMyH,4BAA4BjB,OAAS,IAAMpB,KAAKpF,MAAMwH,WAC7DpC,KAAKpF,MAAM1D,c,wCAInB,IAAMoO,EAAetF,KAAKpF,MAAMqJ,aAAasB,MAAK,SAAApH,GAAO,OAAIA,EAAQjH,cAAYc,QAC3EwN,EAAexF,KAAKpF,MAAMkG,SAASwE,GAAgBtF,KAAKpF,MAAMkG,SAASwE,GAAc7N,QAAU,EAC/FgO,EAAiBzF,KAAKpF,MAAMiK,eAC7B1F,QAAO,SAAAhB,GAAO,MAAI,QAAQC,KAAKD,EAAQE,UACvCqH,QACG,SAACC,EAAOxH,GAEJ,OADAwH,EAAMlO,SAAW0G,EAAQ1G,QAClBkO,IAEX,CAAElO,QAAS,IAEnB,OAAOmO,MAAMC,QAAQ7F,KAAKpF,MAAMiK,gBAAkBY,EAAehO,QAAU+N,EAAeA,I,wCAI1F,OAAOxF,KAAKpF,MAAM0I,kBAAkBwC,YAAc9F,KAAKpF,MAAM0I,kBAAkByC,gB,8BAtRzD1N,aA8lB9BsC,EAAgBR,UAAY,CACxBkI,4BAA6BjI,IAAU4L,MACvC/B,aAAc7J,IAAU4L,MACxB5F,gBAAiBhG,IAAUI,OAC3BsG,SAAU1G,IAAUG,OACpB0L,yBAA0B7L,IAAUK,KACpC4K,eAAgBjL,IAAUI,OAC1B4H,SAAUhI,IAAUK,KACpBgI,qBAAsBrI,IAAUK,KAChC3C,MAAOsC,IAAUK,KACjBwG,eAAgB7G,IAAUK,KAC1B0C,aAAc/C,IAAUK,KACxB2C,eAAgBhD,IAAUK,KAC1BiI,0BAA2BtI,IAAUK,KACrCoB,uBAAwBzB,IAAUK,KAClCgJ,MAAOrJ,IAAUK,KACjBvD,WAAYkD,IAAUK,KACtBZ,WAAYO,IAAUK,KACtBsB,aAAc3B,IAAUM,KACxBmK,eAAgBzK,IAAU4L,MAC1B1C,kBAAmBlJ,IAAUG,OAC7ByH,sBAAuB5H,IAAUM,KACjC2F,cAAejG,IAAUM,KACzB8E,oBAAqBpF,IAAUM,KAC/ByB,qBAAsB/B,IAAUM,KAChCuD,wBAAyB7D,IAAUM,KACnCoB,sBAAuB1B,IAAUM,KACjCqD,uBAAwB3D,IAAUM,KAClCuF,mBAAoB7F,IAAUM,MAGlC,IAAMwL,EAAmBC,qBACrBC,aAAQ,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,GAAnB,MAA6B,CACjClE,4BAA6BgE,EAAOhE,4BACpCjC,gBAAiBiG,EAAOrO,QACxB8I,SAAUuF,EAAOvF,SACjB+C,iBAAkBwC,EAAOxC,iBACzBoC,yBAA0BI,EAAOJ,yBACjChC,aAAcoC,EAAOpC,aACrBoB,eAAgBgB,EAAOhB,eACvBtD,iBAAkBsE,EAAOG,UACzB1O,MAAOuO,EAAOvO,MACdmJ,eAAgBoF,EAAOI,+BACvBtJ,aAAckJ,EAAOlJ,aACrBC,eAAgBiJ,EAAOjJ,eACvBsF,0BAA2B2D,EAAO3D,0BAClCe,MAAO4C,EAAO5C,MACdvM,WAAYmP,EAAOnP,WACnBkL,SAAUiE,EAAOjE,SACjBK,qBAAsB4D,EAAO5D,qBAC7BoC,eAAgBwB,EAAOxB,eACvBrC,qBAAsB6D,EAAO7D,qBAC7Bc,kBAAmB+C,EAAO/C,kBAC1BjD,cAAegG,EAAOhG,cACtBb,oBAAqB6G,EAAO7G,oBAC5B9C,kBAAmB2J,EAAO3J,kBAC1BC,wBAAyB0J,EAAO1J,wBAChCC,uBAAwB2J,EAAG3J,uBAC3Bb,aAAcsK,EAAOK,OACrBpH,kBAAmB+G,EAAO/G,kBAC1B6F,8BAA+BkB,EAAOlB,8BACtClF,mBAAoBoG,EAAOpG,mBAC3BhE,eAAgBqK,EAAOrK,eACvBY,WAAYwJ,EAAOxJ,WACnBhB,uBAAwB0K,EAAG1K,uBAC3BmG,sBAAuBuE,EAAGvE,sBAC1B7F,qBAAsBoK,EAAGpK,qBACzB8B,wBAAyBsI,EAAGtI,wBAC5BnC,sBAAuByK,EAAGzK,sBAC1BiC,uBAAwBwI,EAAGxI,uBAC3B0B,+BAAgC8G,EAAG9G,+BACnCS,iCAAkCqG,EAAGrG,oCAvCzCkG,CAwCIzL,ICxrBFgM,EAAwB,SAAA/L,GAAS,IAC3BgM,EAAkEhM,EAAlEgM,WAAYC,EAAsDjM,EAAtDiM,UAAWhN,EAA2Ce,EAA3Cf,WAAYiN,EAA+BlM,EAA/BkM,mBAAoBC,EAAWnM,EAAXmM,OAC/D,OACI,gBAAC,QAAD,CACItO,GAAG,4BACHC,UAAU,oBACVmO,UAAWA,EACXG,QAASnN,EACToN,iBAAe,EACfL,WAAYA,EACZM,gBAAgB,EAChBC,YAAaJ,EACb9D,OAAO,OACPmE,MAAM,sBAEN,gBAAC,oBAAD,CACI1O,UAAWC,IAAW,wBAAyB,oCAC/CuK,sBAAsB,QAEtB,gBAAC,EAAD,CAAiBC,WAAS,EAACtJ,YAAY,EAAMkN,OAAQA,EAAQD,mBAAoBA,OAMjGH,EAAsBxM,UAAY,CAC9BR,SAAUS,IAAUiN,IACpBC,QAASlN,IAAUM,KACnBX,MAAOK,IAAUI,OACjB+M,QAASnN,IAAUK,KACnB+M,iBAAkBpN,IAAUI,QAGjBmM,QC7BTc,EAAqB,SAAC,GAAD,IAAG1P,EAAH,EAAGA,YAAa2P,EAAhB,EAAgBA,iBAAkB/N,EAAlC,EAAkCA,SAAlC,OACvB5B,GAAe2P,EACX,gBAAC,UAAD,CAASC,UAAU,SAASC,QAASF,EAAkBG,OAAQ,OAC1DlO,GAGL,gBAAC,WAAD,KAAiBA,IAGnBmO,EAAkB,SAAC,GAAD,IAAG5Q,EAAH,EAAGA,WAAYD,EAAf,EAAeA,SAAf,OACpB,gBAAC,OAAD,CACI6B,KAAI,qBAAgB5B,EAAa,UAAYD,GAAY,WACzDyB,UAAS,+CAA0CxB,EAAa,UAAYD,GAC5E8B,KAAM,MAIRgP,EAAc,SAAC,GAUf,IATFC,EASE,EATFA,8BACAvQ,EAQE,EARFA,QACAR,EAOE,EAPFA,SACA2P,EAME,EANFA,WACAC,EAKE,EALFA,UACAoB,EAIE,EAJFA,aACA/Q,EAGE,EAHFA,WACAgR,EAEE,EAFFA,aACAnQ,EACE,EADFA,YAEMoQ,EAAiBlR,EAASmR,cAChC,OACI,uBAAK1P,UAAU,qBACX,uBAAKA,UAAU,wBACf,gBAAC,EAAD,CAAoBX,YAAaA,EAAa2P,iBAAkBM,GAC5D,uBACItP,UAAWC,IAAW,WAAY,CAC9B,iBAAkBsP,EAClB,uBAAwB/Q,EACxB,wBAAyBa,IAE7Ba,QAASb,OAAcc,EAAY,kBAAMqP,MAEzC,wBAAMxP,UAAU,gBACZ,gBAAC,iBAAD,KACI,gBAAC,EAAD,CAAiBxB,WAAYA,EAAYD,SAAUkR,KAEvD,gBAAC,gBAAD,MACMjR,GAAcD,IACZ,gBAAC,EAAD,CAAiBC,WAAYA,EAAYD,SAAUkR,YAI1C,IAAZ1Q,IAA4BR,IACjC,qBACIyB,UAAWC,IAAW,oBAAqB,CACvC,kCAAmC1B,IAAaC,KAGlDD,EAAD,UAGMQ,EAHN,YAGiB4B,iCAAuBpC,IAFrC,gBAAC,WAAD,CAAUE,kBAAkB,0BAMvCY,EACG,gBAAC,OAAD,CAAMe,KAAK,WAEX,gBAAC,OAAD,CAAMA,KAAK,oBAAoBJ,UAAU,6BAIrD,gBAAC,gBAAD,KACI,gBAAC,EAAD,CACImB,WAAYoO,EACZrB,WAAYA,EACZC,UAAWA,EACXE,OAAQmB,KAGhB,gBAAC,iBAAD,KACI,gBAACG,EAAA,EAAD,CACIC,GAAIL,EACJM,QAAS,IACT5P,WAAY,CACR6P,MAAO,+BACPC,UAAW,oCACXC,KAAM,+BAEVC,eAAa,GAEb,uBAAKjQ,UAAU,yBACX,gBAAC,EAAD,CAAiBmB,WAAYoO,EAAclB,OAAQmB,SAQ3EH,EAAY5N,UAAY,CACpB6N,8BAA+B5N,IAAUI,OACzClD,aAAc8C,IAAUI,OACxB/C,QAAS2C,IAAUI,OACnBvD,SAAUmD,IAAUI,OACpByN,aAAc7N,IAAUK,KACxB1C,YAAaqC,IAAUK,KACvBvD,WAAYkD,IAAUK,KACtBzC,QAASoC,IAAUI,OACnB0N,aAAc9N,IAAUM,MAGbqN","file":"js/core.account-info.f02db171eb2a79527f14.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Money, Button, Text } from '@deriv/components';\nimport { formatMoney, getCurrencyName, getMT5AccountDisplay, getCurrencyDisplayCode } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\nconst AccountList = ({\n    account_type,\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    has_reset_balance,\n    is_eu,\n    is_disabled,\n    is_virtual,\n    loginid,\n    onClickAccount,\n    onClickResetVirtualBalance,\n    selected_loginid,\n}) => {\n    const market_type = React.useMemo(() => {\n        if (loginid.startsWith('MX') || loginid.startsWith('MLT')) {\n            return localize('Synthetic');\n        } else if (loginid.startsWith('MF')) {\n            return localize('Financial');\n        }\n        return '';\n    }, [loginid]);\n\n    if (is_disabled && !currency) return null;\n    const currency_badge = currency ? currency_icon : 'IcCurrencyUnknown';\n\n    return (\n        <>\n            <div\n                id={`dt_${loginid}`}\n                className={classNames('acc-switcher__account', {\n                    'acc-switcher__account--selected': loginid === selected_loginid,\n                    'acc-switcher__account--disabled': is_disabled,\n                })}\n                onClick={is_disabled ? undefined : onClickAccount}\n            >\n                <span className='acc-switcher__id'>\n                    <Icon\n                        icon={is_virtual ? 'IcCurrencyVirtual' : currency_badge}\n                        className={'acc-switcher__id-icon'}\n                        size={24}\n                    />\n                    <span>\n                        {display_type === 'currency' ? (\n                            <CurrencyDisplay\n                                is_virtual={is_virtual}\n                                currency={currency}\n                                is_eu={is_eu}\n                                market_type={market_type}\n                            />\n                        ) : (\n                            <AccountDisplay account_type={account_type} />\n                        )}\n                        <div className='acc-switcher__loginid-text'>{loginid}</div>\n                    </span>\n                    {has_reset_balance ? (\n                        <Button\n                            is_disabled={is_disabled}\n                            onClick={e => {\n                                e.stopPropagation();\n                                onClickResetVirtualBalance();\n                            }}\n                            className='acc-switcher__reset-account-btn'\n                            secondary\n                            small\n                        >\n                            {localize('Reset balance')}\n                        </Button>\n                    ) : (\n                        has_balance && (\n                            <Text size='xs' color='prominent' className='acc-switcher__balance'>\n                                {currency && (\n                                    <Money\n                                        currency={getCurrencyDisplayCode(currency)}\n                                        amount={formatMoney(currency, balance, true)}\n                                        should_format={false}\n                                        show_currency\n                                    />\n                                )}\n                            </Text>\n                        )\n                    )}\n                </span>\n            </div>\n        </>\n    );\n};\n\nconst CurrencyDisplay = ({ currency, is_virtual }) => {\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n    if (!currency) {\n        return <Localize i18n_default_text='No currency assigned' />;\n    }\n    return getCurrencyName(currency);\n};\n\nconst AccountDisplay = ({ account_type }) => <div>{getMT5AccountDisplay(account_type)}</div>;\n\nexport default AccountList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ContentExpander } from '@deriv/components';\n\nconst AccountWrapper = ({ children, header, is_visible, toggleVisibility }) => (\n    <ContentExpander\n        className='acc-switcher'\n        title={header}\n        is_expanded={is_visible}\n        onToggle={toggleVisibility}\n        is_title_spaced\n    >\n        {children}\n    </ContentExpander>\n);\n\nAccountWrapper.propTypes = {\n    children: PropTypes.node,\n    header: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    is_visible: PropTypes.bool,\n    toggleVisibility: PropTypes.func,\n};\n\nexport default AccountWrapper;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport {\n    Button,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Icon,\n    Money,\n    Tabs,\n    ThemedScrollbars,\n    Text,\n} from '@deriv/components';\nimport { urlFor, routes, isCryptocurrency, formatMoney, getMT5Account } from '@deriv/shared';\n\nimport { localize, Localize } from '@deriv/translations';\nimport { getAccountTitle } from 'App/Containers/RealAccountSignup/helpers/constants';\nimport { connect } from 'Stores/connect';\nimport { AccountsItemLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport AccountList from './account-switcher-account-list.jsx';\nimport AccountWrapper from './account-switcher-account-wrapper.jsx';\n\nclass AccountSwitcher extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active_tab_index: !props.is_virtual || props.should_show_real_accounts_list ? 0 : 1,\n            is_demo_deriv_visible: true,\n            is_demo_dmt5_visible: true,\n            is_real_deriv_visible: true,\n            is_real_dmt5_visible: true,\n            has_autohide: true,\n        };\n    }\n\n    toggleVisibility = section => {\n        this.setState({ [`is_${section}_visible`]: !this.state[`is_${section}_visible`] });\n    };\n\n    setWrapperRef = node => {\n        this.wrapper_ref = node;\n    };\n\n    updateAccountTabIndex = index => {\n        this.setState({ active_tab_index: index });\n    };\n\n    handleClickOutside = event => {\n        const accounts_toggle_btn = !event.target.classList.contains('acc-info');\n        if (\n            this.wrapper_ref &&\n            !this.wrapper_ref.contains(event.target) &&\n            this.props.is_visible &&\n            accounts_toggle_btn\n        ) {\n            this.closeAccountsDialog();\n        }\n    };\n\n    handleLogout = () => {\n        this.closeAccountsDialog();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        this.props.logoutClient().then(() => {\n            this.props.routeBackInApp(this.props.history);\n        });\n    };\n\n    closeAccountsDialog = () => {\n        this.props.toggleAccountsDialog(false);\n    };\n\n    redirectToMt5 = account_type => {\n        this.closeAccountsDialog();\n        this.props.history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    openMt5RealAccount = account_type => {\n        const has_required_account =\n            account_type === 'synthetic' ? this.props.has_malta_account : this.props.has_maltainvest_account;\n\n        if (this.props.is_eu && !has_required_account) {\n            this.closeAccountsDialog();\n            this.props.openAccountNeededModal(\n                account_type === 'synthetic'\n                    ? this.props.standpoint.gaming_company\n                    : this.props.standpoint.financial_company,\n                account_type === 'synthetic' ? localize('Deriv Synthetic') : localize('Deriv Financial'),\n                account_type === 'synthetic' ? localize('DMT5 Synthetic') : localize('DMT5 Financial')\n            );\n        } else {\n            sessionStorage.setItem('open_mt5_account_type', `real.${account_type}`);\n            this.redirectToMt5Real();\n        }\n    };\n\n    redirectToMt5Real = () => {\n        if (!this.props.is_logged_in || this.props.is_mt5_allowed) {\n            this.redirectToMt5('real');\n        } else {\n            window.open(urlFor('user/metatrader', { legacy: true }));\n        }\n    };\n\n    onListEnter = () => this.setState({ has_autohide: false });\n\n    onListLeave = () => this.setState({ has_autohide: true });\n\n    openMt5DemoAccount = account_type => {\n        sessionStorage.setItem('open_mt5_account_type', `demo.${account_type}`);\n        this.redirectToMt5Demo();\n    };\n\n    redirectToMt5Demo = () => {\n        this.redirectToMt5('demo');\n    };\n\n    setAccountCurrency = () => {\n        this.closeAccountsDialog();\n        this.props.toggleSetCurrencyModal();\n    };\n\n    showAccountTypesModal = () => {\n        this.closeAccountsDialog();\n        this.props.toggleAccountTypesModal(true);\n    };\n\n    isDemo = account => /^demo/.test(account.group);\n\n    isReal = account => !this.isDemo(account);\n\n    getRemainingAccounts = existing_mt5_groups => {\n        const byAvailableCompanies = config_item => {\n            const [company, type] = config_item.api_key.split('.');\n            return !!this.props.landing_companies?.[company]?.[type];\n        };\n\n        const mt5_config = [\n            {\n                account_types: ['svg', 'malta'],\n                icon: 'Synthetic',\n                title: localize('Synthetic'),\n                type: 'synthetic',\n                api_key: 'mt_gaming_company.financial',\n            },\n            {\n                // TODO: [remove-standard-advanced] remove standard when API groups are updated\n                account_types: ['vanuatu', 'svg_standard', 'svg_financial', 'maltainvest_financial'],\n                icon: 'Financial',\n                title: localize('Financial'),\n                type: 'financial',\n                api_key: 'mt_financial_company.financial',\n            },\n            {\n                account_types: ['labuan'],\n                icon: 'Financial STP',\n                title: localize('Financial STP'),\n                type: 'financial_stp',\n                api_key: 'mt_financial_company.financial_stp',\n            },\n        ];\n\n        existing_mt5_groups.forEach(group => {\n            const type = group.split(/[demo|real]_/)[1];\n            const index_to_remove = mt5_config.findIndex(account => account.account_types.indexOf(type) > -1);\n            mt5_config.splice(index_to_remove, 1);\n        });\n\n        return mt5_config.filter(byAvailableCompanies);\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n        this.props.updateMt5LoginList();\n    }\n\n    componentWillUnmount() {\n        this.props.toggleShouldShowRealAccountsList(false);\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    async doSwitch(loginid) {\n        this.closeAccountsDialog();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.switchAccount(loginid);\n    }\n\n    resetBalance = async () => {\n        this.closeAccountsDialog();\n        this.props.resetVirtualBalance();\n    };\n\n    get is_real_account_tab() {\n        // Real accounts is always the first tab index based on design\n        return this.state.active_tab_index === 0;\n    }\n\n    get has_required_credentials() {\n        // for MT5 Real Financial STP, if true, users can instantly create a new account by setting password\n        if (!this.props.account_settings) return false;\n        const { citizen, tax_identification_number, tax_residence } = this.props.account_settings;\n        return !!(citizen && tax_identification_number && tax_residence);\n    }\n\n    get sorted_account_list() {\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        return this.props.account_list.slice().sort((a, b) => {\n            const a_currency = this.props.accounts[a.loginid].currency;\n            const b_currency = this.props.accounts[b.loginid].currency;\n            const a_is_crypto = isCryptocurrency(a_currency);\n            const b_is_crypto = isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n    }\n\n    get sorted_mt5_list() {\n        // for MT5, synthetic, financial, financial stp\n        return this.props.mt5_login_list.slice().sort((a, b) => {\n            if (/demo/.test(a.group) && !/demo/.test(b.group)) {\n                return 1;\n            }\n            if (/demo/.test(b.group) && !/demo/.test(a.group)) {\n                return -1;\n            }\n            if (/svg$/.test(a.group)) {\n                return -1;\n            }\n            // TODO: [remove-standard-advanced] remove standard when API groups are updated\n            if (/vanuatu|svg_(standard|financial)/.test(a.group)) {\n                return /svg$/.test(b.group) ? 1 : -1;\n            }\n            return 1;\n        });\n    }\n\n    get demo_mt5() {\n        return this.sorted_mt5_list.filter(this.isDemo);\n    }\n\n    get remaining_demo_mt5() {\n        const existing_demo_mt5_groups = Object.keys(this.demo_mt5).map(account => this.demo_mt5[account].group);\n        return this.getRemainingAccounts(existing_demo_mt5_groups);\n    }\n\n    get real_mt5() {\n        return this.sorted_mt5_list.filter(this.isReal);\n    }\n\n    get remaining_real_mt5() {\n        const existing_real_mt5_groups = Object.keys(this.real_mt5).map(account => this.real_mt5[account].group);\n        return this.getRemainingAccounts(existing_real_mt5_groups);\n    }\n\n    // SVG clients can't upgrade.\n    get remaining_real_accounts() {\n        return this.can_open_multi ? [] : this.props.upgradeable_landing_companies;\n    }\n\n    get has_set_currency() {\n        return this.props.account_list.filter(account => !account.is_virtual).some(account => account.title !== 'Real');\n    }\n\n    get can_upgrade() {\n        return !!(this.props.is_virtual && this.props.can_upgrade_to);\n    }\n\n    get can_open_multi() {\n        if (this.props.is_eu) return false;\n        if (this.props.available_crypto_currencies.length < 1 && !this.props.has_fiat) return true;\n        return !this.props.is_virtual;\n    }\n\n    get total_demo_assets() {\n        const vrtc_loginid = this.props.account_list.find(account => account.is_virtual).loginid;\n        const vrtc_balance = this.props.accounts[vrtc_loginid] ? this.props.accounts[vrtc_loginid].balance : 0;\n        const mt5_demo_total = this.props.mt5_login_list\n            .filter(account => /^demo/.test(account.group))\n            .reduce(\n                (total, account) => {\n                    total.balance += account.balance;\n                    return total;\n                },\n                { balance: 0 }\n            );\n        return Array.isArray(this.props.mt5_login_list) ? mt5_demo_total.balance + vrtc_balance : vrtc_balance;\n    }\n\n    get total_real_assets() {\n        return this.props.obj_total_balance.amount_real + this.props.obj_total_balance.amount_mt5;\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n\n        const total_assets_message_demo = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 demo accounts.')\n            : localize('Total assets in your Deriv demo accounts.');\n\n        const total_assets_message_real = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 real accounts.')\n            : localize('Total assets in your Deriv real accounts.');\n\n        const total_assets_message = this.is_real_account_tab ? total_assets_message_real : total_assets_message_demo;\n\n        const demo_accounts = (\n            <div className='acc-switcher__list-wrapper'>\n                <AccountWrapper\n                    header={localize('Deriv Accounts')}\n                    is_visible={this.state.is_demo_deriv_visible}\n                    toggleVisibility={() => {\n                        this.toggleVisibility('demo_deriv');\n                    }}\n                >\n                    <div className='acc-switcher__accounts'>\n                        {this.sorted_account_list\n                            .filter(account => account.is_virtual)\n                            .map(account => (\n                                <AccountList\n                                    key={account.loginid}\n                                    balance={this.props.accounts[account.loginid].balance}\n                                    currency={this.props.accounts[account.loginid].currency}\n                                    currency_icon={`IcCurrency-${account.icon}`}\n                                    display_type={'currency'}\n                                    has_balance={'balance' in this.props.accounts[account.loginid]}\n                                    has_reset_balance={this.props.accounts[this.props.account_loginid].is_virtual}\n                                    is_disabled={account.is_disabled}\n                                    is_virtual={account.is_virtual}\n                                    loginid={account.loginid}\n                                    onClickAccount={\n                                        account.is_disabled ? undefined : this.doSwitch.bind(this, account.loginid)\n                                    }\n                                    onClickResetVirtualBalance={this.resetBalance}\n                                    selected_loginid={this.props.account_loginid}\n                                />\n                            ))}\n                    </div>\n                </AccountWrapper>\n                {this.props.is_mt5_allowed && (\n                    <React.Fragment>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={localize('DMT5 Accounts')}\n                            is_visible={this.state.is_demo_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('demo_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {!!this.demo_mt5.length && (\n                                        <div className='acc-switcher__accounts'>\n                                            {this.demo_mt5.map(account => (\n                                                <AccountList\n                                                    key={account.login}\n                                                    account_type={account.group}\n                                                    balance={account.balance}\n                                                    currency={account.currency}\n                                                    currency_icon={`IcMt5-${getMT5Account(account.group)}`}\n                                                    has_balance={'balance' in account}\n                                                    loginid={account.display_login}\n                                                    onClickAccount={this.redirectToMt5Demo}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                    {this.remaining_demo_mt5.map(account => (\n                                        <div key={account.title} className='acc-switcher__new-account'>\n                                            <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                            <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                                {account.title}\n                                            </Text>\n                                            <Button\n                                                onClick={() => this.openMt5DemoAccount(account.type)}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n\n        const real_accounts = (\n            <div className='acc-switcher__list-wrapper' onMouseEnter={this.onListEnter} onMouseLeave={this.onListLeave}>\n                <React.Fragment>\n                    <AccountWrapper\n                        header={localize('Deriv Accounts')}\n                        is_visible={this.state.is_real_deriv_visible}\n                        toggleVisibility={() => {\n                            this.toggleVisibility('real_deriv');\n                        }}\n                    >\n                        <div className='acc-switcher__accounts'>\n                            {this.sorted_account_list\n                                .filter(account => !account.is_virtual)\n                                .map(account => {\n                                    return (\n                                        <AccountList\n                                            key={account.loginid}\n                                            balance={this.props.accounts[account.loginid].balance}\n                                            currency={this.props.accounts[account.loginid].currency}\n                                            currency_icon={`IcCurrency-${account.icon}`}\n                                            display_type={'currency'}\n                                            has_balance={'balance' in this.props.accounts[account.loginid]}\n                                            is_disabled={account.is_disabled}\n                                            is_virtual={account.is_virtual}\n                                            is_eu={this.props.is_eu}\n                                            loginid={account.loginid}\n                                            onClickAccount={\n                                                account.is_disabled\n                                                    ? undefined\n                                                    : this.doSwitch.bind(this, account.loginid)\n                                            }\n                                            selected_loginid={this.props.account_loginid}\n                                        />\n                                    );\n                                })}\n                        </div>\n                        {this.remaining_real_accounts.map((account, index) => (\n                            <div key={index} className='acc-switcher__new-account'>\n                                <Icon icon='IcDeriv' size={24} />\n                                <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                    {getAccountTitle(account, {\n                                        account_residence: this.props.client_residence,\n                                    })}\n                                </Text>\n                                <Button\n                                    onClick={() => this.props.openRealAccountSignup(account)}\n                                    className='acc-switcher__new-account-btn'\n                                    secondary\n                                    small\n                                >\n                                    {localize('Add')}\n                                </Button>\n                            </div>\n                        ))}\n                        {!this.can_upgrade && this.can_open_multi && (\n                            <Button\n                                className='acc-switcher__btn'\n                                secondary\n                                onClick={\n                                    this.has_set_currency\n                                        ? () => this.props.openRealAccountSignup('manage')\n                                        : this.setAccountCurrency\n                                }\n                            >\n                                {this.props.has_fiat && this.props.available_crypto_currencies?.length === 0\n                                    ? localize('Manage account')\n                                    : localize('Add or manage account')}\n                            </Button>\n                        )}\n                    </AccountWrapper>\n                </React.Fragment>\n                {this.props.is_mt5_allowed && (\n                    <React.Fragment>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={localize('DMT5 Accounts')}\n                            is_visible={this.state.is_real_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('real_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {!!this.real_mt5.length && (\n                                        <div className='acc-switcher__accounts'>\n                                            {this.real_mt5.map(account => (\n                                                <AccountList\n                                                    key={account.login}\n                                                    account_type={account.group}\n                                                    balance={account.balance}\n                                                    currency={account.currency}\n                                                    currency_icon={`IcMt5-${getMT5Account(account.group)}`}\n                                                    has_balance={'balance' in account}\n                                                    loginid={account.display_login}\n                                                    onClickAccount={this.redirectToMt5Real}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                    {this.remaining_real_mt5.map(account => (\n                                        <div\n                                            key={account.title}\n                                            className={classNames('acc-switcher__new-account', {\n                                                'acc-switcher__new-account--disabled': this.props.mt5_login_list_error,\n                                            })}\n                                        >\n                                            <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                            <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                                {account.title}\n                                            </Text>\n                                            <Button\n                                                onClick={() => this.openMt5RealAccount(account.type)}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                                is_disabled={\n                                                    (!this.props.is_eu && !this.props.has_any_real_account) ||\n                                                    (account.type === 'financial_stp' &&\n                                                        (this.props.is_pending_authentication ||\n                                                            this.has_required_credentials)) ||\n                                                    !!this.props.mt5_login_list_error\n                                                }\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef}>\n                <Tabs\n                    active_index={this.state.active_tab_index}\n                    className='acc-switcher__list-tabs'\n                    onTabItemClick={this.updateAccountTabIndex}\n                    top\n                >\n                    {/* TODO: De-couple and refactor demo and real accounts groups\n                        into a single reusable AccountListItem component */}\n                    <div label={localize('Real')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars height='354px'>{real_accounts}</ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                                {real_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                    <div label={localize('Demo')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars height='354px'>{demo_accounts}</ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                                {demo_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                </Tabs>\n                <div\n                    className={classNames('acc-switcher__separator', {\n                        'acc-switcher__separator--auto-margin': this.props.is_mobile,\n                    })}\n                />\n                <div className='acc-switcher__total'>\n                    <Text line_height='s' size='xs' weight='bold' color='prominent'>\n                        <Localize i18n_default_text='Total assets' />\n                    </Text>\n                    <Text size='xs' color='prominent' className='acc-switcher__balance'>\n                        <Money\n                            currency={this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD'}\n                            amount={formatMoney(\n                                this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD',\n                                this.is_real_account_tab ? this.total_real_assets : this.total_demo_assets,\n                                true\n                            )}\n                            show_currency\n                            should_format={false}\n                        />\n                    </Text>\n                </div>\n                <Text color='less-prominent' line_height='s' size='xxxs' className='acc-switcher__total-subtitle'>\n                    {total_assets_message}\n                </Text>\n                <div className='acc-switcher__separator' />\n                <div className='acc-switcher__footer'>\n                    {this.props.is_uk && this.props.has_any_real_account && (\n                        <Button\n                            className='acc-switcher__compare'\n                            type='button'\n                            has_effect\n                            onClick={this.showAccountTypesModal}\n                            text={localize('Compare')}\n                            secondary\n                        />\n                    )}\n                    <div id='dt_logout_button' className='acc-switcher__logout' onClick={this.handleLogout}>\n                        <Text color='prominent' size='xs' align='left' className='acc-switcher__logout-text'>\n                            {localize('Log out')}\n                        </Text>\n                        <Icon\n                            icon='IcLogout'\n                            className='acc-switcher__logout-icon drawer__icon'\n                            onClick={this.handleLogout}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    available_crypto_currencies: PropTypes.array,\n    account_list: PropTypes.array,\n    account_loginid: PropTypes.string,\n    accounts: PropTypes.object,\n    can_change_fiat_currency: PropTypes.bool,\n    can_upgrade_to: PropTypes.string,\n    has_fiat: PropTypes.bool,\n    has_any_real_account: PropTypes.bool,\n    is_eu: PropTypes.bool,\n    is_loading_mt5: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_mt5_allowed: PropTypes.bool,\n    is_pending_authentication: PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_uk: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    mt5_login_list: PropTypes.array,\n    obj_total_balance: PropTypes.object,\n    openRealAccountSignup: PropTypes.func,\n    switchAccount: PropTypes.func,\n    resetVirtualBalance: PropTypes.func,\n    toggleAccountsDialog: PropTypes.func,\n    toggleAccountTypesModal: PropTypes.func,\n    togglePositionsDrawer: PropTypes.func,\n    toggleSetCurrencyModal: PropTypes.func,\n    updateMt5LoginList: PropTypes.func,\n};\n\nconst account_switcher = withRouter(\n    connect(({ client, common, ui }) => ({\n        available_crypto_currencies: client.available_crypto_currencies,\n        account_loginid: client.loginid,\n        accounts: client.accounts,\n        account_settings: client.account_settings,\n        can_change_fiat_currency: client.can_change_fiat_currency,\n        account_list: client.account_list,\n        can_upgrade_to: client.can_upgrade_to,\n        client_residence: client.residence,\n        is_eu: client.is_eu,\n        is_loading_mt5: client.is_populating_mt5_account_list,\n        is_logged_in: client.is_logged_in,\n        is_mt5_allowed: client.is_mt5_allowed,\n        is_pending_authentication: client.is_pending_authentication,\n        is_uk: client.is_uk,\n        is_virtual: client.is_virtual,\n        has_fiat: client.has_fiat,\n        has_any_real_account: client.has_any_real_account,\n        mt5_login_list: client.mt5_login_list,\n        mt5_login_list_error: client.mt5_login_list_error,\n        obj_total_balance: client.obj_total_balance,\n        switchAccount: client.switchAccount,\n        resetVirtualBalance: client.resetVirtualBalance,\n        has_malta_account: client.has_malta_account,\n        has_maltainvest_account: client.has_maltainvest_account,\n        openAccountNeededModal: ui.openAccountNeededModal,\n        logoutClient: client.logout,\n        landing_companies: client.landing_companies,\n        upgradeable_landing_companies: client.upgradeable_landing_companies,\n        updateMt5LoginList: client.updateMt5LoginList,\n        routeBackInApp: common.routeBackInApp,\n        standpoint: client.standpoint,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        toggleAccountsDialog: ui.toggleAccountsDialog,\n        toggleAccountTypesModal: ui.toggleAccountTypesModal,\n        togglePositionsDrawer: ui.togglePositionsDrawer,\n        toggleSetCurrencyModal: ui.toggleSetCurrencyModal,\n        should_show_real_accounts_list: ui.should_show_real_accounts_list,\n        toggleShouldShowRealAccountsList: ui.toggleShouldShowRealAccountsList,\n    }))(AccountSwitcher)\n);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Div100vhContainer, Modal } from '@deriv/components';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountSwitcherMobile = props => {\n    const { disableApp, enableApp, is_visible, is_upgrade_enabled, toggle } = props;\n    return (\n        <Modal\n            id='dt_account_switcher_modal'\n            className='accounts-switcher'\n            enableApp={enableApp}\n            is_open={is_visible}\n            is_vertical_top\n            disableApp={disableApp}\n            has_close_icon={false}\n            toggleModal={toggle}\n            height='auto'\n            width='calc(100vw - 32px)'\n        >\n            <Div100vhContainer\n                className={classNames('acc-switcher__wrapper', 'acc-switcher__wrapper--is-mobile')}\n                max_autoheight_offset='48px'\n            >\n                <AccountSwitcher is_mobile is_visible={true} toggle={toggle} is_upgrade_enabled={is_upgrade_enabled} />\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nAccountSwitcherMobile.propTypes = {\n    children: PropTypes.any,\n    onClose: PropTypes.func,\n    title: PropTypes.string,\n    visible: PropTypes.bool,\n    wrapperClassName: PropTypes.string,\n};\n\nexport default AccountSwitcherMobile;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, Icon, MobileWrapper, Popover } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { getCurrencyDisplayCode } from '@deriv/shared';\nimport AccountSwitcherMobile from 'App/Containers/AccountSwitcher/account-switcher-mobile.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountInfoWrapper = ({ is_disabled, disabled_message, children }) =>\n    is_disabled && disabled_message ? (\n        <Popover alignment='bottom' message={disabled_message} zIndex={99999}>\n            {children}\n        </Popover>\n    ) : (\n        <React.Fragment>{children}</React.Fragment>\n    );\n\nconst AccountInfoIcon = ({ is_virtual, currency }) => (\n    <Icon\n        icon={`IcCurrency-${is_virtual ? 'virtual' : currency || 'Unknown'}`}\n        className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n        size={24}\n    />\n);\n\nconst AccountInfo = ({\n    acc_switcher_disabled_message,\n    balance,\n    currency,\n    disableApp,\n    enableApp,\n    is_dialog_on,\n    is_virtual,\n    toggleDialog,\n    is_disabled,\n}) => {\n    const currency_lower = currency.toLowerCase();\n    return (\n        <div className='acc-info__wrapper'>\n            <div className='acc-info__separator' />\n            <AccountInfoWrapper is_disabled={is_disabled} disabled_message={acc_switcher_disabled_message}>\n                <div\n                    className={classNames('acc-info', {\n                        'acc-info--show': is_dialog_on,\n                        'acc-info--is-virtual': is_virtual,\n                        'acc-info--is-disabled': is_disabled,\n                    })}\n                    onClick={is_disabled ? undefined : () => toggleDialog()}\n                >\n                    <span className='acc-info__id'>\n                        <DesktopWrapper>\n                            <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            {(is_virtual || currency) && (\n                                <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                            )}\n                        </MobileWrapper>\n                    </span>\n                    {(typeof balance !== 'undefined' || !currency) && (\n                        <p\n                            className={classNames('acc-info__balance', {\n                                'acc-info__balance--no-currency': !currency && !is_virtual,\n                            })}\n                        >\n                            {!currency ? (\n                                <Localize i18n_default_text='No currency assigned' />\n                            ) : (\n                                `${balance} ${getCurrencyDisplayCode(currency)}`\n                            )}\n                        </p>\n                    )}\n                    {is_disabled ? (\n                        <Icon icon='IcLock' />\n                    ) : (\n                        <Icon icon='IcChevronDownBold' className='acc-info__select-arrow' />\n                    )}\n                </div>\n            </AccountInfoWrapper>\n            <MobileWrapper>\n                <AccountSwitcherMobile\n                    is_visible={is_dialog_on}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    toggle={toggleDialog}\n                />\n            </MobileWrapper>\n            <DesktopWrapper>\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter: 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit: 'acc-switcher__wrapper--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper'>\n                        <AccountSwitcher is_visible={is_dialog_on} toggle={toggleDialog} />\n                    </div>\n                </CSSTransition>\n            </DesktopWrapper>\n        </div>\n    );\n};\n\nAccountInfo.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.string,\n    currency: PropTypes.string,\n    is_dialog_on: PropTypes.bool,\n    is_disabled: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    loginid: PropTypes.string,\n    toggleDialog: PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}