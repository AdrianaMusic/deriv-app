{"version":3,"sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx","webpack:///./App/Containers/AccountSignupModal/account-signup-modal.jsx"],"names":["SetResidenceForm","class_prefix","children","header_text","errors","touched","setFieldTouched","setFieldValue","residence_list","className","as","weight","localize","name","field","autoComplete","type","label","error","residence","required","list_items","onItemSelection","value","text","placeholder","use_text","onChange","e","target","propTypes","PropTypes","node","string","arrayOf","object","signupInitialValues","password","AccountSignup","enableApp","isModalVisible","is_account_signup_modal_visible","onSignup","context_type","React","PlatformContext","pw_input","setPWInput","has_valid_residence","setHasValidResidence","onResidenceSelection","onSignupComplete","Error","initialValues","validate","values","validLength","min","max","validPassword","getErrorMessages","min_number","max_number","index_of_selection","findIndex","item","toLowerCase","disabled","website_name","validateSignup","onSubmit","modded_values","is_deriv_crypto","isSubmitting","handleBlur","handleChange","i18n_default_text","input","has_error","custom_feedback_messages","password_warnings","onBlur","new_password","size","classNames","is_disabled","primary","onClick","func","array","bool","AccountSignupModal","disableApp","is_loading","is_visible","is_logged_in","logout","toggleAccountSignupModal","length","is_mobile_full_width","is_content_centered","connect","ui","client"],"mappings":"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","file":"js/core.account-signup-modal.893af0192f57620c57ef.js","sourcesContent":["import { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Autocomplete, DesktopWrapper, MobileWrapper, SelectNative, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    class_prefix = 'set-residence',\n    children,\n    header_text,\n    errors,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => (\n    <div className={`${class_prefix}__residence-selection`}>\n        {!!header_text && (\n            <Text as='p' weight='bold' className={`${class_prefix}__heading`}>\n                {header_text}\n            </Text>\n        )}\n        <p className={`${class_prefix}__${header_text ? 'text' : 'heading'}`}>{localize('Where do you live?')}</p>\n        <Field name='residence'>\n            {({ field }) => (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            className={`${class_prefix}__residence-field`}\n                            type='text'\n                            label={localize('Choose country')}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => setFieldValue('residence', value ? text : '', true)}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <SelectNative\n                            placeholder={localize('Please select')}\n                            label={localize('Choose country')}\n                            value={field.value}\n                            list_items={residence_list}\n                            error={touched.residence && errors.residence}\n                            required\n                            use_text\n                            onChange={e => {\n                                setFieldTouched('residence', true);\n                                setFieldValue('residence', e.target.value, true);\n                            }}\n                        />\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n        </Field>\n        {children}\n    </div>\n);\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.node,\n    class_prefix: PropTypes.string,\n    header_text: PropTypes.string,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SetResidenceForm;\n","import classNames from 'classnames';\nimport { Field, Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Dialog, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport { validPassword, validLength, website_name, getErrorMessages, PlatformContext } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport ResidenceForm from '../SetResidenceModal/set-residence-form.jsx';\nimport 'Sass/app/modules/account-signup.scss';\n\nconst signupInitialValues = { password: '', residence: '' };\n\nconst validateSignup = (values, residence_list) => {\n    const errors = {};\n\n    if (\n        !validLength(values.password, {\n            min: 8,\n            max: 25,\n        })\n    ) {\n        errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n            min_number: 8,\n            max_number: 25,\n        });\n    } else if (!validPassword(values.password)) {\n        errors.password = getErrorMessages().password();\n    }\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    return errors;\n};\n\nconst AccountSignup = ({ enableApp, isModalVisible, is_account_signup_modal_visible, onSignup, residence_list }) => {\n    const context_type = React.useContext(PlatformContext);\n\n    const [pw_input, setPWInput] = React.useState('');\n    const [has_valid_residence, setHasValidResidence] = React.useState(false);\n\n    const updatePassword = new_password => {\n        setPWInput(new_password);\n    };\n\n    const onResidenceSelection = () => {\n        setHasValidResidence(true);\n    };\n\n    const onSignupComplete = error => {\n        // Handle lower level modal controls due to overriding modal rendering\n        isModalVisible(false);\n        enableApp();\n\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error) {\n            throw Error(error);\n        }\n    };\n\n    const validateSignupPassthrough = values => validateSignup(values, residence_list);\n    const onSignupPassthrough = values => {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        const modded_values = {\n            ...values,\n            residence: residence_list[index_of_selection].value,\n            is_deriv_crypto: context_type.is_deriv_crypto,\n            is_account_signup_modal_visible,\n        };\n        onSignup(modded_values, onSignupComplete);\n    };\n\n    return (\n        <div className='account-signup'>\n            <Formik\n                initialValues={signupInitialValues}\n                validate={validateSignupPassthrough}\n                onSubmit={onSignupPassthrough}\n            >\n                {({\n                    isSubmitting,\n                    handleBlur,\n                    errors,\n                    handleChange,\n                    values,\n                    setFieldValue,\n                    setFieldTouched,\n                    touched,\n                }) => (\n                    <Form>\n                        {!has_valid_residence ? (\n                            <ResidenceForm\n                                header_text={localize('Thanks for verifying your email')}\n                                class_prefix='account-signup'\n                                errors={errors}\n                                touched={touched}\n                                setFieldTouched={setFieldTouched}\n                                setFieldValue={setFieldValue}\n                                residence_list={residence_list}\n                            >\n                                <Button\n                                    className={classNames('account-signup__btn', {\n                                        'account-signup__btn--disabled': !values.residence || errors.residence,\n                                    })}\n                                    type='button'\n                                    is_disabled={!values.residence || !!errors.residence}\n                                    onClick={onResidenceSelection}\n                                    primary\n                                    text={localize('Next')}\n                                />\n                            </ResidenceForm>\n                        ) : (\n                            <div className='account-signup__password-selection'>\n                                <Text as='p' weight='bold' className='account-signup__heading'>\n                                    <Localize i18n_default_text='Keep your account secure with a password' />\n                                </Text>\n                                <Field name='password'>\n                                    {({ field }) => (\n                                        <PasswordMeter\n                                            input={pw_input}\n                                            has_error={!!(touched.password && errors.password)}\n                                            custom_feedback_messages={getErrorMessages().password_warnings}\n                                        >\n                                            <PasswordInput\n                                                {...field}\n                                                className='account-signup__password-field'\n                                                label={localize('Create a password')}\n                                                error={touched.password && errors.password}\n                                                required\n                                                value={values.password}\n                                                onBlur={handleBlur}\n                                                onChange={e => {\n                                                    const input = e.target;\n                                                    setFieldTouched('password', true);\n                                                    if (input) updatePassword(input.value);\n                                                    handleChange(e);\n                                                }}\n                                            />\n                                        </PasswordMeter>\n                                    )}\n                                </Field>\n                                <Text as='p' size='xxs' className='account-signup__subtext'>\n                                    <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                </Text>\n\n                                <Button\n                                    className={classNames('account-signup__btn', {\n                                        'account-signup__btn--disabled':\n                                            !values.password || errors.password || isSubmitting,\n                                    })}\n                                    type='submit'\n                                    is_disabled={!values.password || !!errors.password || isSubmitting}\n                                    text={localize('Start trading')}\n                                    primary\n                                />\n                            </div>\n                        )}\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nAccountSignup.propTypes = {\n    enableApp: PropTypes.func,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.array,\n    isModalVisible: PropTypes.func,\n    is_account_signup_modal_visible: PropTypes.bool,\n};\n\nconst AccountSignupModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    is_logged_in,\n    logout,\n    onSignup,\n    residence_list,\n    toggleAccountSignupModal,\n}) => {\n    React.useEffect(() => {\n        // a logged in user should not be able to create a new account\n        if (is_visible && is_logged_in) {\n            logout();\n        }\n    }, [is_visible, is_logged_in, logout]);\n\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_mobile_full_width={false}\n            is_content_centered\n        >\n            <AccountSignup\n                onSignup={onSignup}\n                residence_list={residence_list}\n                isModalVisible={toggleAccountSignupModal}\n                enableApp={enableApp}\n                is_account_signup_modal_visible={is_visible}\n            />\n        </Dialog>\n    );\n};\n\nAccountSignupModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_account_signup_modal_visible,\n    toggleAccountSignupModal: ui.toggleAccountSignupModal,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    onSignup: client.onSignup,\n    is_logged_in: client.is_logged_in,\n    residence_list: client.residence_list,\n    logout: client.logout,\n}))(AccountSignupModal);\n"],"sourceRoot":""}