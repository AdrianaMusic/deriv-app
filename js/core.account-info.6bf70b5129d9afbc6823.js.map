{"version":3,"sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher-account-list.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-account-wrapper.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-mobile.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["CurrencyDisplay","currency","is_virtual","i18n_default_text","getCurrencyName","AccountDisplay","has_error","market_type","sub_account_type","server","is_dark_mode_on","color","size","geolocation","className","region","sequence","getMT5AccountDisplay","AccountList","balance","currency_icon","display_type","has_balance","has_reset_balance","is_disabled","loginid","onClickAccount","onClickResetVirtualBalance","selected_loginid","currency_badge","id","classNames","onClick","undefined","icon","e","stopPropagation","secondary","small","localize","styles","fontWeight","getCurrencyDisplayCode","amount","formatMoney","should_format","show_currency","AccountWrapper","children","header","is_visible","toggleVisibility","title","is_expanded","onToggle","is_title_spaced","propTypes","PropTypes","node","oneOfType","object","string","bool","func","AccountSwitcher","props","React","should_show_real_accounts_list","active_tab_index","setActiveTabIndex","is_deriv_demo_visible","setDerivDemoVisible","is_deriv_real_visible","setDerivRealVisible","is_dmt5_demo_visible","setDmt5DemoVisible","is_dmt5_real_visible","setDmt5RealVisible","wrapper_ref","section","handleLogout","closeAccountsDialog","is_positions_drawer_on","togglePositionsDrawer","logoutClient","then","routeBackInApp","history","toggleAccountsDialog","useOnClickOutside","event","target","classList","contains","redirectToMt5","account_type","push","routes","mt5","should_redirect_fstp_password","is_fully_authenticated","account_settings","citizen","tax_identification_number","tax_residence","hasRequiredCredentials","redirectToMt5Real","redirectToMt5Demo","isDemo","account","getRemainingAccounts","existing_mt5_accounts","gaming_config","getMtConfig","landing_companies","mt_gaming_company","trading_servers","financial_config","mt_financial_company","landing_company","mt5_config","Object","keys","forEach","company","has_account","find","number_market_type_available","filter","s","supported_accounts","includes","disabled","length","real_accounts","acc","some","type","getMT5AccountKey","getMT5Account","doSwitch","account_loginid","switchAccount","resetBalance","resetVirtualBalance","isRealAccountTab","getSortedAccountList","account_list","slice","sort","a","b","a_currency","accounts","b_currency","a_is_crypto","isCryptocurrency","b_is_crypto","a_is_fiat","b_is_fiat","getSortedMT5List","mt5_login_list","a_is_demo","b_is_demo","getDemoMT5","getRealMT5","canOpenMulti","is_eu","available_crypto_currencies","has_fiat","is_logged_in","vrtc_loginid","vrtc_balance","mt5_demo_total","mt5_total","total_assets_message_demo","is_mt5_allowed","total_assets_message_real","total_assets_message","demo_accounts","map","key","is_loading_mt5","speed","login","display_login","sessionStorage","setItem","mt5_disabled_signup_types","demo","upgradeable_landing_companies","index","getAccountTitle","account_residence","client_residence","openRealAccountSignup","can_upgrade_to","toggleSetCurrencyModal","server_name","error","details","mt5_login_list_error","has_required_account","has_malta_account","has_maltainvest_account","openAccountNeededModal","standpoint","gaming_company","financial_company","real","has_active_real_account","is_pending_authentication","ref","active_index","onTabItemClick","top","label","height","max_autoheight_offset","is_mobile","line_height","weight","obj_total_balance","reduce","total","amount_real","amount_mt5","Array","isArray","is_uk","has_any_real_account","has_effect","toggleAccountTypesModal","text","align","array","can_change_fiat_currency","updateMt5LoginList","account_switcher","withRouter","connect","client","common","ui","residence","is_populating_mt5_account_list","logout","toggleShouldShowRealAccountsList","AccountSwitcherMobile","disableApp","enableApp","is_upgrade_enabled","toggle","is_open","is_vertical_top","has_close_icon","toggleModal","width","any","onClose","visible","wrapperClassName","AccountInfoWrapper","disabled_message","alignment","message","zIndex","AccountInfoIcon","AccountInfo","acc_switcher_disabled_message","is_dialog_on","toggleDialog","currency_lower","toLowerCase","CSSTransition","in","timeout","enter","enterDone","exit","unmountOnExit"],"mappings":"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","file":"js/core.account-info.6bf70b5129d9afbc6823.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Money, Button, Text } from '@deriv/components';\nimport { formatMoney, getCurrencyName, getMT5AccountDisplay, getCurrencyDisplayCode } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\nconst AccountList = ({\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    has_error,\n    has_reset_balance,\n    is_disabled,\n    is_virtual,\n    loginid,\n    market_type,\n    onClickAccount,\n    onClickResetVirtualBalance,\n    selected_loginid,\n    server,\n    is_dark_mode_on,\n    sub_account_type,\n}) => {\n    if (is_disabled && !currency) return null;\n    const currency_badge = currency ? currency_icon : 'IcCurrencyUnknown';\n\n    return (\n        <>\n            <div\n                id={`dt_${loginid}`}\n                className={classNames('acc-switcher__account', {\n                    'acc-switcher__account--selected': loginid === selected_loginid,\n                    'acc-switcher__account--disabled': is_disabled,\n                })}\n                onClick={is_disabled ? undefined : onClickAccount}\n            >\n                <span className='acc-switcher__id'>\n                    <Icon\n                        icon={is_virtual ? 'IcCurrencyVirtual' : currency_badge}\n                        className={'acc-switcher__id-icon'}\n                        size={24}\n                    />\n                    <span>\n                        {display_type === 'currency' ? (\n                            <CurrencyDisplay is_virtual={is_virtual} currency={currency} />\n                        ) : (\n                            <AccountDisplay\n                                market_type={market_type}\n                                sub_account_type={sub_account_type}\n                                server={server}\n                                has_error={has_error}\n                                is_dark_mode_on={is_dark_mode_on}\n                            />\n                        )}\n                        <div\n                            className={classNames('acc-switcher__loginid-text', {\n                                'acc-switcher__loginid-text--disabled': has_error,\n                            })}\n                        >\n                            {loginid}\n                        </div>\n                    </span>\n                    {has_reset_balance ? (\n                        <Button\n                            is_disabled={is_disabled}\n                            onClick={e => {\n                                e.stopPropagation();\n                                onClickResetVirtualBalance();\n                            }}\n                            className='acc-switcher__reset-account-btn'\n                            secondary\n                            small\n                        >\n                            {localize('Reset balance')}\n                        </Button>\n                    ) : (\n                        has_balance && (\n                            <Text\n                                size='xs'\n                                color='prominent'\n                                styles={{ fontWeight: 'inherit' }}\n                                className='acc-switcher__balance'\n                            >\n                                {currency && (\n                                    <Money\n                                        currency={getCurrencyDisplayCode(currency)}\n                                        amount={formatMoney(currency, balance, true)}\n                                        should_format={false}\n                                        show_currency\n                                    />\n                                )}\n                            </Text>\n                        )\n                    )}\n                </span>\n            </div>\n        </>\n    );\n};\n\nconst CurrencyDisplay = ({ currency, is_virtual }) => {\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n    if (!currency) {\n        return <Localize i18n_default_text='No currency assigned' />;\n    }\n    return getCurrencyName(currency);\n};\n\nconst AccountDisplay = ({ has_error, market_type, sub_account_type, server, is_dark_mode_on }) => {\n    // TODO: Remove once account with error has market_type and sub_account_type in details response\n    if (has_error)\n        return (\n            <div>\n                <Text color='disabled' size='xs'>\n                    <Localize i18n_default_text='Unavailable' />\n                </Text>\n                {server?.geolocation && (\n                    <Text color='less-prominent' size='xxs' className='badge-server badge-server--disabled'>\n                        {server.geolocation.region}&nbsp;\n                        {server.geolocation.sequence !== 1 ? server.geolocation.sequence : ''}\n                    </Text>\n                )}\n            </div>\n        );\n    return (\n        <div>\n            {getMT5AccountDisplay(market_type, sub_account_type)}\n            {server?.geolocation && (\n                <Text color={is_dark_mode_on ? 'general' : 'colored-background'} size='xxs' className='badge-server'>\n                    {server.geolocation.region}&nbsp;\n                    {server.geolocation.sequence !== 1 ? server.geolocation.sequence : ''}\n                </Text>\n            )}\n        </div>\n    );\n};\n\nexport default AccountList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ContentExpander } from '@deriv/components';\n\nconst AccountWrapper = ({ children, header, is_visible, toggleVisibility }) => (\n    <ContentExpander\n        className='acc-switcher'\n        title={header}\n        is_expanded={is_visible}\n        onToggle={toggleVisibility}\n        is_title_spaced\n    >\n        {children}\n    </ContentExpander>\n);\n\nAccountWrapper.propTypes = {\n    children: PropTypes.node,\n    header: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    is_visible: PropTypes.bool,\n    toggleVisibility: PropTypes.func,\n};\n\nexport default AccountWrapper;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport {\n    Button,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Icon,\n    Money,\n    Tabs,\n    ThemedScrollbars,\n    Text,\n    useOnClickOutside,\n} from '@deriv/components';\nimport {\n    routes,\n    isCryptocurrency,\n    formatMoney,\n    getMT5Account,\n    getMT5AccountDisplay,\n    getMT5AccountKey,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { getAccountTitle } from 'App/Containers/RealAccountSignup/helpers/constants';\nimport { connect } from 'Stores/connect';\nimport { AccountsItemLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport AccountList from './account-switcher-account-list.jsx';\nimport AccountWrapper from './account-switcher-account-wrapper.jsx';\n\nconst AccountSwitcher = props => {\n    const [active_tab_index, setActiveTabIndex] = React.useState(\n        !props.is_virtual || props.should_show_real_accounts_list ? 0 : 1\n    );\n    const [is_deriv_demo_visible, setDerivDemoVisible] = React.useState(true);\n    const [is_deriv_real_visible, setDerivRealVisible] = React.useState(true);\n    const [is_dmt5_demo_visible, setDmt5DemoVisible] = React.useState(true);\n    const [is_dmt5_real_visible, setDmt5RealVisible] = React.useState(true);\n\n    const wrapper_ref = React.useRef();\n\n    const toggleVisibility = section => {\n        switch (section) {\n            case 'demo_deriv':\n                return setDerivDemoVisible(!is_deriv_demo_visible);\n            case 'demo_dmt5':\n                return setDmt5DemoVisible(!is_dmt5_demo_visible);\n            case 'real_deriv':\n                return setDerivRealVisible(!is_deriv_real_visible);\n            case 'real_dmt5':\n                return setDmt5RealVisible(!is_dmt5_real_visible);\n            default:\n                return false;\n        }\n    };\n\n    const handleLogout = () => {\n        closeAccountsDialog();\n        if (props.is_positions_drawer_on) {\n            props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        props.logoutClient().then(() => {\n            props.routeBackInApp(props.history);\n        });\n    };\n\n    const closeAccountsDialog = () => {\n        props.toggleAccountsDialog(false);\n    };\n\n    const validateClickOutside = event => props.is_visible && !event.target.classList.contains('acc-info');\n\n    useOnClickOutside(wrapper_ref, closeAccountsDialog, validateClickOutside);\n\n    const redirectToMt5 = account_type => {\n        closeAccountsDialog();\n        props.history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    const hasRequiredCredentials = () => {\n        // for MT5 Real Financial STP, if true, users can instantly create a new account by setting password\n        if (!props.account_settings) return false;\n        const { citizen, tax_identification_number, tax_residence } = props.account_settings;\n        return !!(citizen && tax_identification_number && tax_residence);\n    };\n\n    const should_redirect_fstp_password = props.is_fully_authenticated && hasRequiredCredentials();\n\n    const openMt5RealAccount = account_type => {\n        const has_required_account =\n            account_type === 'synthetic' ? props.has_malta_account : props.has_maltainvest_account;\n\n        if (props.is_eu && !has_required_account) {\n            closeAccountsDialog();\n            props.openAccountNeededModal(\n                account_type === 'synthetic' ? props.standpoint.gaming_company : props.standpoint.financial_company,\n                account_type === 'synthetic' ? localize('Deriv Synthetic') : localize('Deriv Financial'),\n                account_type === 'synthetic' ? localize('DMT5 Synthetic') : localize('DMT5 Financial')\n            );\n        } else {\n            if (should_redirect_fstp_password)\n                sessionStorage.setItem('open_mt5_account_type', `real.${account_type}.set_password`);\n            else sessionStorage.setItem('open_mt5_account_type', `real.${account_type}`);\n            redirectToMt5Real();\n        }\n    };\n\n    const redirectToMt5Real = () => {\n        redirectToMt5('real');\n    };\n\n    const openMt5DemoAccount = account_type => {\n        sessionStorage.setItem('open_mt5_account_type', `demo.${account_type}`);\n        redirectToMt5Demo();\n    };\n\n    const redirectToMt5Demo = () => {\n        redirectToMt5('demo');\n    };\n\n    const setAccountCurrency = () => {\n        closeAccountsDialog();\n        props.toggleSetCurrencyModal();\n    };\n\n    const showAccountTypesModal = () => {\n        closeAccountsDialog();\n        props.toggleAccountTypesModal(true);\n    };\n\n    const isDemo = account => account.account_type === 'demo';\n\n    // * mt5_login_list returns these:\n    // landing_company_short: \"svg\" | \"malta\" | \"maltainvest\" |  \"vanuatu\"  | \"labuan\" | \"bvi\"\n    // account_type: \"real\" | \"demo\"\n    // market_type: \"financial\" | \"gaming\"\n    // sub_account_type: \"financial\" | \"financial_stp\" | \"swap_free\"\n    //\n    // (all market type gaming are synthetic accounts and can only have financial or swap_free sub account)\n    //\n    // * we should map them to landing_company:\n    // mt_financial_company: { financial: {}, financial_stp: {}, swap_free: {} }\n    // mt_gaming_company: { financial: {}, swap_free: {} }\n    const getRemainingAccounts = existing_mt5_accounts => {\n        const gaming_config = getMtConfig(\n            'gaming',\n            props.landing_companies?.mt_gaming_company,\n            existing_mt5_accounts,\n            props.trading_servers\n        );\n        const financial_config = getMtConfig(\n            'financial',\n            props.landing_companies?.mt_financial_company,\n            existing_mt5_accounts,\n            props.trading_servers\n        );\n\n        return [...gaming_config, ...financial_config];\n    };\n\n    const getMtConfig = (market_type, landing_company, existing_mt5_accounts, trading_servers) => {\n        const mt5_config = [];\n        if (landing_company) {\n            Object.keys(landing_company).forEach(company => {\n                let has_account = existing_mt5_accounts.find(\n                    account => account.sub_account_type === company && account.market_type === market_type\n                );\n                if (has_account) {\n                    const number_market_type_available = trading_servers.filter(\n                        s => s.supported_accounts.includes(market_type) && !s.disabled\n                    ).length;\n                    const real_accounts = existing_mt5_accounts.filter(\n                        acc => acc.account_type === 'real' && acc.market_type === market_type\n                    );\n                    if (!!number_market_type_available && real_accounts.length) {\n                        has_account =\n                            has_account &&\n                            real_accounts.filter(acc => {\n                                return (\n                                    acc.market_type === market_type &&\n                                    trading_servers.some(server => server.id === acc.server)\n                                );\n                            }).length === number_market_type_available;\n                    }\n                }\n\n                if (!has_account) {\n                    const type = getMT5AccountKey(market_type, company);\n                    if (type) {\n                        mt5_config.push({\n                            icon: getMT5Account(market_type, company),\n                            title: getMT5AccountDisplay(market_type, company),\n                            type,\n                        });\n                    }\n                }\n            });\n        }\n        return mt5_config;\n    };\n\n    const doSwitch = async loginid => {\n        closeAccountsDialog();\n        if (props.account_loginid === loginid) return;\n        await props.switchAccount(loginid);\n    };\n\n    const resetBalance = async () => {\n        closeAccountsDialog();\n        props.resetVirtualBalance();\n    };\n\n    // Real accounts is always the first tab index based on design\n    const isRealAccountTab = active_tab_index === 0;\n\n    const getSortedAccountList = () => {\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        return props.account_list.slice().sort((a, b) => {\n            const a_currency = props.accounts[a.loginid].currency;\n            const b_currency = props.accounts[b.loginid].currency;\n            const a_is_crypto = isCryptocurrency(a_currency);\n            const b_is_crypto = isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n    };\n\n    const getSortedMT5List = () => {\n        // for MT5, synthetic, financial, financial stp\n        return props.mt5_login_list.slice().sort((a, b) => {\n            const a_is_demo = isDemo(a);\n            const b_is_demo = isDemo(b);\n\n            if (a_is_demo && !b_is_demo) {\n                return 1;\n            }\n            if (b_is_demo && !a_is_demo) {\n                return -1;\n            }\n            if (a.market_type === 'gaming') {\n                return -1;\n            }\n            if (a.sub_account_type === 'financial') {\n                return b.market_type === 'gaming' ? 1 : -1;\n            }\n            return 1;\n        });\n    };\n\n    const getDemoMT5 = () => {\n        return getSortedMT5List().filter(isDemo);\n    };\n\n    const getRemainingDemoMT5 = () => {\n        return getRemainingAccounts(getDemoMT5());\n    };\n\n    const getRealMT5 = () => {\n        return getSortedMT5List().filter(account => !isDemo(account));\n    };\n\n    const findServerForAccount = acc => {\n        const server_name = acc.error ? acc.error.details.server : acc.server;\n        return props.trading_servers.length > 1\n            ? props.trading_servers.find(server => server.id === server_name)\n            : null;\n    };\n\n    const getRemainingRealMT5 = () => {\n        return getRemainingAccounts(getRealMT5());\n    };\n\n    // SVG clients can't upgrade.\n    const getRemainingRealAccounts = () => {\n        return canOpenMulti() ? [] : props.upgradeable_landing_companies;\n    };\n\n    const hasSetCurrency = () => {\n        return props.account_list.filter(account => !account.is_virtual).some(account => account.title !== 'Real');\n    };\n\n    const canUpgrade = () => {\n        return !!(props.is_virtual && props.can_upgrade_to);\n    };\n\n    const canOpenMulti = () => {\n        if (props.is_eu) return false;\n        if (props.available_crypto_currencies.length < 1 && !props.has_fiat) return true;\n        return !props.is_virtual;\n    };\n\n    const getTotalDemoAssets = () => {\n        const vrtc_loginid = props.account_list.find(account => account.is_virtual).loginid;\n        const vrtc_balance = props.accounts[vrtc_loginid] ? props.accounts[vrtc_loginid].balance : 0;\n        const mt5_demo_total = props.mt5_login_list\n            .filter(account => isDemo(account))\n            .reduce(\n                (total, account) => {\n                    total.balance += account.balance;\n                    return total;\n                },\n                { balance: 0 }\n            );\n        return Array.isArray(props.mt5_login_list) ? mt5_demo_total.balance + vrtc_balance : vrtc_balance;\n    };\n\n    const getTotalRealAssets = () => {\n        // props.obj_total_balance.amount_mt5 is returning 0 regarding performance issues so we have to calculate\n        // the total MT5 accounts balance from props.mt5_login_list.\n        // You can remove this part if WS sends obj_total_balance.amount_mt5 correctly.\n        const mt5_total = props.mt5_login_list\n            .filter(account => !isDemo(account))\n            .reduce(\n                (total, account) => {\n                    total.balance += account.balance;\n                    return total;\n                },\n                { balance: 0 }\n            );\n        return (\n            props.obj_total_balance.amount_real +\n            (props.obj_total_balance.amount_mt5 > 0 ? props.obj_total_balance.amount_mt5 : mt5_total.balance)\n        );\n    };\n\n    if (!props.is_logged_in) return false;\n\n    const total_assets_message_demo = props.is_mt5_allowed\n        ? localize('Total assets in your Deriv and DMT5 demo accounts.')\n        : localize('Total assets in your Deriv demo accounts.');\n\n    const total_assets_message_real = props.is_mt5_allowed\n        ? localize('Total assets in your Deriv and DMT5 real accounts.')\n        : localize('Total assets in your Deriv real accounts.');\n\n    const total_assets_message = isRealAccountTab ? total_assets_message_real : total_assets_message_demo;\n\n    const demo_accounts = (\n        <div className='acc-switcher__list-wrapper'>\n            <AccountWrapper\n                header={localize('Deriv Accounts')}\n                is_visible={is_deriv_demo_visible}\n                toggleVisibility={() => {\n                    toggleVisibility('demo_deriv');\n                }}\n            >\n                <div className='acc-switcher__accounts'>\n                    {getSortedAccountList()\n                        .filter(account => account.is_virtual)\n                        .map(account => (\n                            <AccountList\n                                is_dark_mode_on={props.is_dark_mode_on}\n                                key={account.loginid}\n                                balance={props.accounts[account.loginid].balance}\n                                currency={props.accounts[account.loginid].currency}\n                                currency_icon={`IcCurrency-${account.icon}`}\n                                display_type={'currency'}\n                                has_balance={'balance' in props.accounts[account.loginid]}\n                                has_reset_balance={props.accounts[props.account_loginid].is_virtual}\n                                is_disabled={account.is_disabled}\n                                is_virtual={account.is_virtual}\n                                loginid={account.loginid}\n                                onClickAccount={account.is_disabled ? undefined : () => doSwitch(account.loginid)}\n                                onClickResetVirtualBalance={resetBalance}\n                                selected_loginid={props.account_loginid}\n                            />\n                        ))}\n                </div>\n            </AccountWrapper>\n            {props.is_mt5_allowed && (\n                <React.Fragment>\n                    <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                    <AccountWrapper\n                        header={localize('DMT5 Accounts')}\n                        is_visible={is_dmt5_demo_visible}\n                        toggleVisibility={() => {\n                            toggleVisibility('demo_dmt5');\n                        }}\n                    >\n                        {props.is_loading_mt5 ? (\n                            <div className='acc-switcher__accounts--is-loading'>\n                                <AccountsItemLoader speed={3} />\n                            </div>\n                        ) : (\n                            <React.Fragment>\n                                {!!getDemoMT5().length && (\n                                    <div className='acc-switcher__accounts'>\n                                        {getDemoMT5().map(account => (\n                                            <AccountList\n                                                is_dark_mode_on={props.is_dark_mode_on}\n                                                key={account.login}\n                                                market_type={account.market_type}\n                                                sub_account_type={account.sub_account_type}\n                                                balance={account.balance}\n                                                currency={account.currency}\n                                                currency_icon={`IcMt5-${getMT5Account(\n                                                    account.market_type,\n                                                    account.sub_account_type\n                                                )}`}\n                                                has_balance={'balance' in account}\n                                                has_error={account.has_error}\n                                                loginid={account.display_login}\n                                                onClickAccount={redirectToMt5Demo}\n                                            />\n                                        ))}\n                                    </div>\n                                )}\n                                {getRemainingDemoMT5().map(account => (\n                                    <div key={account.title} className='acc-switcher__new-account'>\n                                        <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                        <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                            {account.title}\n                                        </Text>\n                                        <Button\n                                            onClick={() => openMt5DemoAccount(account.type)}\n                                            className='acc-switcher__new-account-btn'\n                                            is_disabled={props.mt5_disabled_signup_types.demo}\n                                            secondary\n                                            small\n                                        >\n                                            {localize('Add')}\n                                        </Button>\n                                    </div>\n                                ))}\n                            </React.Fragment>\n                        )}\n                    </AccountWrapper>\n                </React.Fragment>\n            )}\n        </div>\n    );\n\n    const real_accounts = (\n        <div className='acc-switcher__list-wrapper'>\n            <React.Fragment>\n                <AccountWrapper\n                    header={localize('Deriv Accounts')}\n                    is_visible={is_deriv_real_visible}\n                    toggleVisibility={() => {\n                        toggleVisibility('real_deriv');\n                    }}\n                >\n                    <div className='acc-switcher__accounts'>\n                        {getSortedAccountList()\n                            .filter(account => !account.is_virtual)\n                            .map(account => {\n                                return (\n                                    <AccountList\n                                        is_dark_mode_on={props.is_dark_mode_on}\n                                        key={account.loginid}\n                                        balance={props.accounts[account.loginid].balance}\n                                        currency={props.accounts[account.loginid].currency}\n                                        currency_icon={`IcCurrency-${account.icon}`}\n                                        display_type={'currency'}\n                                        has_balance={'balance' in props.accounts[account.loginid]}\n                                        is_disabled={account.is_disabled}\n                                        is_virtual={account.is_virtual}\n                                        is_eu={props.is_eu}\n                                        loginid={account.loginid}\n                                        onClickAccount={\n                                            account.is_disabled ? undefined : () => doSwitch(account.loginid)\n                                        }\n                                        selected_loginid={props.account_loginid}\n                                    />\n                                );\n                            })}\n                    </div>\n                    {getRemainingRealAccounts().map((account, index) => (\n                        <div key={index} className='acc-switcher__new-account'>\n                            <Icon icon='IcDeriv' size={24} />\n                            <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                {getAccountTitle(account, {\n                                    account_residence: props.client_residence,\n                                })}\n                            </Text>\n                            <Button\n                                onClick={() => {\n                                    props.openRealAccountSignup(account);\n                                }}\n                                className='acc-switcher__new-account-btn'\n                                secondary\n                                small\n                            >\n                                {localize('Add')}\n                            </Button>\n                        </div>\n                    ))}\n                    {!canUpgrade() && canOpenMulti() && (\n                        <Button\n                            className='acc-switcher__btn'\n                            secondary\n                            onClick={\n                                hasSetCurrency() ? () => props.openRealAccountSignup('manage') : setAccountCurrency\n                            }\n                        >\n                            {props.has_fiat && props.available_crypto_currencies?.length === 0\n                                ? localize('Manage account')\n                                : localize('Add or manage account')}\n                        </Button>\n                    )}\n                </AccountWrapper>\n            </React.Fragment>\n            {props.is_mt5_allowed && (\n                <React.Fragment>\n                    <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                    <AccountWrapper\n                        header={localize('DMT5 Accounts')}\n                        is_visible={is_dmt5_real_visible}\n                        toggleVisibility={() => {\n                            toggleVisibility('real_dmt5');\n                        }}\n                    >\n                        {props.is_loading_mt5 ? (\n                            <div className='acc-switcher__accounts--is-loading'>\n                                <AccountsItemLoader speed={3} />\n                            </div>\n                        ) : (\n                            <React.Fragment>\n                                {!!getRealMT5().length && (\n                                    <div className='acc-switcher__accounts'>\n                                        {getRealMT5().map(account => (\n                                            <AccountList\n                                                is_dark_mode_on={props.is_dark_mode_on}\n                                                key={account.login}\n                                                market_type={account.market_type}\n                                                sub_account_type={account.sub_account_type}\n                                                balance={account.balance}\n                                                currency={account.currency}\n                                                currency_icon={`IcMt5-${getMT5Account(\n                                                    account.market_type,\n                                                    account.sub_account_type\n                                                )}`}\n                                                has_balance={'balance' in account}\n                                                has_error={account.has_error}\n                                                loginid={account.display_login}\n                                                onClickAccount={redirectToMt5Real}\n                                                server={findServerForAccount(account)}\n                                            />\n                                        ))}\n                                    </div>\n                                )}\n                                {getRemainingRealMT5().map(account => (\n                                    <div\n                                        key={account.title}\n                                        className={classNames('acc-switcher__new-account', {\n                                            'acc-switcher__new-account--disabled': props.mt5_login_list_error,\n                                        })}\n                                    >\n                                        <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                        <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                            {account.title}\n                                        </Text>\n                                        <Button\n                                            onClick={() => openMt5RealAccount(account.type)}\n                                            className='acc-switcher__new-account-btn'\n                                            secondary\n                                            small\n                                            is_disabled={\n                                                props.mt5_disabled_signup_types.real ||\n                                                !props.has_active_real_account ||\n                                                (account.type === 'financial_stp' &&\n                                                    (props.is_pending_authentication || !!props.mt5_login_list_error))\n                                            }\n                                        >\n                                            {localize('Add')}\n                                        </Button>\n                                    </div>\n                                ))}\n                            </React.Fragment>\n                        )}\n                    </AccountWrapper>\n                </React.Fragment>\n            )}\n        </div>\n    );\n\n    return (\n        <div className='acc-switcher__list' ref={wrapper_ref}>\n            <Tabs\n                active_index={active_tab_index}\n                className='acc-switcher__list-tabs'\n                onTabItemClick={index => setActiveTabIndex(index)}\n                top\n            >\n                {/* TODO: De-couple and refactor demo and real accounts groups\n                        into a single reusable AccountListItem component */}\n                <div label={localize('Real')} id='real_account_tab'>\n                    <DesktopWrapper>\n                        <ThemedScrollbars height='354px'>{real_accounts}</ThemedScrollbars>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                            {real_accounts}\n                        </Div100vhContainer>\n                    </MobileWrapper>\n                </div>\n                <div label={localize('Demo')} id='demo_account_tab'>\n                    <DesktopWrapper>\n                        <ThemedScrollbars height='354px'>{demo_accounts}</ThemedScrollbars>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                            {demo_accounts}\n                        </Div100vhContainer>\n                    </MobileWrapper>\n                </div>\n            </Tabs>\n            <div\n                className={classNames('acc-switcher__separator', {\n                    'acc-switcher__separator--auto-margin': props.is_mobile,\n                })}\n            />\n            <div className='acc-switcher__total'>\n                <Text line_height='s' size='xs' weight='bold' color='prominent'>\n                    <Localize i18n_default_text='Total assets' />\n                </Text>\n                <Text size='xs' color='prominent' className='acc-switcher__balance'>\n                    <Money\n                        currency={isRealAccountTab ? props.obj_total_balance.currency : 'USD'}\n                        amount={formatMoney(\n                            isRealAccountTab ? props.obj_total_balance.currency : 'USD',\n                            isRealAccountTab ? getTotalRealAssets() : getTotalDemoAssets(),\n                            true\n                        )}\n                        show_currency\n                        should_format={false}\n                    />\n                </Text>\n            </div>\n            <Text color='less-prominent' line_height='xs' size='xxxs' className='acc-switcher__total-subtitle'>\n                {total_assets_message}\n            </Text>\n            <div className='acc-switcher__separator' />\n            <div className='acc-switcher__footer'>\n                {props.is_uk && props.has_any_real_account && (\n                    <Button\n                        className='acc-switcher__compare'\n                        type='button'\n                        has_effect\n                        onClick={showAccountTypesModal}\n                        text={localize('Compare')}\n                        secondary\n                    />\n                )}\n                <div id='dt_logout_button' className='acc-switcher__logout' onClick={handleLogout}>\n                    <Text color='prominent' size='xs' align='left' className='acc-switcher__logout-text'>\n                        {localize('Log out')}\n                    </Text>\n                    <Icon icon='IcLogout' className='acc-switcher__logout-icon drawer__icon' onClick={handleLogout} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nAccountSwitcher.propTypes = {\n    available_crypto_currencies: PropTypes.array,\n    account_list: PropTypes.array,\n    account_loginid: PropTypes.string,\n    accounts: PropTypes.object,\n    can_change_fiat_currency: PropTypes.bool,\n    can_upgrade_to: PropTypes.string,\n    has_fiat: PropTypes.bool,\n    has_any_real_account: PropTypes.bool,\n    has_active_real_account: PropTypes.bool,\n    is_eu: PropTypes.bool,\n    is_fully_authenticated: PropTypes.bool,\n    is_loading_mt5: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_mt5_allowed: PropTypes.bool,\n    is_pending_authentication: PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_uk: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    mt5_disabled_signup_types: PropTypes.object,\n    mt5_login_list: PropTypes.array,\n    obj_total_balance: PropTypes.object,\n    openRealAccountSignup: PropTypes.func,\n    switchAccount: PropTypes.func,\n    resetVirtualBalance: PropTypes.func,\n    toggleAccountsDialog: PropTypes.func,\n    toggleAccountTypesModal: PropTypes.func,\n    togglePositionsDrawer: PropTypes.func,\n    toggleSetCurrencyModal: PropTypes.func,\n    updateMt5LoginList: PropTypes.func,\n};\n\nconst account_switcher = withRouter(\n    connect(({ client, common, ui }) => ({\n        available_crypto_currencies: client.available_crypto_currencies,\n        account_loginid: client.loginid,\n        accounts: client.accounts,\n        account_settings: client.account_settings,\n        can_change_fiat_currency: client.can_change_fiat_currency,\n        account_list: client.account_list,\n        can_upgrade_to: client.can_upgrade_to,\n        client_residence: client.residence,\n        is_dark_mode_on: ui.is_dark_mode_on,\n        is_eu: client.is_eu,\n        is_fully_authenticated: client.is_fully_authenticated,\n        is_loading_mt5: client.is_populating_mt5_account_list,\n        is_logged_in: client.is_logged_in,\n        is_mt5_allowed: client.is_mt5_allowed,\n        is_pending_authentication: client.is_pending_authentication,\n        is_uk: client.is_uk,\n        is_virtual: client.is_virtual,\n        has_fiat: client.has_fiat,\n        has_any_real_account: client.has_any_real_account,\n        mt5_disabled_signup_types: client.mt5_disabled_signup_types,\n        mt5_login_list: client.mt5_login_list,\n        mt5_login_list_error: client.mt5_login_list_error,\n        obj_total_balance: client.obj_total_balance,\n        switchAccount: client.switchAccount,\n        resetVirtualBalance: client.resetVirtualBalance,\n        has_malta_account: client.has_malta_account,\n        has_maltainvest_account: client.has_maltainvest_account,\n        has_active_real_account: client.has_active_real_account,\n        openAccountNeededModal: ui.openAccountNeededModal,\n        logoutClient: client.logout,\n        landing_companies: client.landing_companies,\n        upgradeable_landing_companies: client.upgradeable_landing_companies,\n        updateMt5LoginList: client.updateMt5LoginList,\n        routeBackInApp: common.routeBackInApp,\n        standpoint: client.standpoint,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        trading_servers: client.trading_servers,\n        toggleAccountsDialog: ui.toggleAccountsDialog,\n        toggleAccountTypesModal: ui.toggleAccountTypesModal,\n        togglePositionsDrawer: ui.togglePositionsDrawer,\n        toggleSetCurrencyModal: ui.toggleSetCurrencyModal,\n        should_show_real_accounts_list: ui.should_show_real_accounts_list,\n        toggleShouldShowRealAccountsList: ui.toggleShouldShowRealAccountsList,\n    }))(AccountSwitcher)\n);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Div100vhContainer, Modal } from '@deriv/components';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountSwitcherMobile = props => {\n    const { disableApp, enableApp, is_visible, is_upgrade_enabled, toggle } = props;\n    return (\n        <Modal\n            id='dt_account_switcher_modal'\n            className='accounts-switcher'\n            enableApp={enableApp}\n            is_open={is_visible}\n            is_vertical_top\n            disableApp={disableApp}\n            has_close_icon={false}\n            toggleModal={toggle}\n            height='auto'\n            width='calc(100vw - 32px)'\n        >\n            <Div100vhContainer\n                className={classNames('acc-switcher__wrapper', 'acc-switcher__wrapper--is-mobile')}\n                max_autoheight_offset='48px'\n            >\n                <AccountSwitcher is_mobile is_visible={true} toggle={toggle} is_upgrade_enabled={is_upgrade_enabled} />\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nAccountSwitcherMobile.propTypes = {\n    children: PropTypes.any,\n    onClose: PropTypes.func,\n    title: PropTypes.string,\n    visible: PropTypes.bool,\n    wrapperClassName: PropTypes.string,\n};\n\nexport default AccountSwitcherMobile;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, Icon, MobileWrapper, Popover } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { getCurrencyDisplayCode } from '@deriv/shared';\nimport AccountSwitcherMobile from 'App/Containers/AccountSwitcher/account-switcher-mobile.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountInfoWrapper = ({ is_disabled, disabled_message, children }) =>\n    is_disabled && disabled_message ? (\n        <Popover alignment='bottom' message={disabled_message} zIndex={99999}>\n            {children}\n        </Popover>\n    ) : (\n        <React.Fragment>{children}</React.Fragment>\n    );\n\nconst AccountInfoIcon = ({ is_virtual, currency }) => (\n    <Icon\n        icon={`IcCurrency-${is_virtual ? 'virtual' : currency || 'Unknown'}`}\n        className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n        size={24}\n    />\n);\n\nconst AccountInfo = ({\n    acc_switcher_disabled_message,\n    balance,\n    currency,\n    disableApp,\n    enableApp,\n    is_dialog_on,\n    is_virtual,\n    toggleDialog,\n    is_disabled,\n}) => {\n    const currency_lower = currency.toLowerCase();\n    return (\n        <div className='acc-info__wrapper'>\n            <div className='acc-info__separator' />\n            <AccountInfoWrapper is_disabled={is_disabled} disabled_message={acc_switcher_disabled_message}>\n                <div\n                    className={classNames('acc-info', {\n                        'acc-info--show': is_dialog_on,\n                        'acc-info--is-virtual': is_virtual,\n                        'acc-info--is-disabled': is_disabled,\n                    })}\n                    onClick={is_disabled ? undefined : () => toggleDialog()}\n                >\n                    <span className='acc-info__id'>\n                        <DesktopWrapper>\n                            <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            {(is_virtual || currency) && (\n                                <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                            )}\n                        </MobileWrapper>\n                    </span>\n                    {(typeof balance !== 'undefined' || !currency) && (\n                        <p\n                            className={classNames('acc-info__balance', {\n                                'acc-info__balance--no-currency': !currency && !is_virtual,\n                            })}\n                        >\n                            {!currency ? (\n                                <Localize i18n_default_text='No currency assigned' />\n                            ) : (\n                                `${balance} ${getCurrencyDisplayCode(currency)}`\n                            )}\n                        </p>\n                    )}\n                    {is_disabled ? (\n                        <Icon icon='IcLock' />\n                    ) : (\n                        <Icon icon='IcChevronDownBold' className='acc-info__select-arrow' />\n                    )}\n                </div>\n            </AccountInfoWrapper>\n            <MobileWrapper>\n                <AccountSwitcherMobile\n                    is_visible={is_dialog_on}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    toggle={toggleDialog}\n                />\n            </MobileWrapper>\n            <DesktopWrapper>\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter: 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit: 'acc-switcher__wrapper--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper'>\n                        <AccountSwitcher is_visible={is_dialog_on} toggle={toggleDialog} />\n                    </div>\n                </CSSTransition>\n            </DesktopWrapper>\n        </div>\n    );\n};\n\nAccountInfo.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.string,\n    currency: PropTypes.string,\n    is_dialog_on: PropTypes.bool,\n    is_disabled: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    loginid: PropTypes.string,\n    toggleDialog: PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}