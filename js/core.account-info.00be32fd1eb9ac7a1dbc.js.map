{"version":3,"sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher-account-list.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-account-wrapper.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-mobile.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["CurrencyDisplay","currency","is_virtual","i18n_default_text","getCurrencyName","AccountDisplay","market_type","sub_account_type","getMT5AccountDisplay","AccountList","balance","currency_icon","display_type","has_balance","is_disabled","loginid","onClickAccount","selected_loginid","currency_badge","id","className","classNames","onClick","undefined","icon","size","getCurrencyDisplayCode","amount","formatMoney","should_format","show_currency","AccountWrapper","children","header","is_visible","toggleVisibility","title","is_expanded","onToggle","is_title_spaced","propTypes","PropTypes","node","oneOfType","object","string","bool","func","AccountSwitcher","props","section","setState","state","setWrapperRef","wrapper_ref","updateAccountTabIndex","index","active_tab_index","handleClickOutside","event","accounts_toggle_btn","target","classList","contains","closeAccountsDialog","handleLogout","is_positions_drawer_on","togglePositionsDrawer","logoutClient","then","routeBackInApp","history","toggleAccountsDialog","redirectToMt5","account_type","push","routes","mt5","openMt5RealAccount","has_required_account","has_malta_account","has_maltainvest_account","is_eu","openAccountNeededModal","standpoint","gaming_company","financial_company","localize","sessionStorage","setItem","redirectToMt5Real","is_logged_in","is_mt5_allowed","window","open","urlFor","legacy","onListEnter","has_autohide","onListLeave","openMt5DemoAccount","redirectToMt5Demo","setAccountCurrency","toggleSetCurrencyModal","showAccountTypesModal","toggleAccountTypesModal","isDemo","account","isReal","getRemainingAccounts","existing_mt5_accounts","gaming_config","getMtConfig","landing_companies","mt_gaming_company","financial_config","mt_financial_company","landing_company","mt5_config","Object","keys","forEach","company","find","type","getMT5AccountKey","getMT5Account","should_show_real_accounts_list","is_demo_deriv_visible","is_demo_dmt5_visible","is_real_deriv_visible","is_real_dmt5_visible","document","addEventListener","this","updateMt5LoginList","toggleShouldShowRealAccountsList","removeEventListener","account_loginid","switchAccount","total_assets_message_demo","total_assets_message_real","total_assets_message","is_real_account_tab","demo_accounts","sorted_account_list","filter","map","key","accounts","doSwitch","bind","is_loading_mt5","speed","demo_mt5","length","login","display_login","remaining_demo_mt5","color","secondary","small","real_accounts","onMouseEnter","onMouseLeave","remaining_real_accounts","getAccountTitle","account_residence","client_residence","openRealAccountSignup","can_upgrade","can_open_multi","has_set_currency","has_fiat","available_crypto_currencies","real_mt5","remaining_real_mt5","mt5_login_list_error","has_any_real_account","is_pending_authentication","ref","active_index","onTabItemClick","top","label","height","max_autoheight_offset","is_mobile","weight","obj_total_balance","total_real_assets","total_demo_assets","line_height","is_uk","has_effect","text","align","account_list","slice","sort","a","b","a_currency","b_currency","a_is_crypto","isCryptocurrency","b_is_crypto","a_is_fiat","b_is_fiat","mt5_login_list","a_is_demo","b_is_demo","sorted_mt5_list","upgradeable_landing_companies","some","can_upgrade_to","vrtc_loginid","vrtc_balance","mt5_demo_total","group","reduce","total","Array","isArray","amount_real","amount_mt5","React","array","can_change_fiat_currency","account_switcher","withRouter","connect","client","common","ui","residence","is_populating_mt5_account_list","logout","AccountSwitcherMobile","disableApp","enableApp","is_upgrade_enabled","toggle","is_open","is_vertical_top","has_close_icon","toggleModal","width","any","onClose","visible","wrapperClassName","AccountInfoWrapper","disabled_message","alignment","message","zIndex","AccountInfoIcon","AccountInfo","acc_switcher_disabled_message","is_dialog_on","toggleDialog","currency_lower","toLowerCase","in","timeout","enter","enterDone","exit","unmountOnExit"],"mappings":"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","file":"js/core.account-info.00be32fd1eb9ac7a1dbc.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Money } from '@deriv/components';\nimport { formatMoney, getCurrencyName, getMT5AccountDisplay, getCurrencyDisplayCode } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\nconst AccountList = ({\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    is_disabled,\n    is_virtual,\n    loginid,\n    market_type,\n    onClickAccount,\n    selected_loginid,\n    sub_account_type,\n}) => {\n    if (is_disabled && !currency) return null;\n    const currency_badge = currency ? currency_icon : 'IcCurrencyUnknown';\n\n    return (\n        <>\n            <div\n                id={`dt_${loginid}`}\n                className={classNames('acc-switcher__account', {\n                    'acc-switcher__account--selected': loginid === selected_loginid,\n                    'acc-switcher__account--disabled': is_disabled,\n                })}\n                onClick={is_disabled ? undefined : onClickAccount}\n            >\n                <span className='acc-switcher__id'>\n                    <Icon\n                        icon={is_virtual ? 'IcCurrencyVirtual' : currency_badge}\n                        className={'acc-switcher__id-icon'}\n                        size={24}\n                    />\n                    <span>\n                        {display_type === 'currency' ? (\n                            <CurrencyDisplay is_virtual={is_virtual} currency={currency} />\n                        ) : (\n                            <AccountDisplay market_type={market_type} sub_account_type={sub_account_type} />\n                        )}\n                        <div className='acc-switcher__loginid-text'>{loginid}</div>\n                    </span>\n                    {has_balance && (\n                        <span className='acc-switcher__balance'>\n                            {currency && (\n                                <Money\n                                    currency={getCurrencyDisplayCode(currency)}\n                                    amount={formatMoney(currency, balance, true)}\n                                    should_format={false}\n                                    show_currency\n                                />\n                            )}\n                        </span>\n                    )}\n                </span>\n            </div>\n        </>\n    );\n};\n\nconst CurrencyDisplay = ({ currency, is_virtual }) => {\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n    if (!currency) {\n        return <Localize i18n_default_text='No currency assigned' />;\n    }\n    return getCurrencyName(currency);\n};\n\nconst AccountDisplay = ({ market_type, sub_account_type }) => (\n    <div>{getMT5AccountDisplay(market_type, sub_account_type)}</div>\n);\n\nexport default AccountList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ContentExpander } from '@deriv/components';\n\nconst AccountWrapper = ({ children, header, is_visible, toggleVisibility }) => (\n    <ContentExpander\n        className='acc-switcher'\n        title={header}\n        is_expanded={is_visible}\n        onToggle={toggleVisibility}\n        is_title_spaced\n    >\n        {children}\n    </ContentExpander>\n);\n\nAccountWrapper.propTypes = {\n    children: PropTypes.node,\n    header: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    is_visible: PropTypes.bool,\n    toggleVisibility: PropTypes.func,\n};\n\nexport default AccountWrapper;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport {\n    Button,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Icon,\n    Money,\n    Tabs,\n    ThemedScrollbars,\n    Text,\n} from '@deriv/components';\nimport {\n    urlFor,\n    routes,\n    isCryptocurrency,\n    formatMoney,\n    getMT5Account,\n    getMT5AccountDisplay,\n    getMT5AccountKey,\n} from '@deriv/shared';\n\nimport { localize, Localize } from '@deriv/translations';\nimport { getAccountTitle } from 'App/Containers/RealAccountSignup/helpers/constants';\nimport { connect } from 'Stores/connect';\nimport { AccountsItemLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport AccountList from './account-switcher-account-list.jsx';\nimport AccountWrapper from './account-switcher-account-wrapper.jsx';\n\nclass AccountSwitcher extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active_tab_index: !props.is_virtual || props.should_show_real_accounts_list ? 0 : 1,\n            is_demo_deriv_visible: true,\n            is_demo_dmt5_visible: true,\n            is_real_deriv_visible: true,\n            is_real_dmt5_visible: true,\n            has_autohide: true,\n        };\n    }\n\n    toggleVisibility = section => {\n        this.setState({ [`is_${section}_visible`]: !this.state[`is_${section}_visible`] });\n    };\n\n    setWrapperRef = node => {\n        this.wrapper_ref = node;\n    };\n\n    updateAccountTabIndex = index => {\n        this.setState({ active_tab_index: index });\n    };\n\n    handleClickOutside = event => {\n        const accounts_toggle_btn = !event.target.classList.contains('acc-info');\n        if (\n            this.wrapper_ref &&\n            !this.wrapper_ref.contains(event.target) &&\n            this.props.is_visible &&\n            accounts_toggle_btn\n        ) {\n            this.closeAccountsDialog();\n        }\n    };\n\n    handleLogout = () => {\n        this.closeAccountsDialog();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        this.props.logoutClient().then(() => {\n            this.props.routeBackInApp(this.props.history);\n        });\n    };\n\n    closeAccountsDialog = () => {\n        this.props.toggleAccountsDialog(false);\n    };\n\n    redirectToMt5 = account_type => {\n        this.closeAccountsDialog();\n        this.props.history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    openMt5RealAccount = account_type => {\n        const has_required_account =\n            account_type === 'synthetic' ? this.props.has_malta_account : this.props.has_maltainvest_account;\n\n        if (this.props.is_eu && !has_required_account) {\n            this.closeAccountsDialog();\n            this.props.openAccountNeededModal(\n                account_type === 'synthetic'\n                    ? this.props.standpoint.gaming_company\n                    : this.props.standpoint.financial_company,\n                account_type === 'synthetic' ? localize('Deriv Synthetic') : localize('Deriv Financial'),\n                account_type === 'synthetic' ? localize('DMT5 Synthetic') : localize('DMT5 Financial')\n            );\n        } else {\n            sessionStorage.setItem('open_mt5_account_type', `real.${account_type}`);\n            this.redirectToMt5Real();\n        }\n    };\n\n    redirectToMt5Real = () => {\n        if (!this.props.is_logged_in || this.props.is_mt5_allowed) {\n            this.redirectToMt5('real');\n        } else {\n            window.open(urlFor('user/metatrader', { legacy: true }));\n        }\n    };\n\n    onListEnter = () => this.setState({ has_autohide: false });\n\n    onListLeave = () => this.setState({ has_autohide: true });\n\n    openMt5DemoAccount = account_type => {\n        sessionStorage.setItem('open_mt5_account_type', `demo.${account_type}`);\n        this.redirectToMt5Demo();\n    };\n\n    redirectToMt5Demo = () => {\n        this.redirectToMt5('demo');\n    };\n\n    setAccountCurrency = () => {\n        this.closeAccountsDialog();\n        this.props.toggleSetCurrencyModal();\n    };\n\n    showAccountTypesModal = () => {\n        this.closeAccountsDialog();\n        this.props.toggleAccountTypesModal(true);\n    };\n\n    isDemo = account => account.account_type === 'demo';\n\n    isReal = account => !this.isDemo(account);\n\n    // * mt5_login_list returns these:\n    // landing_company_short: \"svg\" | \"malta\" | \"maltainvest\" |  \"vanuatu\"  | \"labuan\" | \"bvi\"\n    // account_type: \"real\" | \"demo\"\n    // market_type: \"financial\" | \"gaming\"\n    // sub_account_type: \"financial\" | \"financial_stp\" | \"swap_free\"\n    //\n    // (all market type gaming are synthetic accounts and can only have financial or swap_free sub account)\n    //\n    // * we should map them to landing_company:\n    // mt_financial_company: { financial: {}, financial_stp: {}, swap_free: {} }\n    // mt_gaming_company: { financial: {}, swap_free: {} }\n    getRemainingAccounts = existing_mt5_accounts => {\n        const gaming_config = this.getMtConfig(\n            'gaming',\n            this.props.landing_companies?.mt_gaming_company,\n            existing_mt5_accounts\n        );\n        const financial_config = this.getMtConfig(\n            'financial',\n            this.props.landing_companies?.mt_financial_company,\n            existing_mt5_accounts\n        );\n\n        return [...gaming_config, ...financial_config];\n    };\n\n    getMtConfig = (market_type, landing_company, existing_mt5_accounts) => {\n        const mt5_config = [];\n        if (landing_company) {\n            Object.keys(landing_company).forEach(company => {\n                const has_account = existing_mt5_accounts.find(\n                    account => account.sub_account_type === company && account.market_type === market_type\n                );\n                if (!has_account) {\n                    const type = getMT5AccountKey(market_type, company);\n                    if (type) {\n                        mt5_config.push({\n                            icon: getMT5Account(market_type, company),\n                            title: getMT5AccountDisplay(market_type, company),\n                            type,\n                        });\n                    }\n                }\n            });\n        }\n        return mt5_config;\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n        this.props.updateMt5LoginList();\n    }\n\n    componentWillUnmount() {\n        this.props.toggleShouldShowRealAccountsList(false);\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    async doSwitch(loginid) {\n        this.closeAccountsDialog();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.switchAccount(loginid);\n    }\n\n    get is_real_account_tab() {\n        // Real accounts is always the first tab index based on design\n        return this.state.active_tab_index === 0;\n    }\n\n    get sorted_account_list() {\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        return this.props.account_list.slice().sort((a, b) => {\n            const a_currency = this.props.accounts[a.loginid].currency;\n            const b_currency = this.props.accounts[b.loginid].currency;\n            const a_is_crypto = isCryptocurrency(a_currency);\n            const b_is_crypto = isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n    }\n\n    get sorted_mt5_list() {\n        // for MT5, synthetic, financial, financial stp\n        return this.props.mt5_login_list.slice().sort((a, b) => {\n            const a_is_demo = this.isDemo(a);\n            const b_is_demo = this.isDemo(b);\n\n            if (a_is_demo && !b_is_demo) {\n                return 1;\n            }\n            if (b_is_demo && !a_is_demo) {\n                return -1;\n            }\n            if (a.market_type === 'gaming') {\n                return -1;\n            }\n            if (a.sub_account_type === 'financial') {\n                return b.market_type === 'gaming' ? 1 : -1;\n            }\n            return 1;\n        });\n    }\n\n    get demo_mt5() {\n        return this.sorted_mt5_list.filter(this.isDemo);\n    }\n\n    get remaining_demo_mt5() {\n        return this.getRemainingAccounts(this.demo_mt5);\n    }\n\n    get real_mt5() {\n        return this.sorted_mt5_list.filter(this.isReal);\n    }\n\n    get remaining_real_mt5() {\n        return this.getRemainingAccounts(this.real_mt5);\n    }\n\n    // SVG clients can't upgrade.\n    get remaining_real_accounts() {\n        return this.can_open_multi ? [] : this.props.upgradeable_landing_companies;\n    }\n\n    get has_set_currency() {\n        return this.props.account_list.filter(account => !account.is_virtual).some(account => account.title !== 'Real');\n    }\n\n    get can_upgrade() {\n        return !!(this.props.is_virtual && this.props.can_upgrade_to);\n    }\n\n    get can_open_multi() {\n        if (this.props.is_eu) return false;\n        if (this.props.available_crypto_currencies.length < 1 && !this.props.has_fiat) return true;\n        return !this.props.is_virtual;\n    }\n\n    get total_demo_assets() {\n        const vrtc_loginid = this.props.account_list.find(account => account.is_virtual).loginid;\n        const vrtc_balance = this.props.accounts[vrtc_loginid] ? this.props.accounts[vrtc_loginid].balance : 0;\n        const mt5_demo_total = this.props.mt5_login_list\n            .filter(account => this.isDemo(account.group))\n            .reduce(\n                (total, account) => {\n                    total.balance += account.balance;\n                    return total;\n                },\n                { balance: 0 }\n            );\n        return Array.isArray(this.props.mt5_login_list) ? mt5_demo_total.balance + vrtc_balance : vrtc_balance;\n    }\n\n    get total_real_assets() {\n        return this.props.obj_total_balance.amount_real + this.props.obj_total_balance.amount_mt5;\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n\n        const total_assets_message_demo = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 demo accounts.')\n            : localize('Total assets in your Deriv demo accounts.');\n\n        const total_assets_message_real = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 real accounts.')\n            : localize('Total assets in your Deriv real accounts.');\n\n        const total_assets_message = this.is_real_account_tab ? total_assets_message_real : total_assets_message_demo;\n\n        const demo_accounts = (\n            <div className='acc-switcher__list-wrapper'>\n                <AccountWrapper\n                    header={localize('Deriv Accounts')}\n                    is_visible={this.state.is_demo_deriv_visible}\n                    toggleVisibility={() => {\n                        this.toggleVisibility('demo_deriv');\n                    }}\n                >\n                    <div className='acc-switcher__accounts'>\n                        {this.sorted_account_list\n                            .filter(account => account.is_virtual)\n                            .map(account => (\n                                <AccountList\n                                    key={account.loginid}\n                                    balance={this.props.accounts[account.loginid].balance}\n                                    currency={this.props.accounts[account.loginid].currency}\n                                    currency_icon={`IcCurrency-${account.icon}`}\n                                    display_type={'currency'}\n                                    has_balance={'balance' in this.props.accounts[account.loginid]}\n                                    is_disabled={account.is_disabled}\n                                    is_virtual={account.is_virtual}\n                                    loginid={account.loginid}\n                                    onClickAccount={\n                                        account.is_disabled ? undefined : this.doSwitch.bind(this, account.loginid)\n                                    }\n                                    selected_loginid={this.props.account_loginid}\n                                />\n                            ))}\n                    </div>\n                </AccountWrapper>\n                {this.props.is_mt5_allowed && (\n                    <React.Fragment>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={localize('DMT5 Accounts')}\n                            is_visible={this.state.is_demo_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('demo_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {!!this.demo_mt5.length && (\n                                        <div className='acc-switcher__accounts'>\n                                            {this.demo_mt5.map(account => (\n                                                <AccountList\n                                                    key={account.login}\n                                                    market_type={account.market_type}\n                                                    sub_account_type={account.sub_account_type}\n                                                    balance={account.balance}\n                                                    currency={account.currency}\n                                                    currency_icon={`IcMt5-${getMT5Account(\n                                                        account.market_type,\n                                                        account.sub_account_type\n                                                    )}`}\n                                                    has_balance={'balance' in account}\n                                                    loginid={account.display_login}\n                                                    onClickAccount={this.redirectToMt5Demo}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                    {this.remaining_demo_mt5.map(account => (\n                                        <div key={account.title} className='acc-switcher__new-account'>\n                                            <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                            <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                                {account.title}\n                                            </Text>\n                                            <Button\n                                                onClick={() => this.openMt5DemoAccount(account.type)}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n\n        const real_accounts = (\n            <div className='acc-switcher__list-wrapper' onMouseEnter={this.onListEnter} onMouseLeave={this.onListLeave}>\n                <React.Fragment>\n                    <AccountWrapper\n                        header={localize('Deriv Accounts')}\n                        is_visible={this.state.is_real_deriv_visible}\n                        toggleVisibility={() => {\n                            this.toggleVisibility('real_deriv');\n                        }}\n                    >\n                        <div className='acc-switcher__accounts'>\n                            {this.sorted_account_list\n                                .filter(account => !account.is_virtual)\n                                .map(account => {\n                                    return (\n                                        <AccountList\n                                            key={account.loginid}\n                                            balance={this.props.accounts[account.loginid].balance}\n                                            currency={this.props.accounts[account.loginid].currency}\n                                            currency_icon={`IcCurrency-${account.icon}`}\n                                            display_type={'currency'}\n                                            has_balance={'balance' in this.props.accounts[account.loginid]}\n                                            is_disabled={account.is_disabled}\n                                            is_virtual={account.is_virtual}\n                                            loginid={account.loginid}\n                                            onClickAccount={\n                                                account.is_disabled\n                                                    ? undefined\n                                                    : this.doSwitch.bind(this, account.loginid)\n                                            }\n                                            selected_loginid={this.props.account_loginid}\n                                        />\n                                    );\n                                })}\n                        </div>\n                        {this.remaining_real_accounts.map((account, index) => (\n                            <div key={index} className='acc-switcher__new-account'>\n                                <Icon icon='IcDeriv' size={24} />\n                                <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                    {getAccountTitle(account, {\n                                        account_residence: this.props.client_residence,\n                                    })}\n                                </Text>\n                                <Button\n                                    onClick={() => this.props.openRealAccountSignup(account)}\n                                    className='acc-switcher__new-account-btn'\n                                    secondary\n                                    small\n                                >\n                                    {localize('Add')}\n                                </Button>\n                            </div>\n                        ))}\n                        {!this.can_upgrade && this.can_open_multi && (\n                            <Button\n                                className='acc-switcher__btn'\n                                secondary\n                                onClick={\n                                    this.has_set_currency\n                                        ? () => this.props.openRealAccountSignup('manage')\n                                        : this.setAccountCurrency\n                                }\n                            >\n                                {this.props.has_fiat && this.props.available_crypto_currencies?.length === 0\n                                    ? localize('Manage account')\n                                    : localize('Add or manage account')}\n                            </Button>\n                        )}\n                    </AccountWrapper>\n                </React.Fragment>\n                {this.props.is_mt5_allowed && (\n                    <React.Fragment>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={localize('DMT5 Accounts')}\n                            is_visible={this.state.is_real_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('real_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {!!this.real_mt5.length && (\n                                        <div className='acc-switcher__accounts'>\n                                            {this.real_mt5.map(account => (\n                                                <AccountList\n                                                    key={account.login}\n                                                    market_type={account.market_type}\n                                                    sub_account_type={account.sub_account_type}\n                                                    balance={account.balance}\n                                                    currency={account.currency}\n                                                    currency_icon={`IcMt5-${getMT5Account(\n                                                        account.market_type,\n                                                        account.sub_account_type\n                                                    )}`}\n                                                    has_balance={'balance' in account}\n                                                    loginid={account.display_login}\n                                                    onClickAccount={this.redirectToMt5Real}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                    {this.remaining_real_mt5.map(account => (\n                                        <div\n                                            key={account.title}\n                                            className={classNames('acc-switcher__new-account', {\n                                                'acc-switcher__new-account--disabled': this.props.mt5_login_list_error,\n                                            })}\n                                        >\n                                            <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                            <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                                {account.title}\n                                            </Text>\n                                            <Button\n                                                onClick={() => this.openMt5RealAccount(account.type)}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                                is_disabled={\n                                                    (!this.props.is_eu && !this.props.has_any_real_account) ||\n                                                    (account.type === 'financial_stp' &&\n                                                        this.props.is_pending_authentication) ||\n                                                    !!this.props.mt5_login_list_error\n                                                }\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef}>\n                <Tabs\n                    active_index={this.state.active_tab_index}\n                    className='acc-switcher__list-tabs'\n                    onTabItemClick={this.updateAccountTabIndex}\n                    top\n                >\n                    {/* TODO: De-couple and refactor demo and real accounts groups\n                        into a single reusable AccountListItem component */}\n                    <div label={localize('Real')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars height='354px'>{real_accounts}</ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                                {real_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                    <div label={localize('Demo')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars height='354px'>{demo_accounts}</ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                                {demo_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                </Tabs>\n                <div\n                    className={classNames('acc-switcher__separator', {\n                        'acc-switcher__separator--auto-margin': this.props.is_mobile,\n                    })}\n                />\n                <div className='acc-switcher__total'>\n                    <Text size='xs' weight='bold' color='prominent'>\n                        <Localize i18n_default_text='Total assets' />\n                    </Text>\n                    <Text size='xs' color='prominent' className='acc-switcher__balance'>\n                        <Money\n                            currency={this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD'}\n                            amount={formatMoney(\n                                this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD',\n                                this.is_real_account_tab ? this.total_real_assets : this.total_demo_assets,\n                                true\n                            )}\n                            show_currency\n                            should_format={false}\n                        />\n                    </Text>\n                </div>\n                <Text color='less-prominent' line_height='x' size='xxxs' className='acc-switcher__total-subtitle'>\n                    {total_assets_message}\n                </Text>\n                <div className='acc-switcher__separator' />\n                <div className='acc-switcher__footer'>\n                    {this.props.is_uk && this.props.has_any_real_account && (\n                        <Button\n                            className='acc-switcher__compare'\n                            type='button'\n                            has_effect\n                            onClick={this.showAccountTypesModal}\n                            text={localize('Compare')}\n                            secondary\n                        />\n                    )}\n                    <div id='dt_logout_button' className='acc-switcher__logout' onClick={this.handleLogout}>\n                        <Text color='prominent' size='xs' align='left' className='acc-switcher__logout-text'>\n                            {localize('Log out')}\n                        </Text>\n                        <Icon\n                            icon='IcLogout'\n                            className='acc-switcher__logout-icon drawer__icon'\n                            onClick={this.handleLogout}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    available_crypto_currencies: PropTypes.array,\n    account_list: PropTypes.array,\n    account_loginid: PropTypes.string,\n    accounts: PropTypes.object,\n    can_change_fiat_currency: PropTypes.bool,\n    can_upgrade_to: PropTypes.string,\n    has_fiat: PropTypes.bool,\n    has_any_real_account: PropTypes.bool,\n    is_eu: PropTypes.bool,\n    is_loading_mt5: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_mt5_allowed: PropTypes.bool,\n    is_pending_authentication: PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_uk: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    mt5_login_list: PropTypes.array,\n    obj_total_balance: PropTypes.object,\n    openRealAccountSignup: PropTypes.func,\n    switchAccount: PropTypes.func,\n    toggleAccountsDialog: PropTypes.func,\n    toggleAccountTypesModal: PropTypes.func,\n    togglePositionsDrawer: PropTypes.func,\n    toggleSetCurrencyModal: PropTypes.func,\n    updateMt5LoginList: PropTypes.func,\n};\n\nconst account_switcher = withRouter(\n    connect(({ client, common, ui }) => ({\n        available_crypto_currencies: client.available_crypto_currencies,\n        account_loginid: client.loginid,\n        accounts: client.accounts,\n        can_change_fiat_currency: client.can_change_fiat_currency,\n        account_list: client.account_list,\n        can_upgrade_to: client.can_upgrade_to,\n        client_residence: client.residence,\n        is_eu: client.is_eu,\n        is_loading_mt5: client.is_populating_mt5_account_list,\n        is_logged_in: client.is_logged_in,\n        is_mt5_allowed: client.is_mt5_allowed,\n        is_pending_authentication: client.is_pending_authentication,\n        is_uk: client.is_uk,\n        is_virtual: client.is_virtual,\n        has_fiat: client.has_fiat,\n        has_any_real_account: client.has_any_real_account,\n        mt5_login_list: client.mt5_login_list,\n        mt5_login_list_error: client.mt5_login_list_error,\n        obj_total_balance: client.obj_total_balance,\n        switchAccount: client.switchAccount,\n        has_malta_account: client.has_malta_account,\n        has_maltainvest_account: client.has_maltainvest_account,\n        openAccountNeededModal: ui.openAccountNeededModal,\n        logoutClient: client.logout,\n        landing_companies: client.landing_companies,\n        upgradeable_landing_companies: client.upgradeable_landing_companies,\n        updateMt5LoginList: client.updateMt5LoginList,\n        routeBackInApp: common.routeBackInApp,\n        standpoint: client.standpoint,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        toggleAccountsDialog: ui.toggleAccountsDialog,\n        toggleAccountTypesModal: ui.toggleAccountTypesModal,\n        togglePositionsDrawer: ui.togglePositionsDrawer,\n        toggleSetCurrencyModal: ui.toggleSetCurrencyModal,\n        should_show_real_accounts_list: ui.should_show_real_accounts_list,\n        toggleShouldShowRealAccountsList: ui.toggleShouldShowRealAccountsList,\n    }))(AccountSwitcher)\n);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Div100vhContainer, Modal } from '@deriv/components';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountSwitcherMobile = props => {\n    const { disableApp, enableApp, is_visible, is_upgrade_enabled, toggle } = props;\n    return (\n        <Modal\n            id='dt_account_switcher_modal'\n            className='accounts-switcher'\n            enableApp={enableApp}\n            is_open={is_visible}\n            is_vertical_top\n            disableApp={disableApp}\n            has_close_icon={false}\n            toggleModal={toggle}\n            height='auto'\n            width='calc(100vw - 32px)'\n        >\n            <Div100vhContainer\n                className={classNames('acc-switcher__wrapper', 'acc-switcher__wrapper--is-mobile')}\n                max_autoheight_offset='48px'\n            >\n                <AccountSwitcher is_mobile is_visible={true} toggle={toggle} is_upgrade_enabled={is_upgrade_enabled} />\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nAccountSwitcherMobile.propTypes = {\n    children: PropTypes.any,\n    onClose: PropTypes.func,\n    title: PropTypes.string,\n    visible: PropTypes.bool,\n    wrapperClassName: PropTypes.string,\n};\n\nexport default AccountSwitcherMobile;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, Icon, MobileWrapper, Popover } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { getCurrencyDisplayCode } from '@deriv/shared';\nimport AccountSwitcherMobile from 'App/Containers/AccountSwitcher/account-switcher-mobile.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountInfoWrapper = ({ is_disabled, disabled_message, children }) =>\n    is_disabled && disabled_message ? (\n        <Popover alignment='bottom' message={disabled_message} zIndex={99999}>\n            {children}\n        </Popover>\n    ) : (\n        <React.Fragment>{children}</React.Fragment>\n    );\n\nconst AccountInfoIcon = ({ is_virtual, currency }) => (\n    <Icon\n        icon={`IcCurrency-${is_virtual ? 'virtual' : currency || 'Unknown'}`}\n        className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n        size={24}\n    />\n);\n\nconst AccountInfo = ({\n    acc_switcher_disabled_message,\n    balance,\n    currency,\n    disableApp,\n    enableApp,\n    is_dialog_on,\n    is_virtual,\n    toggleDialog,\n    is_disabled,\n}) => {\n    const currency_lower = currency.toLowerCase();\n    return (\n        <div className='acc-info__wrapper'>\n            <div className='acc-info__separator' />\n            <AccountInfoWrapper is_disabled={is_disabled} disabled_message={acc_switcher_disabled_message}>\n                <div\n                    className={classNames('acc-info', {\n                        'acc-info--show': is_dialog_on,\n                        'acc-info--is-virtual': is_virtual,\n                        'acc-info--is-disabled': is_disabled,\n                    })}\n                    onClick={is_disabled ? undefined : () => toggleDialog()}\n                >\n                    <span className='acc-info__id'>\n                        <DesktopWrapper>\n                            <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            {(is_virtual || currency) && (\n                                <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                            )}\n                        </MobileWrapper>\n                    </span>\n                    {(typeof balance !== 'undefined' || !currency) && (\n                        <p\n                            className={classNames('acc-info__balance', {\n                                'acc-info__balance--no-currency': !currency && !is_virtual,\n                            })}\n                        >\n                            {!currency && <Localize i18n_default_text='No currency assigned' />}\n                            {balance} {getCurrencyDisplayCode(currency)}\n                        </p>\n                    )}\n                    {is_disabled ? (\n                        <Icon icon='IcLock' />\n                    ) : (\n                        <Icon icon='IcChevronDownBold' className='acc-info__select-arrow' />\n                    )}\n                </div>\n            </AccountInfoWrapper>\n            <MobileWrapper>\n                <AccountSwitcherMobile\n                    is_visible={is_dialog_on}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    toggle={toggleDialog}\n                />\n            </MobileWrapper>\n            <DesktopWrapper>\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter: 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit: 'acc-switcher__wrapper--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper'>\n                        <AccountSwitcher is_visible={is_dialog_on} toggle={toggleDialog} />\n                    </div>\n                </CSSTransition>\n            </DesktopWrapper>\n        </div>\n    );\n};\n\nAccountInfo.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.string,\n    currency: PropTypes.string,\n    is_dialog_on: PropTypes.bool,\n    is_disabled: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    loginid: PropTypes.string,\n    toggleDialog: PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}