{"version":3,"sources":["webpack:///./App/Containers/ResetPasswordModal/reset-password-modal.jsx"],"names":["ResetPassword","logoutClient","verification_code","onResetComplete","error_msg","actions","setSubmitting","resetForm","password","console","error","setStatus","reset_complete","then","redirectToLogin","getLanguage","className","initialValues","initialStatus","validate","values","errors","validLength","min","max","validPassword","getErrorMessages","localize","min_number","max_number","onSubmit","api_request","reset_password","new_password","WS","resetPassword","response","message","handleBlur","touched","isSubmitting","handleChange","status","as","weight","i18n_default_text","align","size","input","has_error","custom_feedback_messages","password_warnings","name","label","onChange","onBlur","value","data-lpignore","required","classNames","type","is_disabled","primary","propTypes","PropTypes","func","string","ResetPasswordModal","disableApp","enableApp","is_loading","is_visible","bool","connect","ui","client","is_reset_password_modal_visible","logout"],"mappings":"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","file":"js/core.reset-password-modal.0e9708707b084bdf9503.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Formik, Form } from 'formik';\nimport { Button, Dialog, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport { redirectToLogin, validPassword, validLength, getErrorMessages } from '@deriv/shared';\nimport { getLanguage, localize, Localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { WS } from 'Services/index';\n\nconst ResetPassword = ({ logoutClient, verification_code }) => {\n    const onResetComplete = (error_msg, actions) => {\n        actions.setSubmitting(false);\n        actions.resetForm({ password: '' });\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error_msg) {\n            // eslint-disable-next-line no-console\n            console.error(error_msg);\n            actions.setStatus({ error_msg });\n            return;\n        }\n\n        actions.setStatus({ reset_complete: true });\n\n        logoutClient().then(() => {\n            redirectToLogin(false, getLanguage());\n        });\n    };\n\n    const handleSubmit = (values, actions) => {\n        const api_request = {\n            reset_password: 1,\n            new_password: values.password,\n            verification_code,\n        };\n\n        WS.resetPassword(api_request).then(async response => {\n            if (response.error) {\n                onResetComplete(response.error.message, actions);\n            } else {\n                onResetComplete(null, actions);\n            }\n        });\n    };\n\n    const validateReset = values => {\n        const errors = {};\n\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n\n        return errors;\n    };\n\n    const reset_initial_values = { password: '' };\n  \n    return (\n        <div className='reset-password'>\n            <Formik\n                initialValues={reset_initial_values}\n                initialStatus={{ reset_complete: false, error_msg: '' }}\n                validate={validateReset}\n                onSubmit={handleSubmit}\n            >\n                {({ handleBlur, errors, values, touched, isSubmitting, handleChange, status }) => (\n                    <Form>\n                        <React.Fragment>\n                            {status.reset_complete ? (\n                                <div className='reset-password__password-selection'>\n                                    <Text as='p' weight='bold' className='reset-password__heading'>\n                                        <Localize i18n_default_text='Your password has been changed' />\n                                    </Text>\n                                    <Text align='center' as='p' size='xxs' className='reset-password__subtext'>\n                                        <Localize i18n_default_text='We will now redirect you to the login page.' />\n                                    </Text>\n                                </div>\n                            ) : (\n                                <div className='reset-password__password-selection'>\n                                    <Text as='p' weight='bold' className='reset-password__heading'>\n                                        <Localize i18n_default_text='Choose a new password' />\n                                    </Text>\n                                    <fieldset className='reset-password__fieldset'>\n                                        <PasswordMeter\n                                            input={values.password}\n                                            has_error={!!(touched.password && errors.password)}\n                                            custom_feedback_messages={getErrorMessages().password_warnings}\n                                        >\n                                            <PasswordInput\n                                                className='reset-password__password-field'\n                                                name='password'\n                                                label={localize('Create a password')}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                error={touched.password && errors.password}\n                                                value={values.password}\n                                                data-lpignore='true'\n                                                required\n                                            />\n                                        </PasswordMeter>\n                                    </fieldset>\n                                    <Text align='center' as='p' size='xxs' className='reset-password__subtext'>\n                                        {status.error_msg ? (\n                                            <Localize\n                                                i18n_default_text='{{error_msg}}'\n                                                values={{ error_msg: status.error_msg }}\n                                            />\n                                        ) : (\n                                            <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                        )}\n                                    </Text>\n\n                                    <Button\n                                        className={classNames('reset-password__btn', {\n                                            'reset-password__btn--disabled':\n                                                !values.password || errors.password || isSubmitting,\n                                        })}\n                                        type='submit'\n                                        is_disabled={!values.password || !!errors.password || isSubmitting}\n                                        primary\n                                    >\n                                        <Localize i18n_default_text='Reset my password' />\n                                    </Button>\n                                </div>\n                            )}\n                        </React.Fragment>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nResetPassword.propTypes = {\n    logoutClient: PropTypes.func,\n    verification_code: PropTypes.string,\n};\n\nconst ResetPasswordModal = ({ disableApp, enableApp, is_loading, is_visible, logoutClient, verification_code }) => {\n    return (\n        <Dialog is_visible={is_visible} disableApp={disableApp} enableApp={enableApp} is_loading={is_loading}>\n            <ResetPassword verification_code={verification_code} logoutClient={logoutClient} />\n        </Dialog>\n    );\n};\n\nResetPasswordModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    verification_code: PropTypes.string,\n};\n\nexport default connect(({ ui, client }) => ({\n    disableApp: ui.disableApp,\n    enableApp: ui.enableApp,\n    is_loading: ui.is_loading,\n    is_visible: ui.is_reset_password_modal_visible,\n    logoutClient: client.logout,\n    verification_code: client.verification_code.reset_password,\n}))(ResetPasswordModal);\n"],"sourceRoot":""}