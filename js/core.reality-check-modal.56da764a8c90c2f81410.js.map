{"version":3,"sources":["webpack:///./App/Containers/RealityCheckModal/brief-modal.jsx","webpack:///./App/Containers/RealityCheckModal/summary-modal.jsx","webpack:///./App/Containers/RealityCheckModal/reality-check-modal.jsx"],"names":["BriefModal","disableApp","enableApp","IntervalField","is_visible","logout","onSubmit","openStatement","validateForm","className","is_open","has_close_icon","title","localize","width","initialValues","interval","validate","errors","isSubmitting","isValid","values","touched","handleChange","handleBlur","noValidate","Body","i18n_default_text","components","key","onClick","Footer","has_separator","has_cancel","cancel_label","is_disabled","label","onCancel","propTypes","PropTypes","func","bool","Row","value","RowInfo","SummaryModal","openPositions","reality_check_duration","server_time","React","computed_values","setComputedValues","before_req","performance","now","WS","realityCheck","then","response","reality_check","time_taken","current_time","add","current_date_time_gmt","toGMTFormat","duration_string","getSessionDuration","start_time","unix","profit","sell_amount","buy_amount","start_date_time_gmt","turnover","session_duration","getDiffDuration","num_day","get","num_hour","num_minute","isEmptyObject","date_time","isMobile","height","autoHide","is_bypassed","max_autoheight_offset","loginid","currency","amount","buy_count","sell_count","potential_profit","type","secondary","large","open_contract_count","number","object","name","field","data-lpignore","onChange","onBlur","hint","required","error","autoComplete","maxLength","RealityCheckModal","logoutClient","reality_check_dismissed","setRealityCheckDuration","setReportsTabIndex","setVisibilityRealityCheck","history","useHistory","push","routes","statement","validNumber","min","max","getPreBuildDVRs","message","positions","connect","client","common","ui","is_reality_check_visible"],"mappings":"6OAMMA,EAAa,SAAC,GASd,IARFC,EAQE,EARFA,WACAC,EAOE,EAPFA,UACAC,EAME,EANFA,cACAC,EAKE,EALFA,WACAC,EAIE,EAJFA,OACAC,EAGE,EAHFA,SACAC,EAEE,EAFFA,cACAC,EACE,EADFA,aAEA,OACI,gBAAC,QAAD,CACIC,UAAU,gBACVP,UAAWA,EACXQ,QAASN,EACTH,WAAYA,EACZU,gBAAgB,EAChBC,MAAOC,mBAAS,6BAChBC,MAAM,SAEN,gBAAC,IAAD,CACIC,cAAe,CACXC,SAAU,IAEdC,SAAUT,EACVF,SAAUA,IAET,gBAAGY,EAAH,EAAGA,OAAQC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,QAASC,EAAlC,EAAkCA,OAAQC,EAA1C,EAA0CA,QAASC,EAAnD,EAAmDA,aAAcC,EAAjE,EAAiEA,WAAjE,OACG,gBAAC,IAAD,CAAMC,YAAU,GACZ,gBAAC,QAAMC,KAAP,KACI,qBAAGjB,UAAU,wDACT,gBAAC,WAAD,CAAUkB,kBAAkB,gPAEhC,qBAAGlB,UAAU,wDACT,gBAAC,WAAD,CACIkB,kBAAkB,mEAClBC,WAAY,CAAC,qBAAGC,IAAK,EAAGpB,UAAU,OAAOqB,QAASvB,QAI1D,uBAAKE,UAAU,6DAEf,qBAAGA,UAAU,mDACT,gBAAC,WAAD,CAAUkB,kBAAkB,sEAGhC,gBAACxB,EAAD,CACIkB,OAAQA,EACRC,QAASA,EACTJ,OAAQA,EACRK,aAAcA,EACdC,WAAYA,KAGpB,gBAAC,QAAMO,OAAP,CAAcC,eAAa,GACvB,gBAAC,mBAAD,CACIvB,UAAU,wBACVwB,YAAU,EACVC,aAAcrB,mBAAS,WACvBsB,aAAcd,EAAOL,WAAaI,GAAWD,EAC7CiB,MAAOvB,mBAAS,oBAChBwB,SAAUhC,WAU1CL,EAAWsC,UAAY,CACnBrC,WAAYsC,IAAUC,KACtBtC,UAAWqC,IAAUC,KACrBrC,cAAeoC,IAAUC,KACzBpC,WAAYmC,IAAUE,KACtBpC,OAAQkC,IAAUC,KAClBlC,SAAUiC,IAAUC,KACpBjC,cAAegC,IAAUC,KACzBhC,aAAc+B,IAAUC,MAGbxC,Q,qyCCtEf,IAAM0C,EAAM,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAOO,EAAV,EAAUA,MAAV,OACR,uBAAKlC,UAAU,sBACX,4BAAO2B,GACP,8BAASO,KAIXC,EAAU,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAOO,EAAV,EAAUA,MAAV,OACZ,qBAAGlC,UAAU,uBACT,4BAAO2B,GACP,2BACA,8BAASO,KAIXE,EAAe,SAAC,GAYhB,IAXF5C,EAWE,EAXFA,WACAC,EAUE,EAVFA,UACAC,EASE,EATFA,cACAC,EAQE,EARFA,WACAC,EAOE,EAPFA,OACAC,EAME,EANFA,SACAwC,EAKE,EALFA,cACAvC,EAIE,EAJFA,cACAwC,EAGE,EAHFA,uBACAC,EAEE,EAFFA,YACAxC,EACE,EADFA,aACE,IAC2CyC,WAAe,IAD1D,GACKC,EADL,KACsBC,EADtB,KAGFF,aAAgB,WACZ,IAAMG,EAAaC,YAAYC,MAE/BC,IAAGC,eAAeC,MAAK,SAAAC,GACnB,IAAMC,EAAgBD,EAASC,cAC/B,GAAKA,EAAL,CAEA,IACMC,EADYP,YAAYC,MACCF,EACzBS,EAAeb,EAAYc,IAAIF,EAAY,gBAEjDT,E,+VAAkB,CAAD,CACbY,sBAAuBC,sBAAYH,GACnCI,gBAAiBC,EAAmBP,EAAcQ,WAAYN,EAAaO,QAC3EC,OAAQV,EAAcW,YAAcX,EAAcY,WAClDC,oBAAqBR,sBAAwC,KAA3BL,EAAcQ,YAChDM,SAAUd,EAAcW,YAAcX,EAAcY,YACjDZ,UAGZ,IAEH,IAAMO,EAAqB,SAACC,EAAYN,GACpC,IAAMa,EAAmBC,0BAAgBR,EAAYN,GAErD,OAAOhD,mBAAS,6DAA8D,CAC1E+D,QAASF,EAAiBG,IAAI,QAC9BC,SAAUJ,EAAiBG,IAAI,SAC/BE,WAAYL,EAAiBG,IAAI,cAIzC,OAAIG,wBAAc9B,GACP,gBAAC,UAAD,MAIP,gBAAC,QAAD,CACIzC,UAAU,gBACVP,UAAWA,EACXQ,QAASN,EACTH,WAAYA,EACZU,gBAAgB,EAChBC,MACI,gBAAC,WAAD,KACI,gBAAC,iBAAD,KACI,gBAAC,WAAD,CACIe,kBAAkB,+CAClBN,OAAQ,CAAE4D,UAAW/B,EAAgBsB,wBAG7C,gBAAC,gBAAD,KACI,gBAAC,WAAD,CAAU7C,kBAAkB,mCAC5B,2BACCuB,EAAgBsB,sBAI7B1D,MAAOoE,qBAAa,QAAU,SAE9B,gBAAC,IAAD,CACInE,cAAe,CACXC,SAAU+B,GAEd9B,SAAUT,EACVF,SAAUA,IAET,gBAAGY,EAAH,EAAGA,OAAQC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,QAASC,EAAlC,EAAkCA,OAAQC,EAA1C,EAA0CA,QAASC,EAAnD,EAAmDA,aAAcC,EAAjE,EAAiEA,WAAjE,OACG,gBAAC,IAAD,CAAMC,YAAU,GACZ,gBAAC,QAAMC,KAAP,KACI,gBAAC,mBAAD,CAAkByD,OAAO,OAAOC,UAAU,EAAOC,YAAaH,sBAC1D,gBAAC,oBAAD,CACIzE,UAAU,gCACV6E,sBAAsB,SAEtB,uBAAK7E,UAAU,yBACX,2BACI,gBAAC,EAAD,CAAK2B,MAAOvB,mBAAS,YAAa8B,MAAOO,EAAgBqC,UACzD,gBAAC,EAAD,CAAKnD,MAAOvB,mBAAS,YAAa8B,MAAOO,EAAgBsC,WACzD,gBAAC,EAAD,CACIpD,MAAOvB,mBAAS,YAChB8B,MACI,gBAAC,QAAD,CACI8C,OAAQvC,EAAgBuB,SACxBe,SAAUtC,EAAgBsC,aAItC,gBAAC,EAAD,CACIpD,MAAOvB,mBAAS,eAChB8B,MACI,gBAAC,WAAD,OACOO,EAAgBmB,SACdnB,EAAgBmB,OAAS,EAAI,IAAM,KACxC,gBAAC,QAAD,CACIoB,OAAQvC,EAAgBmB,OACxBmB,SAAUtC,EAAgBsC,cAK1C,gBAAC,EAAD,CACIpD,MAAOvB,mBAAS,mBAChB8B,MAAOO,EAAgBwC,YAE3B,gBAAC,EAAD,CAAKtD,MAAOvB,mBAAS,iBAAkB8B,MAAOO,EAAgByC,aAC9D,gBAAC,EAAD,CACIvD,MAAOvB,mBAAS,oBAChB8B,MACI,gBAAC,QAAD,CACI8C,OAAQvC,EAAgB0C,iBACxBJ,SAAUtC,EAAgBsC,cAK1C,gBAAC,SAAD,CACIK,KAAK,SACLC,WAAS,EACTC,OAAK,EACLjE,QACIoB,EAAgB8C,oBAAsBlD,EAAgBvC,EAE1DE,UAAU,2DAETI,mBAAS,mBAIlB,gBAAC,gBAAD,KACI,uBAAKJ,UAAU,8BAGnB,uBAAKA,UAAU,yBACX,gBAAC,EAAD,CACI2B,MAAOvB,mBAAS,qBAChB8B,MAAOO,EAAgBe,kBAE3B,gBAAC,EAAD,CACI7B,MAAOvB,mBAAS,eAChB8B,MAAOO,EAAgBsB,sBAE3B,gBAAC,EAAD,CACIpC,MAAOvB,mBAAS,iBAChB8B,MAAOO,EAAgBa,wBAG3B,gBAAC,iBAAD,KACI,uBAAKtD,UAAU,8BAGnB,qBAAGA,UAAU,mDACT,gBAAC,WAAD,CAAUkB,kBAAkB,uDAGhC,gBAACxB,EAAD,CACIkB,OAAQA,EACRC,QAASA,EACTJ,OAAQA,EACRK,aAAcA,EACdC,WAAYA,QAMhC,gBAAC,QAAMO,OAAP,CAAcC,eAAa,GACvB,gBAAC,mBAAD,CACIvB,UAAU,wBACVwB,YAAU,EACVC,aAAcrB,mBAAS,WACvBsB,aAAcd,EAAOL,WAAaI,GAAWD,EAC7CiB,MAAOvB,mBAAS,oBAChBwB,SAAUhC,WAU1CwC,EAAaP,UAAY,CACrBrC,WAAYsC,IAAUC,KACtBtC,UAAWqC,IAAUC,KACrBrC,cAAeoC,IAAUC,KACzBpC,WAAYmC,IAAUE,KACtBpC,OAAQkC,IAAUC,KAClBlC,SAAUiC,IAAUC,KACpBM,cAAeP,IAAUC,KACzBjC,cAAegC,IAAUC,KACzBO,uBAAwBR,IAAU0D,OAClCjD,YAAaT,IAAU2D,OACvB1F,aAAc+B,IAAUC,MAGbK,Q,+MCzOf,IAAM1C,EAAgB,SAAC,GAAD,IAAGkB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASJ,EAApB,EAAoBA,OAAQK,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAA1C,OAClB,uBAAKf,UAAU,2BACX,gBAAC,IAAD,CAAO0F,KAAK,aACP,gBAAGC,EAAH,EAAGA,MAAH,OACG,gBAAC,QAAD,KACQA,EADR,CAEIC,gBAAc,OACdR,KAAK,OACLzD,MAAOvB,mBAAS,iBAChB8B,MAAOtB,EAAOL,SACdsF,SAAU/E,EACVgF,OAAQ/E,EACRgF,KAAM3F,mBAAS,4CACf4F,UAAQ,EACRC,MAAOpF,EAAQN,UAAYE,EAAOF,SAClC2F,aAAa,MACbC,UAAU,YAOxBC,EAAoB,SAAC,GAWrB,IAVF5G,EAUE,EAVFA,WACAC,EASE,EATFA,UACA4G,EAQE,EARFA,aACA1G,EAOE,EAPFA,WACA2G,EAME,EANFA,wBACAhE,EAKE,EALFA,uBACAC,EAIE,EAJFA,YACAgE,EAGE,EAHFA,wBACAC,EAEE,EAFFA,mBACAC,EACE,EADFA,0BAEMC,EAAUC,uBASV7G,EAAgB,WAElB0G,EAAmB,GACnBE,EAAQE,KAAKC,SAAOC,WACpBL,EAA0B,IAGxB1G,EAAe,SAAAa,GACjB,IAAMqF,EAAQ,GAQd,OANKrF,EAAOL,SAEAwG,YAAYnG,EAAOL,SAAU,CAAE6E,KAAM,SAAU4B,IAAK,GAAIC,IAAK,OACrEhB,EAAM1F,SAAW2G,cAAkB1B,OAAO2B,SAF1ClB,EAAM1F,SAAWH,mBAAS,2BAKvB6F,GAGLpG,EAAW,SAAAe,GACb6F,EAA0B,GAC1BF,EAAwB3F,EAAOL,WAMnC,OAAK+F,GAA2BhE,EAExB,gBAAC,EAAD,CACI9C,WAAYA,EACZC,UAAWA,EACXE,WAAYA,EACZ0C,cAxCU,WAElBmE,EAAmB,GACnBE,EAAQE,KAAKC,SAAOO,WACpBX,EAA0B,IAqClB3G,cAAeA,EACfC,aAAcA,EACdF,SAAUA,EACVD,OAAQyG,EACR/D,uBAAwBA,EACxBC,YAAaA,EACb7C,cAAeA,IAMvB,gBAAC,EAAD,CACIF,WAAYA,EACZC,UAAWA,EACXE,WAAYA,EACZG,cAAeA,EACfC,aAAcA,EACdF,SAAUA,EACVD,OAAQyG,EACR3G,cAAeA,KAK3B0G,EAAkBvE,UAAY,CAC1BrC,WAAYsC,IAAUC,KACtBtC,UAAWqC,IAAUC,KACrB2E,QAAS5E,IAAU2D,OACnBY,aAAcvE,IAAUC,KACxBpC,WAAYmC,IAAUE,KACtBsE,wBAAyBxE,IAAUE,KACnCM,uBAAwBR,IAAU0D,OAClCe,wBAAyBzE,IAAUC,KACnCyE,mBAAoB1E,IAAUC,KAC9B0E,0BAA2B3E,IAAUC,MAG1BsF,mBAAQ,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,GAAnB,MAA6B,CAChDnB,aAAciB,EAAO1H,OACrBD,WAAY2H,EAAOG,yBACnBnB,wBAAyBgB,EAAOhB,wBAChChE,uBAAwBgF,EAAOhF,uBAC/BiE,wBAAyBe,EAAOf,wBAChCE,0BAA2Ba,EAAOb,0BAClClE,YAAagF,EAAOhF,YACpB9C,UAAW+H,EAAG/H,UACdD,WAAYgI,EAAGhI,WACfgH,mBAAoBgB,EAAGhB,sBAVZa,CAWXjB","file":"js/core.reality-check-modal.56da764a8c90c2f81410.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport { Modal, FormSubmitButton } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\n\nconst BriefModal = ({\n    disableApp,\n    enableApp,\n    IntervalField,\n    is_visible,\n    logout,\n    onSubmit,\n    openStatement,\n    validateForm,\n}) => {\n    return (\n        <Modal\n            className='reality-check'\n            enableApp={enableApp}\n            is_open={is_visible}\n            disableApp={disableApp}\n            has_close_icon={false}\n            title={localize('Trading statistics report')}\n            width='720px'\n        >\n            <Formik\n                initialValues={{\n                    interval: '',\n                }}\n                validate={validateForm}\n                onSubmit={onSubmit}\n            >\n                {({ errors, isSubmitting, isValid, values, touched, handleChange, handleBlur }) => (\n                    <Form noValidate>\n                        <Modal.Body>\n                            <p className='reality-check__text reality-check__text--description'>\n                                <Localize i18n_default_text='Options trading can become a real addiction, as can any other activity pushed to its limits. To avoid the danger of such an addiction, we provide a reality-check that gives you a summary of your trades and accounts on a regular basis.' />\n                            </p>\n                            <p className='reality-check__text reality-check__text--description'>\n                                <Localize\n                                    i18n_default_text='Would like to check your statement first? <0>Check Statement</0>'\n                                    components={[<a key={0} className='link' onClick={openStatement} />]}\n                                />\n                            </p>\n\n                            <div className='reality-check__separator reality-check__separator--large' />\n\n                            <p className='reality-check__text reality-check__text--center'>\n                                <Localize i18n_default_text='Please specify your preferred interval reality check in minutes:' />\n                            </p>\n\n                            <IntervalField\n                                values={values}\n                                touched={touched}\n                                errors={errors}\n                                handleChange={handleChange}\n                                handleBlur={handleBlur}\n                            />\n                        </Modal.Body>\n                        <Modal.Footer has_separator>\n                            <FormSubmitButton\n                                className='reality-check__submit'\n                                has_cancel\n                                cancel_label={localize('Log out')}\n                                is_disabled={!values.interval || !isValid || isSubmitting}\n                                label={localize('Continue trading')}\n                                onCancel={logout}\n                            />\n                        </Modal.Footer>\n                    </Form>\n                )}\n            </Formik>\n        </Modal>\n    );\n};\n\nBriefModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    IntervalField: PropTypes.func,\n    is_visible: PropTypes.bool,\n    logout: PropTypes.func,\n    onSubmit: PropTypes.func,\n    openStatement: PropTypes.func,\n    validateForm: PropTypes.func,\n};\n\nexport default BriefModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport {\n    Modal,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Loading,\n    ThemedScrollbars,\n    Money,\n    Button,\n    FormSubmitButton,\n} from '@deriv/components';\nimport { isEmptyObject, getDiffDuration, toGMTFormat, isMobile } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { WS } from 'Services';\n\nconst Row = ({ label, value }) => (\n    <div className='reality-check__row'>\n        <span>{label}</span>\n        <strong>{value}</strong>\n    </div>\n);\n\nconst RowInfo = ({ label, value }) => (\n    <p className='reality-check__text'>\n        <span>{label}</span>\n        <br />\n        <strong>{value}</strong>\n    </p>\n);\n\nconst SummaryModal = ({\n    disableApp,\n    enableApp,\n    IntervalField,\n    is_visible,\n    logout,\n    onSubmit,\n    openPositions,\n    openStatement,\n    reality_check_duration,\n    server_time,\n    validateForm,\n}) => {\n    const [computed_values, setComputedValues] = React.useState({});\n\n    React.useEffect(() => {\n        const before_req = performance.now();\n\n        WS.realityCheck().then(response => {\n            const reality_check = response.reality_check;\n            if (!reality_check) return;\n\n            const after_req = performance.now();\n            const time_taken = after_req - before_req;\n            const current_time = server_time.add(time_taken, 'milliseconds');\n\n            setComputedValues({\n                current_date_time_gmt: toGMTFormat(current_time),\n                duration_string: getSessionDuration(reality_check.start_time, current_time.unix()),\n                profit: reality_check.sell_amount - reality_check.buy_amount,\n                start_date_time_gmt: toGMTFormat(+reality_check.start_time * 1000),\n                turnover: reality_check.sell_amount + reality_check.buy_amount,\n                ...reality_check,\n            });\n        });\n    }, []);\n\n    const getSessionDuration = (start_time, current_time) => {\n        const session_duration = getDiffDuration(start_time, current_time);\n\n        return localize('{{num_day}} days {{num_hour}} hours {{num_minute}} minutes', {\n            num_day: session_duration.get('days'),\n            num_hour: session_duration.get('hours'),\n            num_minute: session_duration.get('minutes'),\n        });\n    };\n\n    if (isEmptyObject(computed_values)) {\n        return <Loading />;\n    }\n\n    return (\n        <Modal\n            className='reality-check'\n            enableApp={enableApp}\n            is_open={is_visible}\n            disableApp={disableApp}\n            has_close_icon={false}\n            title={\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Localize\n                            i18n_default_text='Your trading statistics since: {{date_time}}'\n                            values={{ date_time: computed_values.start_date_time_gmt }}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <Localize i18n_default_text='Your trading statistics since:' />\n                        <br />\n                        {computed_values.start_date_time_gmt}\n                    </MobileWrapper>\n                </React.Fragment>\n            }\n            width={isMobile() ? '304px' : '720px'}\n        >\n            <Formik\n                initialValues={{\n                    interval: reality_check_duration,\n                }}\n                validate={validateForm}\n                onSubmit={onSubmit}\n            >\n                {({ errors, isSubmitting, isValid, values, touched, handleChange, handleBlur }) => (\n                    <Form noValidate>\n                        <Modal.Body>\n                            <ThemedScrollbars height='75vh' autoHide={false} is_bypassed={isMobile()}>\n                                <Div100vhContainer\n                                    className='reality-check__column-wrapper'\n                                    max_autoheight_offset='204px'\n                                >\n                                    <div className='reality-check__column'>\n                                        <div>\n                                            <Row label={localize('Login ID')} value={computed_values.loginid} />\n                                            <Row label={localize('Currency')} value={computed_values.currency} />\n                                            <Row\n                                                label={localize('Turnover')}\n                                                value={\n                                                    <Money\n                                                        amount={computed_values.turnover}\n                                                        currency={computed_values.currency}\n                                                    />\n                                                }\n                                            />\n                                            <Row\n                                                label={localize('Profit/loss')}\n                                                value={\n                                                    <React.Fragment>\n                                                        {!!computed_values.profit &&\n                                                            (computed_values.profit < 0 ? '-' : '+')}\n                                                        <Money\n                                                            amount={computed_values.profit}\n                                                            currency={computed_values.currency}\n                                                        />\n                                                    </React.Fragment>\n                                                }\n                                            />\n                                            <Row\n                                                label={localize('Contract bought')}\n                                                value={computed_values.buy_count}\n                                            />\n                                            <Row label={localize('Contract sold')} value={computed_values.sell_count} />\n                                            <Row\n                                                label={localize('Potential profit')}\n                                                value={\n                                                    <Money\n                                                        amount={computed_values.potential_profit}\n                                                        currency={computed_values.currency}\n                                                    />\n                                                }\n                                            />\n                                        </div>\n                                        <Button\n                                            type='button'\n                                            secondary\n                                            large\n                                            onClick={\n                                                computed_values.open_contract_count ? openPositions : openStatement\n                                            }\n                                            className='reality-check__button reality-check__button--full-width'\n                                        >\n                                            {localize('Go to Reports')}\n                                        </Button>\n                                    </div>\n\n                                    <MobileWrapper>\n                                        <div className='reality-check__separator' />\n                                    </MobileWrapper>\n\n                                    <div className='reality-check__column'>\n                                        <RowInfo\n                                            label={localize('Session duration:')}\n                                            value={computed_values.duration_string}\n                                        />\n                                        <RowInfo\n                                            label={localize('Login time:')}\n                                            value={computed_values.start_date_time_gmt}\n                                        />\n                                        <RowInfo\n                                            label={localize('Current time:')}\n                                            value={computed_values.current_date_time_gmt}\n                                        />\n\n                                        <DesktopWrapper>\n                                            <div className='reality-check__separator' />\n                                        </DesktopWrapper>\n\n                                        <p className='reality-check__text reality-check__text--center'>\n                                            <Localize i18n_default_text='Your preferred time interval between each report:' />\n                                        </p>\n\n                                        <IntervalField\n                                            values={values}\n                                            touched={touched}\n                                            errors={errors}\n                                            handleChange={handleChange}\n                                            handleBlur={handleBlur}\n                                        />\n                                    </div>\n                                </Div100vhContainer>\n                            </ThemedScrollbars>\n                        </Modal.Body>\n                        <Modal.Footer has_separator>\n                            <FormSubmitButton\n                                className='reality-check__submit'\n                                has_cancel\n                                cancel_label={localize('Log out')}\n                                is_disabled={!values.interval || !isValid || isSubmitting}\n                                label={localize('Continue trading')}\n                                onCancel={logout}\n                            />\n                        </Modal.Footer>\n                    </Form>\n                )}\n            </Formik>\n        </Modal>\n    );\n};\n\nSummaryModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    IntervalField: PropTypes.func,\n    is_visible: PropTypes.bool,\n    logout: PropTypes.func,\n    onSubmit: PropTypes.func,\n    openPositions: PropTypes.func,\n    openStatement: PropTypes.func,\n    reality_check_duration: PropTypes.number,\n    server_time: PropTypes.object,\n    validateForm: PropTypes.func,\n};\n\nexport default SummaryModal;\n","import { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Input } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { getPreBuildDVRs, validNumber } from 'Utils/Validator/declarative-validation-rules';\nimport BriefModal from './brief-modal.jsx';\nimport SummaryModal from './summary-modal.jsx';\n\nconst IntervalField = ({ values, touched, errors, handleChange, handleBlur }) => (\n    <div className='reality-check__fieldset'>\n        <Field name='interval'>\n            {({ field }) => (\n                <Input\n                    {...field}\n                    data-lpignore='true'\n                    type='text'\n                    label={localize('Time interval')}\n                    value={values.interval}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    hint={localize('Interval should be between 10-60 minutes')}\n                    required\n                    error={touched.interval && errors.interval}\n                    autoComplete='off'\n                    maxLength='2'\n                />\n            )}\n        </Field>\n    </div>\n);\n\nconst RealityCheckModal = ({\n    disableApp,\n    enableApp,\n    logoutClient,\n    is_visible,\n    reality_check_dismissed,\n    reality_check_duration,\n    server_time,\n    setRealityCheckDuration,\n    setReportsTabIndex,\n    setVisibilityRealityCheck,\n}) => {\n    const history = useHistory();\n\n    const openPositions = () => {\n        // index of open positions in reports' side menu is 0\n        setReportsTabIndex(0);\n        history.push(routes.positions);\n        setVisibilityRealityCheck(0);\n    };\n\n    const openStatement = () => {\n        // index of statement in reports' side menu is 2\n        setReportsTabIndex(2);\n        history.push(routes.statement);\n        setVisibilityRealityCheck(0);\n    };\n\n    const validateForm = values => {\n        const error = {};\n\n        if (!values.interval) {\n            error.interval = localize('This field is required.');\n        } else if (!validNumber(values.interval, { type: 'number', min: 10, max: 60 })) {\n            error.interval = getPreBuildDVRs().number.message;\n        }\n\n        return error;\n    };\n\n    const onSubmit = values => {\n        setVisibilityRealityCheck(0);\n        setRealityCheckDuration(values.interval);\n    };\n\n    // if user has seen the brief once and set\n    // the initial reality check interval\n    // we can show the summary from now on\n    if (!reality_check_dismissed && reality_check_duration) {\n        return (\n            <SummaryModal\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_visible={is_visible}\n                openPositions={openPositions}\n                openStatement={openStatement}\n                validateForm={validateForm}\n                onSubmit={onSubmit}\n                logout={logoutClient}\n                reality_check_duration={reality_check_duration}\n                server_time={server_time}\n                IntervalField={IntervalField}\n            />\n        );\n    }\n\n    return (\n        <BriefModal\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_visible={is_visible}\n            openStatement={openStatement}\n            validateForm={validateForm}\n            onSubmit={onSubmit}\n            logout={logoutClient}\n            IntervalField={IntervalField}\n        />\n    );\n};\n\nRealityCheckModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    history: PropTypes.object,\n    logoutClient: PropTypes.func,\n    is_visible: PropTypes.bool,\n    reality_check_dismissed: PropTypes.bool,\n    reality_check_duration: PropTypes.number,\n    setRealityCheckDuration: PropTypes.func,\n    setReportsTabIndex: PropTypes.func,\n    setVisibilityRealityCheck: PropTypes.func,\n};\n\nexport default connect(({ client, common, ui }) => ({\n    logoutClient: client.logout,\n    is_visible: client.is_reality_check_visible,\n    reality_check_dismissed: client.reality_check_dismissed,\n    reality_check_duration: client.reality_check_duration,\n    setRealityCheckDuration: client.setRealityCheckDuration,\n    setVisibilityRealityCheck: client.setVisibilityRealityCheck,\n    server_time: common.server_time,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    setReportsTabIndex: ui.setReportsTabIndex,\n}))(RealityCheckModal);\n"],"sourceRoot":""}