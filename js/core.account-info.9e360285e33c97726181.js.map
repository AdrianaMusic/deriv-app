{"version":3,"sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher-account-list.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-account-wrapper.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-mobile.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["CurrencyDisplay","currency","is_virtual","i18n_default_text","getCurrencyName","AccountDisplay","market_type","sub_account_type","getMT5AccountDisplay","AccountList","balance","currency_icon","display_type","has_balance","has_reset_balance","is_disabled","loginid","onClickAccount","onClickResetVirtualBalance","selected_loginid","currency_badge","id","className","classNames","onClick","undefined","icon","size","e","stopPropagation","secondary","small","localize","color","getCurrencyDisplayCode","amount","formatMoney","should_format","show_currency","AccountWrapper","children","header","is_visible","toggleVisibility","title","is_expanded","onToggle","is_title_spaced","propTypes","PropTypes","node","oneOfType","object","string","bool","func","AccountSwitcher","props","section","setState","state","setWrapperRef","wrapper_ref","updateAccountTabIndex","index","active_tab_index","handleClickOutside","event","accounts_toggle_btn","target","classList","contains","closeAccountsDialog","handleLogout","is_positions_drawer_on","togglePositionsDrawer","logoutClient","then","routeBackInApp","history","toggleAccountsDialog","redirectToMt5","account_type","push","routes","mt5","openMt5RealAccount","has_required_account","has_malta_account","has_maltainvest_account","is_eu","openAccountNeededModal","standpoint","gaming_company","financial_company","sessionStorage","setItem","redirectToMt5Real","is_logged_in","is_mt5_allowed","window","open","urlFor","legacy","onListEnter","has_autohide","onListLeave","openMt5DemoAccount","redirectToMt5Demo","setAccountCurrency","toggleSetCurrencyModal","showAccountTypesModal","toggleAccountTypesModal","isDemo","account","isReal","getRemainingAccounts","existing_mt5_accounts","gaming_config","getMtConfig","landing_companies","mt_gaming_company","financial_config","mt_financial_company","landing_company","mt5_config","Object","keys","forEach","company","find","type","getMT5AccountKey","getMT5Account","resetBalance","resetVirtualBalance","should_show_real_accounts_list","is_demo_deriv_visible","is_demo_dmt5_visible","is_real_deriv_visible","is_real_dmt5_visible","document","addEventListener","this","updateMt5LoginList","toggleShouldShowRealAccountsList","removeEventListener","account_loginid","switchAccount","total_assets_message_demo","total_assets_message_real","total_assets_message","is_real_account_tab","demo_accounts","sorted_account_list","filter","map","key","accounts","doSwitch","bind","is_loading_mt5","speed","demo_mt5","length","login","display_login","remaining_demo_mt5","real_accounts","onMouseEnter","onMouseLeave","remaining_real_accounts","getAccountTitle","account_residence","client_residence","openRealAccountSignup","can_upgrade","can_open_multi","has_set_currency","has_fiat","available_crypto_currencies","real_mt5","remaining_real_mt5","mt5_login_list_error","has_any_real_account","is_pending_authentication","has_required_credentials","ref","active_index","onTabItemClick","top","label","height","max_autoheight_offset","is_mobile","line_height","weight","obj_total_balance","total_real_assets","total_demo_assets","is_uk","has_effect","text","align","account_settings","citizen","tax_identification_number","tax_residence","account_list","slice","sort","a","b","a_currency","b_currency","a_is_crypto","isCryptocurrency","b_is_crypto","a_is_fiat","b_is_fiat","mt5_login_list","a_is_demo","b_is_demo","sorted_mt5_list","upgradeable_landing_companies","some","can_upgrade_to","vrtc_loginid","vrtc_balance","mt5_demo_total","reduce","total","Array","isArray","amount_real","amount_mt5","React","array","can_change_fiat_currency","account_switcher","withRouter","connect","client","common","ui","residence","is_populating_mt5_account_list","logout","AccountSwitcherMobile","disableApp","enableApp","is_upgrade_enabled","toggle","is_open","is_vertical_top","has_close_icon","toggleModal","width","any","onClose","visible","wrapperClassName","AccountInfoWrapper","disabled_message","alignment","message","zIndex","AccountInfoIcon","AccountInfo","acc_switcher_disabled_message","is_dialog_on","toggleDialog","currency_lower","toLowerCase","CSSTransition","in","timeout","enter","enterDone","exit","unmountOnExit"],"mappings":"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","file":"js/core.account-info.9e360285e33c97726181.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Money, Button, Text } from '@deriv/components';\nimport { formatMoney, getCurrencyName, getMT5AccountDisplay, getCurrencyDisplayCode } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\nconst AccountList = ({\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    has_reset_balance,\n    is_disabled,\n    is_virtual,\n    loginid,\n    market_type,\n    onClickAccount,\n    onClickResetVirtualBalance,\n    selected_loginid,\n    sub_account_type,\n}) => {\n    if (is_disabled && !currency) return null;\n    const currency_badge = currency ? currency_icon : 'IcCurrencyUnknown';\n\n    return (\n        <>\n            <div\n                id={`dt_${loginid}`}\n                className={classNames('acc-switcher__account', {\n                    'acc-switcher__account--selected': loginid === selected_loginid,\n                    'acc-switcher__account--disabled': is_disabled,\n                })}\n                onClick={is_disabled ? undefined : onClickAccount}\n            >\n                <span className='acc-switcher__id'>\n                    <Icon\n                        icon={is_virtual ? 'IcCurrencyVirtual' : currency_badge}\n                        className={'acc-switcher__id-icon'}\n                        size={24}\n                    />\n                    <span>\n                        {display_type === 'currency' ? (\n                            <CurrencyDisplay is_virtual={is_virtual} currency={currency} />\n                        ) : (\n                            <AccountDisplay market_type={market_type} sub_account_type={sub_account_type} />\n                        )}\n                        <div className='acc-switcher__loginid-text'>{loginid}</div>\n                    </span>\n                    {has_reset_balance ? (\n                        <Button\n                            is_disabled={is_disabled}\n                            onClick={e => {\n                                e.stopPropagation();\n                                onClickResetVirtualBalance();\n                            }}\n                            className='acc-switcher__reset-account-btn'\n                            secondary\n                            small\n                        >\n                            {localize('Reset balance')}\n                        </Button>\n                    ) : (\n                        has_balance && (\n                            <Text size='xs' color='prominent' className='acc-switcher__balance'>\n                                {currency && (\n                                    <Money\n                                        currency={getCurrencyDisplayCode(currency)}\n                                        amount={formatMoney(currency, balance, true)}\n                                        should_format={false}\n                                        show_currency\n                                    />\n                                )}\n                            </Text>\n                        )\n                    )}\n                </span>\n            </div>\n        </>\n    );\n};\n\nconst CurrencyDisplay = ({ currency, is_virtual }) => {\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n    if (!currency) {\n        return <Localize i18n_default_text='No currency assigned' />;\n    }\n    return getCurrencyName(currency);\n};\n\nconst AccountDisplay = ({ market_type, sub_account_type }) => (\n    <div>{getMT5AccountDisplay(market_type, sub_account_type)}</div>\n);\n\nexport default AccountList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ContentExpander } from '@deriv/components';\n\nconst AccountWrapper = ({ children, header, is_visible, toggleVisibility }) => (\n    <ContentExpander\n        className='acc-switcher'\n        title={header}\n        is_expanded={is_visible}\n        onToggle={toggleVisibility}\n        is_title_spaced\n    >\n        {children}\n    </ContentExpander>\n);\n\nAccountWrapper.propTypes = {\n    children: PropTypes.node,\n    header: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    is_visible: PropTypes.bool,\n    toggleVisibility: PropTypes.func,\n};\n\nexport default AccountWrapper;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport {\n    Button,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Icon,\n    Money,\n    Tabs,\n    ThemedScrollbars,\n    Text,\n} from '@deriv/components';\nimport {\n    urlFor,\n    routes,\n    isCryptocurrency,\n    formatMoney,\n    getMT5Account,\n    getMT5AccountDisplay,\n    getMT5AccountKey,\n} from '@deriv/shared';\n\nimport { localize, Localize } from '@deriv/translations';\nimport { getAccountTitle } from 'App/Containers/RealAccountSignup/helpers/constants';\nimport { connect } from 'Stores/connect';\nimport { AccountsItemLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport AccountList from './account-switcher-account-list.jsx';\nimport AccountWrapper from './account-switcher-account-wrapper.jsx';\n\nclass AccountSwitcher extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active_tab_index: !props.is_virtual || props.should_show_real_accounts_list ? 0 : 1,\n            is_demo_deriv_visible: true,\n            is_demo_dmt5_visible: true,\n            is_real_deriv_visible: true,\n            is_real_dmt5_visible: true,\n            has_autohide: true,\n        };\n    }\n\n    toggleVisibility = section => {\n        this.setState({ [`is_${section}_visible`]: !this.state[`is_${section}_visible`] });\n    };\n\n    setWrapperRef = node => {\n        this.wrapper_ref = node;\n    };\n\n    updateAccountTabIndex = index => {\n        this.setState({ active_tab_index: index });\n    };\n\n    handleClickOutside = event => {\n        const accounts_toggle_btn = !event.target.classList.contains('acc-info');\n        if (\n            this.wrapper_ref &&\n            !this.wrapper_ref.contains(event.target) &&\n            this.props.is_visible &&\n            accounts_toggle_btn\n        ) {\n            this.closeAccountsDialog();\n        }\n    };\n\n    handleLogout = () => {\n        this.closeAccountsDialog();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        this.props.logoutClient().then(() => {\n            this.props.routeBackInApp(this.props.history);\n        });\n    };\n\n    closeAccountsDialog = () => {\n        this.props.toggleAccountsDialog(false);\n    };\n\n    redirectToMt5 = account_type => {\n        this.closeAccountsDialog();\n        this.props.history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    openMt5RealAccount = account_type => {\n        const has_required_account =\n            account_type === 'synthetic' ? this.props.has_malta_account : this.props.has_maltainvest_account;\n\n        if (this.props.is_eu && !has_required_account) {\n            this.closeAccountsDialog();\n            this.props.openAccountNeededModal(\n                account_type === 'synthetic'\n                    ? this.props.standpoint.gaming_company\n                    : this.props.standpoint.financial_company,\n                account_type === 'synthetic' ? localize('Deriv Synthetic') : localize('Deriv Financial'),\n                account_type === 'synthetic' ? localize('DMT5 Synthetic') : localize('DMT5 Financial')\n            );\n        } else {\n            sessionStorage.setItem('open_mt5_account_type', `real.${account_type}`);\n            this.redirectToMt5Real();\n        }\n    };\n\n    redirectToMt5Real = () => {\n        if (!this.props.is_logged_in || this.props.is_mt5_allowed) {\n            this.redirectToMt5('real');\n        } else {\n            window.open(urlFor('user/metatrader', { legacy: true }));\n        }\n    };\n\n    onListEnter = () => this.setState({ has_autohide: false });\n\n    onListLeave = () => this.setState({ has_autohide: true });\n\n    openMt5DemoAccount = account_type => {\n        sessionStorage.setItem('open_mt5_account_type', `demo.${account_type}`);\n        this.redirectToMt5Demo();\n    };\n\n    redirectToMt5Demo = () => {\n        this.redirectToMt5('demo');\n    };\n\n    setAccountCurrency = () => {\n        this.closeAccountsDialog();\n        this.props.toggleSetCurrencyModal();\n    };\n\n    showAccountTypesModal = () => {\n        this.closeAccountsDialog();\n        this.props.toggleAccountTypesModal(true);\n    };\n\n    isDemo = account => account.account_type === 'demo';\n\n    isReal = account => !this.isDemo(account);\n\n    // * mt5_login_list returns these:\n    // landing_company_short: \"svg\" | \"malta\" | \"maltainvest\" |  \"vanuatu\"  | \"labuan\" | \"bvi\"\n    // account_type: \"real\" | \"demo\"\n    // market_type: \"financial\" | \"gaming\"\n    // sub_account_type: \"financial\" | \"financial_stp\" | \"swap_free\"\n    //\n    // (all market type gaming are synthetic accounts and can only have financial or swap_free sub account)\n    //\n    // * we should map them to landing_company:\n    // mt_financial_company: { financial: {}, financial_stp: {}, swap_free: {} }\n    // mt_gaming_company: { financial: {}, swap_free: {} }\n    getRemainingAccounts = existing_mt5_accounts => {\n        const gaming_config = this.getMtConfig(\n            'gaming',\n            this.props.landing_companies?.mt_gaming_company,\n            existing_mt5_accounts\n        );\n        const financial_config = this.getMtConfig(\n            'financial',\n            this.props.landing_companies?.mt_financial_company,\n            existing_mt5_accounts\n        );\n\n        return [...gaming_config, ...financial_config];\n    };\n\n    getMtConfig = (market_type, landing_company, existing_mt5_accounts) => {\n        const mt5_config = [];\n        if (landing_company) {\n            Object.keys(landing_company).forEach(company => {\n                const has_account = existing_mt5_accounts.find(\n                    account => account.sub_account_type === company && account.market_type === market_type\n                );\n                if (!has_account) {\n                    const type = getMT5AccountKey(market_type, company);\n                    if (type) {\n                        mt5_config.push({\n                            icon: getMT5Account(market_type, company),\n                            title: getMT5AccountDisplay(market_type, company),\n                            type,\n                        });\n                    }\n                }\n            });\n        }\n        return mt5_config;\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n        this.props.updateMt5LoginList();\n    }\n\n    componentWillUnmount() {\n        this.props.toggleShouldShowRealAccountsList(false);\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    async doSwitch(loginid) {\n        this.closeAccountsDialog();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.switchAccount(loginid);\n    }\n\n    resetBalance = async () => {\n        this.closeAccountsDialog();\n        this.props.resetVirtualBalance();\n    };\n\n    get is_real_account_tab() {\n        // Real accounts is always the first tab index based on design\n        return this.state.active_tab_index === 0;\n    }\n\n    get has_required_credentials() {\n        // for MT5 Real Financial STP, if true, users can instantly create a new account by setting password\n        if (!this.props.account_settings) return false;\n        const { citizen, tax_identification_number, tax_residence } = this.props.account_settings;\n        return !!(citizen && tax_identification_number && tax_residence);\n    }\n\n    get sorted_account_list() {\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        return this.props.account_list.slice().sort((a, b) => {\n            const a_currency = this.props.accounts[a.loginid].currency;\n            const b_currency = this.props.accounts[b.loginid].currency;\n            const a_is_crypto = isCryptocurrency(a_currency);\n            const b_is_crypto = isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n    }\n\n    get sorted_mt5_list() {\n        // for MT5, synthetic, financial, financial stp\n        return this.props.mt5_login_list.slice().sort((a, b) => {\n            const a_is_demo = this.isDemo(a);\n            const b_is_demo = this.isDemo(b);\n\n            if (a_is_demo && !b_is_demo) {\n                return 1;\n            }\n            if (b_is_demo && !a_is_demo) {\n                return -1;\n            }\n            if (a.market_type === 'gaming') {\n                return -1;\n            }\n            if (a.sub_account_type === 'financial') {\n                return b.market_type === 'gaming' ? 1 : -1;\n            }\n            return 1;\n        });\n    }\n\n    get demo_mt5() {\n        return this.sorted_mt5_list.filter(this.isDemo);\n    }\n\n    get remaining_demo_mt5() {\n        return this.getRemainingAccounts(this.demo_mt5);\n    }\n\n    get real_mt5() {\n        return this.sorted_mt5_list.filter(this.isReal);\n    }\n\n    get remaining_real_mt5() {\n        return this.getRemainingAccounts(this.real_mt5);\n    }\n\n    // SVG clients can't upgrade.\n    get remaining_real_accounts() {\n        return this.can_open_multi ? [] : this.props.upgradeable_landing_companies;\n    }\n\n    get has_set_currency() {\n        return this.props.account_list.filter(account => !account.is_virtual).some(account => account.title !== 'Real');\n    }\n\n    get can_upgrade() {\n        return !!(this.props.is_virtual && this.props.can_upgrade_to);\n    }\n\n    get can_open_multi() {\n        if (this.props.is_eu) return false;\n        if (this.props.available_crypto_currencies.length < 1 && !this.props.has_fiat) return true;\n        return !this.props.is_virtual;\n    }\n\n    get total_demo_assets() {\n        const vrtc_loginid = this.props.account_list.find(account => account.is_virtual).loginid;\n        const vrtc_balance = this.props.accounts[vrtc_loginid] ? this.props.accounts[vrtc_loginid].balance : 0;\n        const mt5_demo_total = this.props.mt5_login_list\n            .filter(account => this.isDemo(account))\n            .reduce(\n                (total, account) => {\n                    total.balance += account.balance;\n                    return total;\n                },\n                { balance: 0 }\n            );\n        return Array.isArray(this.props.mt5_login_list) ? mt5_demo_total.balance + vrtc_balance : vrtc_balance;\n    }\n\n    get total_real_assets() {\n        return this.props.obj_total_balance.amount_real + this.props.obj_total_balance.amount_mt5;\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n\n        const total_assets_message_demo = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 demo accounts.')\n            : localize('Total assets in your Deriv demo accounts.');\n\n        const total_assets_message_real = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 real accounts.')\n            : localize('Total assets in your Deriv real accounts.');\n\n        const total_assets_message = this.is_real_account_tab ? total_assets_message_real : total_assets_message_demo;\n\n        const demo_accounts = (\n            <div className='acc-switcher__list-wrapper'>\n                <AccountWrapper\n                    header={localize('Deriv Accounts')}\n                    is_visible={this.state.is_demo_deriv_visible}\n                    toggleVisibility={() => {\n                        this.toggleVisibility('demo_deriv');\n                    }}\n                >\n                    <div className='acc-switcher__accounts'>\n                        {this.sorted_account_list\n                            .filter(account => account.is_virtual)\n                            .map(account => (\n                                <AccountList\n                                    key={account.loginid}\n                                    balance={this.props.accounts[account.loginid].balance}\n                                    currency={this.props.accounts[account.loginid].currency}\n                                    currency_icon={`IcCurrency-${account.icon}`}\n                                    display_type={'currency'}\n                                    has_balance={'balance' in this.props.accounts[account.loginid]}\n                                    has_reset_balance={this.props.accounts[this.props.account_loginid].is_virtual}\n                                    is_disabled={account.is_disabled}\n                                    is_virtual={account.is_virtual}\n                                    loginid={account.loginid}\n                                    onClickAccount={\n                                        account.is_disabled ? undefined : this.doSwitch.bind(this, account.loginid)\n                                    }\n                                    onClickResetVirtualBalance={this.resetBalance}\n                                    selected_loginid={this.props.account_loginid}\n                                />\n                            ))}\n                    </div>\n                </AccountWrapper>\n                {this.props.is_mt5_allowed && (\n                    <React.Fragment>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={localize('DMT5 Accounts')}\n                            is_visible={this.state.is_demo_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('demo_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {!!this.demo_mt5.length && (\n                                        <div className='acc-switcher__accounts'>\n                                            {this.demo_mt5.map(account => (\n                                                <AccountList\n                                                    key={account.login}\n                                                    market_type={account.market_type}\n                                                    sub_account_type={account.sub_account_type}\n                                                    balance={account.balance}\n                                                    currency={account.currency}\n                                                    currency_icon={`IcMt5-${getMT5Account(\n                                                        account.market_type,\n                                                        account.sub_account_type\n                                                    )}`}\n                                                    has_balance={'balance' in account}\n                                                    loginid={account.display_login}\n                                                    onClickAccount={this.redirectToMt5Demo}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                    {this.remaining_demo_mt5.map(account => (\n                                        <div key={account.title} className='acc-switcher__new-account'>\n                                            <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                            <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                                {account.title}\n                                            </Text>\n                                            <Button\n                                                onClick={() => this.openMt5DemoAccount(account.type)}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n\n        const real_accounts = (\n            <div className='acc-switcher__list-wrapper' onMouseEnter={this.onListEnter} onMouseLeave={this.onListLeave}>\n                <React.Fragment>\n                    <AccountWrapper\n                        header={localize('Deriv Accounts')}\n                        is_visible={this.state.is_real_deriv_visible}\n                        toggleVisibility={() => {\n                            this.toggleVisibility('real_deriv');\n                        }}\n                    >\n                        <div className='acc-switcher__accounts'>\n                            {this.sorted_account_list\n                                .filter(account => !account.is_virtual)\n                                .map(account => {\n                                    return (\n                                        <AccountList\n                                            key={account.loginid}\n                                            balance={this.props.accounts[account.loginid].balance}\n                                            currency={this.props.accounts[account.loginid].currency}\n                                            currency_icon={`IcCurrency-${account.icon}`}\n                                            display_type={'currency'}\n                                            has_balance={'balance' in this.props.accounts[account.loginid]}\n                                            is_disabled={account.is_disabled}\n                                            is_virtual={account.is_virtual}\n                                            loginid={account.loginid}\n                                            onClickAccount={\n                                                account.is_disabled\n                                                    ? undefined\n                                                    : this.doSwitch.bind(this, account.loginid)\n                                            }\n                                            selected_loginid={this.props.account_loginid}\n                                        />\n                                    );\n                                })}\n                        </div>\n                        {this.remaining_real_accounts.map((account, index) => (\n                            <div key={index} className='acc-switcher__new-account'>\n                                <Icon icon='IcDeriv' size={24} />\n                                <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                    {getAccountTitle(account, {\n                                        account_residence: this.props.client_residence,\n                                    })}\n                                </Text>\n                                <Button\n                                    onClick={() => this.props.openRealAccountSignup(account)}\n                                    className='acc-switcher__new-account-btn'\n                                    secondary\n                                    small\n                                >\n                                    {localize('Add')}\n                                </Button>\n                            </div>\n                        ))}\n                        {!this.can_upgrade && this.can_open_multi && (\n                            <Button\n                                className='acc-switcher__btn'\n                                secondary\n                                onClick={\n                                    this.has_set_currency\n                                        ? () => this.props.openRealAccountSignup('manage')\n                                        : this.setAccountCurrency\n                                }\n                            >\n                                {this.props.has_fiat && this.props.available_crypto_currencies?.length === 0\n                                    ? localize('Manage account')\n                                    : localize('Add or manage account')}\n                            </Button>\n                        )}\n                    </AccountWrapper>\n                </React.Fragment>\n                {this.props.is_mt5_allowed && (\n                    <React.Fragment>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={localize('DMT5 Accounts')}\n                            is_visible={this.state.is_real_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('real_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {!!this.real_mt5.length && (\n                                        <div className='acc-switcher__accounts'>\n                                            {this.real_mt5.map(account => (\n                                                <AccountList\n                                                    key={account.login}\n                                                    market_type={account.market_type}\n                                                    sub_account_type={account.sub_account_type}\n                                                    balance={account.balance}\n                                                    currency={account.currency}\n                                                    currency_icon={`IcMt5-${getMT5Account(\n                                                        account.market_type,\n                                                        account.sub_account_type\n                                                    )}`}\n                                                    has_balance={'balance' in account}\n                                                    loginid={account.display_login}\n                                                    onClickAccount={this.redirectToMt5Real}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                    {this.remaining_real_mt5.map(account => (\n                                        <div\n                                            key={account.title}\n                                            className={classNames('acc-switcher__new-account', {\n                                                'acc-switcher__new-account--disabled': this.props.mt5_login_list_error,\n                                            })}\n                                        >\n                                            <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                            <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                                {account.title}\n                                            </Text>\n                                            <Button\n                                                onClick={() => this.openMt5RealAccount(account.type)}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                                is_disabled={\n                                                    (!this.props.is_eu && !this.props.has_any_real_account) ||\n                                                    (account.type === 'financial_stp' &&\n                                                        (this.props.is_pending_authentication ||\n                                                            this.has_required_credentials)) ||\n                                                    !!this.props.mt5_login_list_error\n                                                }\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef}>\n                <Tabs\n                    active_index={this.state.active_tab_index}\n                    className='acc-switcher__list-tabs'\n                    onTabItemClick={this.updateAccountTabIndex}\n                    top\n                >\n                    {/* TODO: De-couple and refactor demo and real accounts groups\n                        into a single reusable AccountListItem component */}\n                    <div label={localize('Real')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars height='354px'>{real_accounts}</ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                                {real_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                    <div label={localize('Demo')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars height='354px'>{demo_accounts}</ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                                {demo_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                </Tabs>\n                <div\n                    className={classNames('acc-switcher__separator', {\n                        'acc-switcher__separator--auto-margin': this.props.is_mobile,\n                    })}\n                />\n                <div className='acc-switcher__total'>\n                    <Text line_height='s' size='xs' weight='bold' color='prominent'>\n                        <Localize i18n_default_text='Total assets' />\n                    </Text>\n                    <Text size='xs' color='prominent' className='acc-switcher__balance'>\n                        <Money\n                            currency={this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD'}\n                            amount={formatMoney(\n                                this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD',\n                                this.is_real_account_tab ? this.total_real_assets : this.total_demo_assets,\n                                true\n                            )}\n                            show_currency\n                            should_format={false}\n                        />\n                    </Text>\n                </div>\n                <Text color='less-prominent' line_height='xs' size='xxxs' className='acc-switcher__total-subtitle'>\n                    {total_assets_message}\n                </Text>\n                <div className='acc-switcher__separator' />\n                <div className='acc-switcher__footer'>\n                    {this.props.is_uk && this.props.has_any_real_account && (\n                        <Button\n                            className='acc-switcher__compare'\n                            type='button'\n                            has_effect\n                            onClick={this.showAccountTypesModal}\n                            text={localize('Compare')}\n                            secondary\n                        />\n                    )}\n                    <div id='dt_logout_button' className='acc-switcher__logout' onClick={this.handleLogout}>\n                        <Text color='prominent' size='xs' align='left' className='acc-switcher__logout-text'>\n                            {localize('Log out')}\n                        </Text>\n                        <Icon\n                            icon='IcLogout'\n                            className='acc-switcher__logout-icon drawer__icon'\n                            onClick={this.handleLogout}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    available_crypto_currencies: PropTypes.array,\n    account_list: PropTypes.array,\n    account_loginid: PropTypes.string,\n    accounts: PropTypes.object,\n    can_change_fiat_currency: PropTypes.bool,\n    can_upgrade_to: PropTypes.string,\n    has_fiat: PropTypes.bool,\n    has_any_real_account: PropTypes.bool,\n    is_eu: PropTypes.bool,\n    is_loading_mt5: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_mt5_allowed: PropTypes.bool,\n    is_pending_authentication: PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_uk: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    mt5_login_list: PropTypes.array,\n    obj_total_balance: PropTypes.object,\n    openRealAccountSignup: PropTypes.func,\n    switchAccount: PropTypes.func,\n    resetVirtualBalance: PropTypes.func,\n    toggleAccountsDialog: PropTypes.func,\n    toggleAccountTypesModal: PropTypes.func,\n    togglePositionsDrawer: PropTypes.func,\n    toggleSetCurrencyModal: PropTypes.func,\n    updateMt5LoginList: PropTypes.func,\n};\n\nconst account_switcher = withRouter(\n    connect(({ client, common, ui }) => ({\n        available_crypto_currencies: client.available_crypto_currencies,\n        account_loginid: client.loginid,\n        accounts: client.accounts,\n        account_settings: client.account_settings,\n        can_change_fiat_currency: client.can_change_fiat_currency,\n        account_list: client.account_list,\n        can_upgrade_to: client.can_upgrade_to,\n        client_residence: client.residence,\n        is_eu: client.is_eu,\n        is_loading_mt5: client.is_populating_mt5_account_list,\n        is_logged_in: client.is_logged_in,\n        is_mt5_allowed: client.is_mt5_allowed,\n        is_pending_authentication: client.is_pending_authentication,\n        is_uk: client.is_uk,\n        is_virtual: client.is_virtual,\n        has_fiat: client.has_fiat,\n        has_any_real_account: client.has_any_real_account,\n        mt5_login_list: client.mt5_login_list,\n        mt5_login_list_error: client.mt5_login_list_error,\n        obj_total_balance: client.obj_total_balance,\n        switchAccount: client.switchAccount,\n        resetVirtualBalance: client.resetVirtualBalance,\n        has_malta_account: client.has_malta_account,\n        has_maltainvest_account: client.has_maltainvest_account,\n        openAccountNeededModal: ui.openAccountNeededModal,\n        logoutClient: client.logout,\n        landing_companies: client.landing_companies,\n        upgradeable_landing_companies: client.upgradeable_landing_companies,\n        updateMt5LoginList: client.updateMt5LoginList,\n        routeBackInApp: common.routeBackInApp,\n        standpoint: client.standpoint,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        toggleAccountsDialog: ui.toggleAccountsDialog,\n        toggleAccountTypesModal: ui.toggleAccountTypesModal,\n        togglePositionsDrawer: ui.togglePositionsDrawer,\n        toggleSetCurrencyModal: ui.toggleSetCurrencyModal,\n        should_show_real_accounts_list: ui.should_show_real_accounts_list,\n        toggleShouldShowRealAccountsList: ui.toggleShouldShowRealAccountsList,\n    }))(AccountSwitcher)\n);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Div100vhContainer, Modal } from '@deriv/components';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountSwitcherMobile = props => {\n    const { disableApp, enableApp, is_visible, is_upgrade_enabled, toggle } = props;\n    return (\n        <Modal\n            id='dt_account_switcher_modal'\n            className='accounts-switcher'\n            enableApp={enableApp}\n            is_open={is_visible}\n            is_vertical_top\n            disableApp={disableApp}\n            has_close_icon={false}\n            toggleModal={toggle}\n            height='auto'\n            width='calc(100vw - 32px)'\n        >\n            <Div100vhContainer\n                className={classNames('acc-switcher__wrapper', 'acc-switcher__wrapper--is-mobile')}\n                max_autoheight_offset='48px'\n            >\n                <AccountSwitcher is_mobile is_visible={true} toggle={toggle} is_upgrade_enabled={is_upgrade_enabled} />\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nAccountSwitcherMobile.propTypes = {\n    children: PropTypes.any,\n    onClose: PropTypes.func,\n    title: PropTypes.string,\n    visible: PropTypes.bool,\n    wrapperClassName: PropTypes.string,\n};\n\nexport default AccountSwitcherMobile;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, Icon, MobileWrapper, Popover } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { getCurrencyDisplayCode } from '@deriv/shared';\nimport AccountSwitcherMobile from 'App/Containers/AccountSwitcher/account-switcher-mobile.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountInfoWrapper = ({ is_disabled, disabled_message, children }) =>\n    is_disabled && disabled_message ? (\n        <Popover alignment='bottom' message={disabled_message} zIndex={99999}>\n            {children}\n        </Popover>\n    ) : (\n        <React.Fragment>{children}</React.Fragment>\n    );\n\nconst AccountInfoIcon = ({ is_virtual, currency }) => (\n    <Icon\n        icon={`IcCurrency-${is_virtual ? 'virtual' : currency || 'Unknown'}`}\n        className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n        size={24}\n    />\n);\n\nconst AccountInfo = ({\n    acc_switcher_disabled_message,\n    balance,\n    currency,\n    disableApp,\n    enableApp,\n    is_dialog_on,\n    is_virtual,\n    toggleDialog,\n    is_disabled,\n}) => {\n    const currency_lower = currency.toLowerCase();\n    return (\n        <div className='acc-info__wrapper'>\n            <div className='acc-info__separator' />\n            <AccountInfoWrapper is_disabled={is_disabled} disabled_message={acc_switcher_disabled_message}>\n                <div\n                    className={classNames('acc-info', {\n                        'acc-info--show': is_dialog_on,\n                        'acc-info--is-virtual': is_virtual,\n                        'acc-info--is-disabled': is_disabled,\n                    })}\n                    onClick={is_disabled ? undefined : () => toggleDialog()}\n                >\n                    <span className='acc-info__id'>\n                        <DesktopWrapper>\n                            <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            {(is_virtual || currency) && (\n                                <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                            )}\n                        </MobileWrapper>\n                    </span>\n                    {(typeof balance !== 'undefined' || !currency) && (\n                        <p\n                            className={classNames('acc-info__balance', {\n                                'acc-info__balance--no-currency': !currency && !is_virtual,\n                            })}\n                        >\n                            {!currency ? (\n                                <Localize i18n_default_text='No currency assigned' />\n                            ) : (\n                                `${balance} ${getCurrencyDisplayCode(currency)}`\n                            )}\n                        </p>\n                    )}\n                    {is_disabled ? (\n                        <Icon icon='IcLock' />\n                    ) : (\n                        <Icon icon='IcChevronDownBold' className='acc-info__select-arrow' />\n                    )}\n                </div>\n            </AccountInfoWrapper>\n            <MobileWrapper>\n                <AccountSwitcherMobile\n                    is_visible={is_dialog_on}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    toggle={toggleDialog}\n                />\n            </MobileWrapper>\n            <DesktopWrapper>\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter: 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit: 'acc-switcher__wrapper--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper'>\n                        <AccountSwitcher is_visible={is_dialog_on} toggle={toggleDialog} />\n                    </div>\n                </CSSTransition>\n            </DesktopWrapper>\n        </div>\n    );\n};\n\nAccountInfo.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.string,\n    currency: PropTypes.string,\n    is_dialog_on: PropTypes.bool,\n    is_disabled: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    loginid: PropTypes.string,\n    toggleDialog: PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}