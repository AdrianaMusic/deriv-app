{"version":3,"sources":["webpack:///./App/Containers/ResetPasswordModal/reset-password-modal.jsx"],"names":["resetInitialValues","password","ResetPassword","onResetComplete","error_msg","actions","setSubmitting","resetForm","console","error","setStatus","reset_complete","props","logoutClient","then","redirectToLogin","handleSubmit","values","verification_code","api_request","reset_password","new_password","WS","resetPassword","response","message","validateReset","errors","validLength","min","max","validPassword","getErrorMessages","localize","min_number","max_number","className","initialValues","initialStatus","validate","this","onSubmit","handleBlur","touched","isSubmitting","handleChange","status","i18n_default_text","input","has_error","name","label","onChange","onBlur","value","data-lpignore","required","classNames","type","is_disabled","primary","React","propTypes","enableApp","PropTypes","func","isModalVisible","string","ResetPasswordModal","disableApp","is_loading","is_visible","toggleResetPasswordModal","bool","connect","ui","client","is_reset_password_modal_visible","logout"],"mappings":"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","file":"js/core.reset-password-modal.18b5943779a881209f32.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Formik, Form } from 'formik';\nimport { Button, Dialog, PasswordInput, PasswordMeter } from '@deriv/components';\nimport { validPassword, validLength, getErrorMessages } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { redirectToLogin } from '_common/base/login';\nimport { WS } from 'Services/index';\n\nconst resetInitialValues = { password: '' };\n\nclass ResetPassword extends React.Component {\n    onResetComplete = (error_msg, actions) => {\n        actions.setSubmitting(false);\n        actions.resetForm({ password: '' });\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error_msg) {\n            // eslint-disable-next-line no-console\n            console.error(error_msg);\n            actions.setStatus({ error_msg });\n            return;\n        }\n\n        actions.setStatus({ reset_complete: true });\n\n        this.props.logoutClient().then(() => {\n            redirectToLogin();\n        });\n    };\n\n    handleSubmit = (values, actions) => {\n        const { verification_code } = this.props;\n        const api_request = {\n            reset_password: 1,\n            new_password: values.password,\n            verification_code,\n        };\n\n        WS.resetPassword(api_request).then(async response => {\n            if (response.error) {\n                this.onResetComplete(response.error.message, actions);\n            } else {\n                this.onResetComplete(null, actions);\n            }\n        });\n    };\n\n    validateReset = values => {\n        const errors = {};\n\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n\n        return errors;\n    };\n\n    render() {\n        return (\n            <div className='reset-password'>\n                <Formik\n                    initialValues={resetInitialValues}\n                    initialStatus={{ reset_complete: false, error_msg: '' }}\n                    validate={this.validateReset}\n                    onSubmit={this.handleSubmit}\n                >\n                    {({ handleBlur, errors, values, touched, isSubmitting, handleChange, status }) => (\n                        <Form>\n                            <React.Fragment>\n                                {status.reset_complete ? (\n                                    <div className='reset-password__password-selection'>\n                                        <p className='reset-password__heading'>\n                                            <Localize i18n_default_text='Your password has been changed' />\n                                        </p>\n                                        <p className='reset-password__subtext'>\n                                            <Localize i18n_default_text='We will now redirect you to the login page.' />\n                                        </p>\n                                    </div>\n                                ) : (\n                                    <div className='reset-password__password-selection'>\n                                        <p className='reset-password__heading'>\n                                            <Localize i18n_default_text='Choose a new password' />\n                                        </p>\n                                        <fieldset className='reset-password__fieldset'>\n                                            <PasswordMeter\n                                                input={values.password}\n                                                has_error={!!(touched.password && errors.password)}\n                                            >\n                                                <PasswordInput\n                                                    className='reset-password__password-field'\n                                                    name='password'\n                                                    label={localize('Create a password')}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    error={touched.password && errors.password}\n                                                    value={values.password}\n                                                    data-lpignore='true'\n                                                    required\n                                                />\n                                            </PasswordMeter>\n                                        </fieldset>\n                                        <p className='reset-password__subtext'>\n                                            {status.error_msg ? (\n                                                <Localize\n                                                    i18n_default_text='{{error_msg}}'\n                                                    values={{ error_msg: status.error_msg }}\n                                                />\n                                            ) : (\n                                                <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                            )}\n                                        </p>\n\n                                        <Button\n                                            className={classNames('reset-password__btn', {\n                                                'reset-password__btn--disabled':\n                                                    !values.password || errors.password || isSubmitting,\n                                            })}\n                                            type='submit'\n                                            is_disabled={!values.password || errors.password || isSubmitting}\n                                            primary\n                                        >\n                                            <Localize i18n_default_text='Reset my password' />\n                                        </Button>\n                                    </div>\n                                )}\n                            </React.Fragment>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n\nResetPassword.propTypes = {\n    enableApp: PropTypes.func,\n    isModalVisible: PropTypes.func,\n    verification_code: PropTypes.string,\n};\n\nconst ResetPasswordModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    logoutClient,\n    verification_code,\n    toggleResetPasswordModal,\n}) => {\n    return (\n        <Dialog is_visible={is_visible} disableApp={disableApp} enableApp={enableApp} is_loading={is_loading}>\n            <ResetPassword\n                verification_code={verification_code}\n                isModalVisible={toggleResetPasswordModal}\n                enableApp={enableApp}\n                logoutClient={logoutClient}\n            />\n        </Dialog>\n    );\n};\n\nResetPasswordModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    toggleResetPasswordModal: PropTypes.func,\n    verification_code: PropTypes.string,\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_reset_password_modal_visible,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    logoutClient: client.logout,\n    toggleResetPasswordModal: ui.toggleResetPasswordModal,\n    verification_code: client.verification_code.reset_password,\n}))(ResetPasswordModal);\n"],"sourceRoot":""}