{"version":3,"sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx","webpack:///./App/Containers/AccountSignupModal/account-signup-modal.jsx"],"names":["SetResidenceForm","class_prefix","children","header_text","errors","touched","setFieldTouched","setFieldValue","residence_list","className","localize","name","field","autoComplete","type","label","error","residence","required","list_items","onItemSelection","value","text","placeholder","use_text","onChange","e","target","propTypes","PropTypes","node","string","arrayOf","object","signupInitialValues","password","AccountSignup","state","has_valid_residence","pw_input","updatePassword","setState","onResidenceSelection","onSignupComplete","props","isModalVisible","enableApp","Error","this","onSignup","initialValues","validate","values","length","validPassword","index_of_selection","findIndex","item","toLowerCase","disabled","website_name","validateSignup","onSubmit","modded_values","isSubmitting","handleBlur","handleChange","i18n_default_text","input","has_error","onBlur","classNames","is_disabled","primary","onClick","React","func","array","AccountSignupModal","disableApp","is_eu","is_loading","is_visible","is_logged_in","logout","toggleAccountSignupModal","is_mobile_full_width","is_content_centered","bool","connect","ui","client","is_account_signup_modal_visible"],"mappings":"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","file":"js/core.account-signup-modal.c7605a4d12d803120d15.js","sourcesContent":["import { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Autocomplete, DesktopWrapper, MobileWrapper, SelectNative } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    class_prefix = 'set-residence',\n    children,\n    header_text,\n    errors,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => (\n    <div className={`${class_prefix}__residence-selection`}>\n        {!!header_text && <p className={`${class_prefix}__heading`}>{header_text}</p>}\n        <p className={`${class_prefix}__${header_text ? 'text' : 'heading'}`}>{localize('Where do you live?')}</p>\n        <Field name='residence'>\n            {({ field }) => (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            className={`${class_prefix}__residence-field`}\n                            type='text'\n                            label={localize('Choose country')}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => setFieldValue('residence', value ? text : '', true)}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <SelectNative\n                            placeholder={localize('Please select')}\n                            label={localize('Choose country')}\n                            value={field.value}\n                            list_items={residence_list}\n                            error={touched.residence && errors.residence}\n                            required\n                            use_text\n                            onChange={e => {\n                                setFieldTouched('residence', true);\n                                setFieldValue('residence', e.target.value, true);\n                            }}\n                        />\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n        </Field>\n        {children}\n    </div>\n);\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.node,\n    class_prefix: PropTypes.string,\n    header_text: PropTypes.string,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SetResidenceForm;\n","import classNames from 'classnames';\nimport { Field, Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Dialog, PasswordInput, PasswordMeter } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { validPassword } from 'Utils/Validator/declarative-validation-rules';\nimport { website_name } from 'App/Constants/app-config';\nimport ResidenceForm from '../SetResidenceModal/set-residence-form.jsx';\nimport 'Sass/app/modules/account-signup.scss';\n\nconst signupInitialValues = { password: '', residence: '' };\n\nconst validateSignup = (values, residence_list) => {\n    const errors = {};\n    const min_password_length = 8;\n\n    if (values.password && (values.password.length < min_password_length || !validPassword(values.password))) {\n        errors.password = true;\n    }\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    return errors;\n};\n\nclass AccountSignup extends React.Component {\n    state = {\n        has_valid_residence: false,\n        pw_input: '',\n    };\n\n    updatePassword = string => {\n        this.setState({ pw_input: string });\n    };\n\n    onResidenceSelection = () => {\n        this.setState({ has_valid_residence: true });\n    };\n\n    onSignupComplete = error => {\n        // Handle lower level modal controls due to overriding modal rendering\n        this.props.isModalVisible(false);\n        this.props.enableApp();\n\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error) {\n            throw Error(error);\n        }\n    };\n\n    render() {\n        const { onSignup, residence_list } = this.props;\n\n        const validateSignupPassthrough = values => validateSignup(values, residence_list);\n        const onSignupPassthrough = values => {\n            const index_of_selection = residence_list.findIndex(\n                item => item.text.toLowerCase() === values.residence.toLowerCase()\n            );\n\n            const modded_values = { ...values, residence: residence_list[index_of_selection].value };\n            onSignup(modded_values, this.onSignupComplete);\n        };\n        return (\n            <div className='account-signup'>\n                <Formik\n                    initialValues={signupInitialValues}\n                    validate={validateSignupPassthrough}\n                    onSubmit={onSignupPassthrough}\n                >\n                    {({\n                        isSubmitting,\n                        handleBlur,\n                        errors,\n                        handleChange,\n                        values,\n                        setFieldValue,\n                        setFieldTouched,\n                        touched,\n                    }) => (\n                        <Form>\n                            <React.Fragment>\n                                {!this.state.has_valid_residence ? (\n                                    <ResidenceForm\n                                        header_text={localize('Thanks for verifying your email')}\n                                        class_prefix='account-signup'\n                                        errors={errors}\n                                        touched={touched}\n                                        setFieldTouched={setFieldTouched}\n                                        setFieldValue={setFieldValue}\n                                        residence_list={residence_list}\n                                    >\n                                        <Button\n                                            className={classNames('account-signup__btn', {\n                                                'account-signup__btn--disabled': !values.residence || errors.residence,\n                                            })}\n                                            type='button'\n                                            is_disabled={!values.residence || !!errors.residence}\n                                            onClick={this.onResidenceSelection}\n                                            primary\n                                            text={localize('Next')}\n                                        />\n                                    </ResidenceForm>\n                                ) : (\n                                    <div className='account-signup__password-selection'>\n                                        <p className='account-signup__heading'>\n                                            <Localize i18n_default_text='Keep your account secure with a password' />\n                                        </p>\n                                        <Field name='password'>\n                                            {({ field }) => (\n                                                <PasswordMeter\n                                                    input={this.state.pw_input}\n                                                    has_error={!!(touched.password && errors.password)}\n                                                >\n                                                    <PasswordInput\n                                                        {...field}\n                                                        className='account-signup__password-field'\n                                                        label={localize('Create a password')}\n                                                        error={touched.password && errors.password}\n                                                        required\n                                                        value={values.password}\n                                                        onBlur={handleBlur}\n                                                        onChange={e => {\n                                                            const input = e.target;\n                                                            setFieldTouched('password', true);\n                                                            if (input) this.updatePassword(input.value);\n                                                            handleChange(e);\n                                                        }}\n                                                    />\n                                                </PasswordMeter>\n                                            )}\n                                        </Field>\n                                        <p className='account-signup__subtext'>\n                                            <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                        </p>\n\n                                        <Button\n                                            className={classNames('account-signup__btn', {\n                                                'account-signup__btn--disabled':\n                                                    !values.password || errors.password || isSubmitting,\n                                            })}\n                                            type='submit'\n                                            is_disabled={!values.password || !!errors.password || isSubmitting}\n                                            text={localize('Start trading')}\n                                            primary\n                                        />\n                                    </div>\n                                )}\n                            </React.Fragment>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n\nAccountSignup.propTypes = {\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.array,\n};\n\nconst AccountSignupModal = ({\n    enableApp,\n    disableApp,\n    is_eu,\n    is_loading,\n    is_visible,\n    is_logged_in,\n    logout,\n    onSignup,\n    residence_list,\n    toggleAccountSignupModal,\n}) => {\n    React.useEffect(() => {\n        // a logged in user should not be able to create a new account\n        if (is_visible && is_logged_in) {\n            logout();\n        }\n    }, [is_visible, is_logged_in, logout]);\n\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_mobile_full_width={false}\n            is_content_centered\n        >\n            <AccountSignup\n                onSignup={onSignup}\n                residence_list={residence_list}\n                is_eu={is_eu}\n                isModalVisible={toggleAccountSignupModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n};\n\nAccountSignupModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_eu: PropTypes.bool,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_account_signup_modal_visible,\n    toggleAccountSignupModal: ui.toggleAccountSignupModal,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_eu: client.is_eu,\n    is_loading: ui.is_loading,\n    onSignup: client.onSignup,\n    is_logged_in: client.is_logged_in,\n    residence_list: client.residence_list,\n    logout: client.logout,\n}))(AccountSignupModal);\n"],"sourceRoot":""}