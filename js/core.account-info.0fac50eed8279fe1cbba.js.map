{"version":3,"sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher-account-list.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-account-wrapper.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-mobile.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["CurrencyDisplay","currency","is_virtual","i18n_default_text","getCurrencyDisplayCode","AccountDisplay","account_type","getMT5AccountDisplay","AccountList","balance","currency_icon","display_type","has_balance","is_disabled","loginid","onClickAccount","selected_loginid","id","className","classNames","onClick","undefined","icon","size","amount","formatMoney","should_format","AccountWrapper","children","header","is_visible","toggleVisibility","propTypes","PropTypes","node","oneOfType","object","string","bool","func","AccountSwitcher","props","section","setState","state","setWrapperRef","wrapper_ref","updateAccountTabIndex","index","active_tab_index","handleClickOutside","event","accounts_toggle_btn","target","classList","contains","toggleAccountsDialog","handleLogout","is_positions_drawer_on","togglePositionsDrawer","logoutClient","then","routeBackInApp","history","redirectToMt5","push","routes","mt5","openMt5RealAccount","sessionStorage","setItem","redirectToMt5Real","is_logged_in","is_mt5_allowed","window","open","urlFor","legacy","onListEnter","has_autohide","onListLeave","openMt5DemoAccount","redirectToMt5Demo","setAccountCurrency","toggleSetCurrencyModal","onClickUpgrade","can_upgrade_to","openRealAccountSignup","isDemo","account","test","group","isReal","getRemainingAccounts","existing_mt5_groups","mt5_config","account_types","title","localize","type","forEach","split","index_to_remove","findIndex","indexOf","splice","is_demo_deriv_visible","is_demo_dmt5_visible","is_real_deriv_visible","is_real_dmt5_visible","document","addEventListener","this","updateMt5LoginList","removeEventListener","account_loginid","switchAccount","total_assets_message_demo","total_assets_message_real","total_assets_message","is_real_account_tab","demo_accounts","sorted_account_list","filter","map","key","accounts","doSwitch","bind","is_loading_mt5","speed","demo_mt5","length","login","display_login","remaining_demo_mt5","secondary","small","real_accounts","onMouseEnter","onMouseLeave","can_upgrade","can_open_multi","can_change_fiat_currency","has_set_currency","real_mt5","remaining_real_mt5","has_any_real_account","is_pending_authentication","ref","active_index","onTabItemClick","top","label","height","max_autoheight_offset","is_mobile","obj_total_balance","total_real_assets","total_demo_assets","account_list","slice","sort","a","b","a_currency","b_currency","a_is_crypto","isCryptocurrency","b_is_crypto","a_is_fiat","b_is_fiat","mt5_login_list","sorted_mt5_list","existing_demo_mt5_groups","Object","keys","existing_real_mt5_groups","some","available_crypto_currencies","vrtc_loginid","find","vrtc_balance","mt5_demo_total","reduce","total","Array","isArray","amount_real","amount_mt5","React","array","account_switcher","withRouter","connect","client","common","ui","is_populating_mt5_account_list","logout","AccountSwitcherMobile","disableApp","enableApp","is_upgrade_enabled","toggle","is_open","is_vertical_top","has_close_icon","toggleModal","width","any","onClose","visible","wrapperClassName","AccountInfoWrapper","disabled_message","alignment","message","zIndex","AccountInfo","acc_switcher_disabled_message","is_dialog_on","toggleDialog","toLowerCase","in","timeout","enter","enterDone","exit","unmountOnExit"],"mappings":"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","file":"js/core.account-info.0fac50eed8279fe1cbba.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Money } from '@deriv/components';\nimport { formatMoney, getCurrencyDisplayCode } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { getMT5AccountDisplay } from 'Stores/Helpers/client';\n\nconst AccountList = ({\n    account_type,\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    is_disabled,\n    is_virtual,\n    loginid,\n    onClickAccount,\n    selected_loginid,\n}) => {\n    if (is_disabled && !currency) return null;\n    return (\n        <>\n            <div\n                id={`dt_${loginid}`}\n                className={classNames('acc-switcher__account', {\n                    'acc-switcher__account--selected': loginid === selected_loginid,\n                    'acc-switcher__account--disabled': is_disabled,\n                })}\n                onClick={is_disabled ? undefined : onClickAccount}\n            >\n                <span className={'acc-switcher__id'}>\n                    <Icon\n                        icon={currency ? currency_icon : 'IcCurrencyUnknown'}\n                        className={'acc-switcher__id-icon'}\n                        size={24}\n                    />\n                    <span>\n                        {display_type === 'currency' ? (\n                            <CurrencyDisplay is_virtual={is_virtual} currency={currency} />\n                        ) : (\n                            <AccountDisplay account_type={account_type} />\n                        )}\n                        <div className='acc-switcher__loginid-text'>{loginid}</div>\n                    </span>\n                    {has_balance && (\n                        <span className='acc-switcher__balance'>\n                            {currency && (\n                                <Money\n                                    currency={currency}\n                                    amount={formatMoney(currency, balance, true)}\n                                    should_format={false}\n                                />\n                            )}\n                        </span>\n                    )}\n                </span>\n            </div>\n        </>\n    );\n};\n\nconst CurrencyDisplay = ({ currency, is_virtual }) => {\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n    if (!currency) {\n        return <Localize i18n_default_text='No currency assigned' />;\n    }\n    return getCurrencyDisplayCode(currency);\n};\n\nconst AccountDisplay = ({ account_type }) => <div>{getMT5AccountDisplay(account_type)}</div>;\n\nexport default AccountList;\n","import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@deriv/components';\n\nconst AccountWrapper = ({ children, header, is_visible, toggleVisibility }) => (\n    <React.Fragment>\n        <div className={classNames('acc-switcher', { 'acc-info--show': !is_visible })} onClick={toggleVisibility}>\n            <span className='acc-switcher__list-title'>{header}</span>\n            <Icon icon='IcChevronDown' className='acc-info__select-arrow acc-info__select-arrow--invert' />\n        </div>\n        {is_visible && <React.Fragment>{children}</React.Fragment>}\n    </React.Fragment>\n);\n\nAccountWrapper.propTypes = {\n    children: PropTypes.node,\n    header: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    is_visible: PropTypes.bool,\n    toggleVisibility: PropTypes.func,\n};\n\nexport default AccountWrapper;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport {\n    Button,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Icon,\n    Money,\n    Tabs,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport { urlFor, routes, isCryptocurrency, formatMoney } from '@deriv/shared';\n\nimport { localize, Localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { getMT5AccountDisplay } from 'Stores/Helpers/client';\nimport { AccountsItemLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport AccountList from './account-switcher-account-list.jsx';\nimport AccountWrapper from './account-switcher-account-wrapper.jsx';\n\nclass AccountSwitcher extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active_tab_index: props.is_virtual ? 1 : 0,\n            is_demo_deriv_visible: true,\n            is_demo_dmt5_visible: true,\n            is_real_deriv_visible: true,\n            is_real_dmt5_visible: true,\n            has_autohide: true,\n        };\n    }\n\n    toggleVisibility = section => {\n        this.setState({ [`is_${section}_visible`]: !this.state[`is_${section}_visible`] });\n    };\n\n    setWrapperRef = node => {\n        this.wrapper_ref = node;\n    };\n\n    updateAccountTabIndex = index => {\n        this.setState({ active_tab_index: index });\n    };\n\n    handleClickOutside = event => {\n        const accounts_toggle_btn = !event.target.classList.contains('acc-info');\n        if (\n            this.wrapper_ref &&\n            !this.wrapper_ref.contains(event.target) &&\n            this.props.is_visible &&\n            accounts_toggle_btn\n        ) {\n            this.props.toggleAccountsDialog();\n        }\n    };\n\n    handleLogout = () => {\n        this.props.toggleAccountsDialog();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        this.props.logoutClient().then(() => {\n            this.props.routeBackInApp(this.props.history);\n        });\n    };\n\n    redirectToMt5 = account_type => {\n        this.props.toggleAccountsDialog();\n        this.props.history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    openMt5RealAccount = account_type => {\n        sessionStorage.setItem('open_mt5_account_type', `real.${account_type}`);\n        this.redirectToMt5Real();\n    };\n\n    redirectToMt5Real = () => {\n        if (!this.props.is_logged_in || this.props.is_mt5_allowed) {\n            this.redirectToMt5('real');\n        } else {\n            window.open(urlFor('user/metatrader', { legacy: true }));\n        }\n    };\n\n    onListEnter = () => this.setState({ has_autohide: false });\n\n    onListLeave = () => this.setState({ has_autohide: true });\n\n    openMt5DemoAccount = account_type => {\n        sessionStorage.setItem('open_mt5_account_type', `demo.${account_type}`);\n        this.redirectToMt5Demo();\n    };\n\n    redirectToMt5Demo = () => {\n        this.redirectToMt5('demo');\n    };\n\n    setAccountCurrency = () => {\n        this.props.toggleAccountsDialog();\n        this.props.toggleSetCurrencyModal();\n    };\n\n    onClickUpgrade = () => {\n        if (this.props.can_upgrade_to === 'svg') {\n            this.props.openRealAccountSignup();\n        } else {\n            window.open(urlFor('new_account/maltainvestws', { legacy: true }));\n        }\n    };\n\n    isDemo = account => /^demo/.test(account.group);\n\n    isReal = account => !this.isDemo(account);\n\n    getRemainingAccounts = existing_mt5_groups => {\n        const mt5_config = [\n            {\n                account_types: ['svg'],\n                icon: 'Synthetic',\n                title: localize('Synthetic'),\n                type: 'synthetic',\n            },\n            {\n                // TODO: [remove-standard-advanced] remove standard when API groups are updated\n                account_types: ['vanuatu', 'svg_standard', 'svg_financial'],\n                icon: 'Financial',\n                title: localize('Financial'),\n                type: 'financial',\n            },\n            {\n                account_types: ['labuan'],\n                icon: 'Financial STP',\n                title: localize('Financial STP'),\n                type: 'financial_stp',\n            },\n        ];\n\n        existing_mt5_groups.forEach(group => {\n            const type = group.split(/[demo|real]_/)[1];\n            const index_to_remove = mt5_config.findIndex(account => account.account_types.indexOf(type) > -1);\n            mt5_config.splice(index_to_remove, 1);\n        });\n\n        return mt5_config;\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n        this.props.updateMt5LoginList();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    async doSwitch(loginid) {\n        this.props.toggleAccountsDialog();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.switchAccount(loginid);\n    }\n\n    get is_real_account_tab() {\n        // Real accounts is always the first tab index based on design\n        return this.state.active_tab_index === 0;\n    }\n\n    get sorted_account_list() {\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        return this.props.account_list.slice().sort((a, b) => {\n            const a_currency = this.props.accounts[a.loginid].currency;\n            const b_currency = this.props.accounts[b.loginid].currency;\n            const a_is_crypto = isCryptocurrency(a_currency);\n            const b_is_crypto = isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n    }\n\n    get sorted_mt5_list() {\n        // for MT5, synthetic, financial, financial stp\n        return this.props.mt5_login_list.slice().sort((a, b) => {\n            if (/demo/.test(a.group) && !/demo/.test(b.group)) {\n                return 1;\n            }\n            if (/demo/.test(b.group) && !/demo/.test(a.group)) {\n                return -1;\n            }\n            if (/svg$/.test(a.group)) {\n                return -1;\n            }\n            // TODO: [remove-standard-advanced] remove standard when API groups are updated\n            if (/vanuatu|svg_(standard|financial)/.test(a.group)) {\n                return /svg$/.test(b.group) ? 1 : -1;\n            }\n            return 1;\n        });\n    }\n\n    get demo_mt5() {\n        return this.sorted_mt5_list.filter(this.isDemo);\n    }\n\n    get remaining_demo_mt5() {\n        const existing_demo_mt5_groups = Object.keys(this.demo_mt5).map(account => this.demo_mt5[account].group);\n        return this.getRemainingAccounts(existing_demo_mt5_groups);\n    }\n\n    get real_mt5() {\n        return this.sorted_mt5_list.filter(this.isReal);\n    }\n\n    get remaining_real_mt5() {\n        const existing_real_mt5_groups = Object.keys(this.real_mt5).map(account => this.real_mt5[account].group);\n        return this.getRemainingAccounts(existing_real_mt5_groups);\n    }\n\n    get has_set_currency() {\n        return this.props.account_list.filter(account => !account.is_virtual).some(account => account.title !== 'Real');\n    }\n\n    get can_upgrade() {\n        return !!(this.props.is_virtual && this.props.can_upgrade_to);\n    }\n\n    get can_open_multi() {\n        return !!(!this.props.is_virtual && this.props.available_crypto_currencies.length > 0);\n    }\n\n    get total_demo_assets() {\n        const vrtc_loginid = this.props.account_list.find(account => account.is_virtual).loginid;\n        const vrtc_balance = this.props.accounts[vrtc_loginid] ? this.props.accounts[vrtc_loginid].balance : 0;\n        const mt5_demo_total = this.props.mt5_login_list\n            .filter(account => /^demo/.test(account.group))\n            .reduce(\n                (total, account) => {\n                    total.balance += account.balance;\n                    return total;\n                },\n                { balance: 0 }\n            );\n        return Array.isArray(this.props.mt5_login_list) ? mt5_demo_total.balance + vrtc_balance : vrtc_balance;\n    }\n\n    get total_real_assets() {\n        return this.props.obj_total_balance.amount_real + this.props.obj_total_balance.amount_mt5;\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n\n        const total_assets_message_demo = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 demo accounts.')\n            : localize('Total assets in your Deriv demo accounts.');\n\n        const total_assets_message_real = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 real accounts.')\n            : localize('Total assets in your Deriv real accounts.');\n\n        const total_assets_message = this.is_real_account_tab ? total_assets_message_real : total_assets_message_demo;\n\n        const demo_accounts = (\n            <div className='acc-switcher__list-wrapper'>\n                <AccountWrapper\n                    header={<Localize i18n_default_text='Deriv Accounts' />}\n                    is_visible={this.state.is_demo_deriv_visible}\n                    toggleVisibility={() => {\n                        this.toggleVisibility('demo_deriv');\n                    }}\n                >\n                    <div className='acc-switcher__accounts'>\n                        {this.sorted_account_list\n                            .filter(account => account.is_virtual)\n                            .map(account => (\n                                <AccountList\n                                    key={account.loginid}\n                                    balance={this.props.accounts[account.loginid].balance}\n                                    currency={this.props.accounts[account.loginid].currency}\n                                    currency_icon={`IcCurrency-${account.icon}`}\n                                    display_type={'currency'}\n                                    has_balance={'balance' in this.props.accounts[account.loginid]}\n                                    is_disabled={account.is_disabled}\n                                    is_virtual={account.is_virtual}\n                                    loginid={account.loginid}\n                                    onClickAccount={\n                                        account.is_disabled ? undefined : this.doSwitch.bind(this, account.loginid)\n                                    }\n                                    selected_loginid={this.props.account_loginid}\n                                />\n                            ))}\n                    </div>\n                </AccountWrapper>\n                {this.props.is_mt5_allowed && (\n                    <React.Fragment>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={<Localize i18n_default_text='DMT5 Accounts' />}\n                            is_visible={this.state.is_demo_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('demo_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {!!this.demo_mt5.length && (\n                                        <div className='acc-switcher__accounts'>\n                                            {this.demo_mt5.map(account => (\n                                                <AccountList\n                                                    key={account.login}\n                                                    account_type={account.group}\n                                                    balance={account.balance}\n                                                    currency={account.currency}\n                                                    currency_icon={`IcMt5-${getMT5AccountDisplay(account.group)}`}\n                                                    has_balance={'balance' in account}\n                                                    is_virtual\n                                                    loginid={account.display_login}\n                                                    onClickAccount={this.redirectToMt5Demo}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                    {this.remaining_demo_mt5.map(account => (\n                                        <div key={account.title} className='acc-switcher__new-account'>\n                                            <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                            <span className='acc-switcher__new-account-text'>{account.title}</span>\n                                            <Button\n                                                onClick={() => this.openMt5DemoAccount(account.type)}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n\n        const real_accounts = (\n            <div className='acc-switcher__list-wrapper' onMouseEnter={this.onListEnter} onMouseLeave={this.onListLeave}>\n                <React.Fragment>\n                    <AccountWrapper\n                        header={<Localize i18n_default_text='Deriv Accounts' />}\n                        is_visible={this.state.is_real_deriv_visible}\n                        toggleVisibility={() => {\n                            this.toggleVisibility('real_deriv');\n                        }}\n                    >\n                        <div className='acc-switcher__accounts'>\n                            {this.sorted_account_list\n                                .filter(account => !account.is_virtual)\n                                .map(account => (\n                                    <AccountList\n                                        key={account.loginid}\n                                        balance={this.props.accounts[account.loginid].balance}\n                                        currency={this.props.accounts[account.loginid].currency}\n                                        currency_icon={`IcCurrency-${account.icon}`}\n                                        display_type={'currency'}\n                                        has_balance={'balance' in this.props.accounts[account.loginid]}\n                                        is_disabled={account.is_disabled}\n                                        is_virtual={account.is_virtual}\n                                        loginid={account.loginid}\n                                        onClickAccount={\n                                            account.is_disabled ? undefined : this.doSwitch.bind(this, account.loginid)\n                                        }\n                                        selected_loginid={this.props.account_loginid}\n                                    />\n                                ))}\n                        </div>\n                        {this.can_upgrade && (\n                            <div className='acc-switcher__new-account'>\n                                <Icon icon='IcDeriv' size={24} />\n                                <span className='acc-switcher__new-account-text'>{localize('Deriv account')}</span>\n                                <Button\n                                    onClick={this.onClickUpgrade}\n                                    className='acc-switcher__new-account-btn'\n                                    secondary\n                                    small\n                                >\n                                    {localize('Add')}\n                                </Button>\n                            </div>\n                        )}\n                        {!this.can_upgrade &&\n                            (this.can_open_multi || this.props.can_change_fiat_currency || !this.has_set_currency) && (\n                                <Button\n                                    className='acc-switcher__btn'\n                                    secondary\n                                    onClick={\n                                        this.has_set_currency\n                                            ? this.props.openRealAccountSignup\n                                            : this.setAccountCurrency\n                                    }\n                                >\n                                    {this.can_open_multi\n                                        ? localize('Add or manage account')\n                                        : localize('Manage account')}\n                                </Button>\n                            )}\n                    </AccountWrapper>\n                </React.Fragment>\n                {this.props.is_mt5_allowed && (\n                    <React.Fragment>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={<Localize i18n_default_text='DMT5 Accounts' />}\n                            is_visible={this.state.is_real_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('real_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {!!this.real_mt5.length && (\n                                        <div className='acc-switcher__accounts'>\n                                            {this.real_mt5.map(account => (\n                                                <AccountList\n                                                    key={account.login}\n                                                    account_type={account.group}\n                                                    balance={account.balance}\n                                                    currency={account.currency}\n                                                    currency_icon={`IcMt5-${getMT5AccountDisplay(account.group)}`}\n                                                    has_balance={'balance' in account}\n                                                    loginid={account.display_login}\n                                                    onClickAccount={this.redirectToMt5Real}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                    {this.remaining_real_mt5.map(account => (\n                                        <div key={account.title} className='acc-switcher__new-account'>\n                                            <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                            <span className='acc-switcher__new-account-text'>{account.title}</span>\n                                            <Button\n                                                onClick={() => this.openMt5RealAccount(account.type)}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                                is_disabled={\n                                                    !this.props.has_any_real_account ||\n                                                    (account.type === 'financial_stp' &&\n                                                        this.props.is_pending_authentication)\n                                                }\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef}>\n                <Tabs\n                    active_index={this.state.active_tab_index}\n                    className='acc-switcher__list-tabs'\n                    onTabItemClick={this.updateAccountTabIndex}\n                    top\n                >\n                    {/* TODO: De-couple and refactor demo and real accounts groups\n                        into a single reusable AccountListItem component */}\n                    <div label={localize('Real')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars height='354px'>{real_accounts}</ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='204px'>\n                                {real_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                    <div label={localize('Demo')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars height='354px'>{demo_accounts}</ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='204px'>\n                                {demo_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                </Tabs>\n                <div\n                    className={classNames('acc-switcher__separator', {\n                        'acc-switcher__separator--auto-margin': this.props.is_mobile,\n                    })}\n                />\n                <div className='acc-switcher__total'>\n                    <span>\n                        <Localize i18n_default_text='Total assets' />\n                    </span>\n                    <span className='acc-switcher__balance'>\n                        <Money\n                            currency={this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD'}\n                            amount={formatMoney(\n                                this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD',\n                                this.is_real_account_tab ? this.total_real_assets : this.total_demo_assets,\n                                true\n                            )}\n                            should_format={false}\n                        />\n                    </span>\n                </div>\n                <div className='acc-switcher__total-subtitle'>\n                    <span>{total_assets_message}</span>\n                </div>\n                <div className='acc-switcher__separator' />\n                <div id='dt_logout_button' className='acc-switcher__logout'>\n                    <span className='acc-switcher__logout-text' onClick={this.handleLogout}>\n                        {localize('Log out')}\n                    </span>\n                    <Icon\n                        icon='IcLogout'\n                        className='acc-switcher__logout-icon drawer__icon'\n                        onClick={this.handleLogout}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    available_crypto_currencies: PropTypes.array,\n    account_list: PropTypes.array,\n    account_loginid: PropTypes.string,\n    accounts: PropTypes.object,\n    can_change_fiat_currency: PropTypes.bool,\n    can_upgrade_to: PropTypes.string,\n    has_any_real_account: PropTypes.bool,\n    is_loading_mt5: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_mt5_allowed: PropTypes.bool,\n    is_pending_authentication: PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    mt5_login_list: PropTypes.array,\n    obj_total_balance: PropTypes.object,\n    openRealAccountSignup: PropTypes.func,\n    switchAccount: PropTypes.func,\n    toggleAccountsDialog: PropTypes.func,\n    togglePositionsDrawer: PropTypes.func,\n    toggleSetCurrencyModal: PropTypes.func,\n    updateMt5LoginList: PropTypes.func,\n};\n\nconst account_switcher = withRouter(\n    connect(({ client, common, ui }) => ({\n        available_crypto_currencies: client.available_crypto_currencies,\n        account_loginid: client.loginid,\n        accounts: client.accounts,\n        can_change_fiat_currency: client.can_change_fiat_currency,\n        account_list: client.account_list,\n        can_upgrade_to: client.can_upgrade_to,\n        is_loading_mt5: client.is_populating_mt5_account_list,\n        is_logged_in: client.is_logged_in,\n        is_mt5_allowed: client.is_mt5_allowed,\n        is_pending_authentication: client.is_pending_authentication,\n        is_virtual: client.is_virtual,\n        has_any_real_account: client.has_any_real_account,\n        mt5_login_list: client.mt5_login_list,\n        obj_total_balance: client.obj_total_balance,\n        switchAccount: client.switchAccount,\n        logoutClient: client.logout,\n        updateMt5LoginList: client.updateMt5LoginList,\n        routeBackInApp: common.routeBackInApp,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        toggleAccountsDialog: ui.toggleAccountsDialog,\n        togglePositionsDrawer: ui.togglePositionsDrawer,\n        toggleSetCurrencyModal: ui.toggleSetCurrencyModal,\n    }))(AccountSwitcher)\n);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Div100vhContainer, Modal } from '@deriv/components';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountSwitcherMobile = props => {\n    const { disableApp, enableApp, is_visible, is_upgrade_enabled, toggle } = props;\n    return (\n        <Modal\n            id='dt_account_switcher_modal'\n            className='accounts-switcher'\n            enableApp={enableApp}\n            is_open={is_visible}\n            is_vertical_top\n            disableApp={disableApp}\n            has_close_icon={false}\n            toggleModal={toggle}\n            height='auto'\n            width='calc(100vw - 32px)'\n        >\n            <Div100vhContainer\n                className={classNames('acc-switcher__wrapper', 'acc-switcher__wrapper--is-mobile')}\n                max_autoheight_offset='48px'\n            >\n                <AccountSwitcher is_mobile is_visible={true} toggle={toggle} is_upgrade_enabled={is_upgrade_enabled} />\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nAccountSwitcherMobile.propTypes = {\n    children: PropTypes.any,\n    onClose: PropTypes.func,\n    title: PropTypes.string,\n    visible: PropTypes.bool,\n    wrapperClassName: PropTypes.string,\n};\n\nexport default AccountSwitcherMobile;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, Icon, MobileWrapper, Popover } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport AccountSwitcherMobile from 'App/Containers/AccountSwitcher/account-switcher-mobile.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountInfoWrapper = ({ is_disabled, disabled_message, children }) =>\n    is_disabled && disabled_message ? (\n        <Popover alignment='bottom' message={disabled_message} zIndex={99999}>\n            {children}\n        </Popover>\n    ) : (\n        <React.Fragment>{children}</React.Fragment>\n    );\n\nconst AccountInfo = ({\n    acc_switcher_disabled_message,\n    balance,\n    currency,\n    disableApp,\n    enableApp,\n    is_dialog_on,\n    is_virtual,\n    toggleDialog,\n    is_disabled,\n}) => (\n    <div className='acc-info__wrapper'>\n        <div className='acc-info__separator' />\n        <AccountInfoWrapper is_disabled={is_disabled} disabled_message={acc_switcher_disabled_message}>\n            <div\n                className={classNames('acc-info', {\n                    'acc-info--show': is_dialog_on,\n                    'acc-info--is-virtual': is_virtual,\n                    'acc-info--is-disabled': is_disabled,\n                })}\n                onClick={is_disabled ? undefined : toggleDialog}\n            >\n                <span className='acc-info__id'>\n                    <DesktopWrapper>\n                        <Icon\n                            icon={`IcCurrency-${is_virtual ? 'virtual' : currency || 'Unknown'}`}\n                            className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n                            size={24}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        {(is_virtual || currency) && (\n                            <Icon\n                                icon={`IcCurrency-${is_virtual ? 'virtual' : currency}`}\n                                className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n                                size={24}\n                            />\n                        )}\n                    </MobileWrapper>\n                </span>\n                {typeof balance !== 'undefined' && (\n                    <p\n                        className={classNames('acc-info__balance', {\n                            'acc-info__balance--no-currency': !currency && !is_virtual,\n                        })}\n                    >\n                        <span\n                            className={classNames('symbols', {\n                                [`symbols--${(currency || '').toLowerCase()}`]: currency,\n                            })}\n                        />\n                        {!currency && <Localize i18n_default_text='No currency assigned' />}\n                        {currency && balance}\n                    </p>\n                )}\n                {is_disabled ? (\n                    <Icon icon='IcLock' />\n                ) : (\n                    <Icon icon='IcChevronDownBold' className='acc-info__select-arrow' />\n                )}\n            </div>\n        </AccountInfoWrapper>\n        <MobileWrapper>\n            <AccountSwitcherMobile\n                is_visible={is_dialog_on}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                toggle={toggleDialog}\n            />\n        </MobileWrapper>\n        <DesktopWrapper>\n            <CSSTransition\n                in={is_dialog_on}\n                timeout={200}\n                classNames={{\n                    enter: 'acc-switcher__wrapper--enter',\n                    enterDone: 'acc-switcher__wrapper--enter-done',\n                    exit: 'acc-switcher__wrapper--exit',\n                }}\n                unmountOnExit\n            >\n                <div className='acc-switcher__wrapper'>\n                    <AccountSwitcher is_visible={is_dialog_on} toggle={toggleDialog} />\n                </div>\n            </CSSTransition>\n        </DesktopWrapper>\n    </div>\n);\n\nAccountInfo.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.string,\n    currency: PropTypes.string,\n    is_dialog_on: PropTypes.bool,\n    is_disabled: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    loginid: PropTypes.string,\n    toggleDialog: PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}