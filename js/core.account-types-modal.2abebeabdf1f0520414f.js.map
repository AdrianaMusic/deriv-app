{"version":3,"sources":["webpack:///./App/Containers/AccountTypesModal/account-card.jsx","webpack:///./App/Containers/AccountTypesModal/account-types-modal.jsx"],"names":["MainCard","button_text","buttonOnClick","platforms","is_button_disabled","items","subtitle","title","className","Object","keys","length","entries","map","index","label","value","key","platform","href","path","target","rel","icon","size","name","text","is_disabled","onClick","has_effect","primary","AccountCard","classNames","propTypes","PropTypes","string","func","object","arrayOf","getTargetLoginid","accounts","target_landing_company_shortcode","reduce","acc","loginid","landing_company_shortcode","Box","description","footer_text","icons","cards","array","FinancialBox","derivOnClick","mt5OnClick","has_maltainvest_account","add_account_label","localize","getDerivComLink","SyntheticBox","AccountTypesModal","closeModal","props","toggleAccountTypesModal","redirectToMt5","account_type","history","push","routes","mt5","redirectToMt5Real","is_logged_in","is_mt5_allowed","window","open","urlFor","legacy","createRealAccount","openRealAccountSignup","width","is_open","this","is_account_types_modal_visible","toggleModal","has_close_icon","is_dismissible","is_bypassed","isMobile","autohide","height_offset","isDesktop","has_iom_account","switchAccount","standpoint","gaming_company","financial_company","React","has_any_real_account","bool","is_virtual","residence","withRouter","connect","ui","client","can_upgrade","can_upgrade_to","should_have_real_account"],"mappings":"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","file":"js/core.account-types-modal.2abebeabdf1f0520414f.js","sourcesContent":["import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Icon } from '@deriv/components';\nimport 'Sass/app/modules/account-types.scss';\n\nconst MainCard = ({ button_text, buttonOnClick, platforms, is_button_disabled, items, subtitle, title }) => {\n    return (\n        <div className='account-card__main'>\n            <h3 className='account-card__main-title'>{title}</h3>\n            <h4 className='account-card__main-subtitle'>{subtitle}</h4>\n            {Object.keys(items).length && (\n                <div className='account-card__main-table-container'>\n                    <table className='account-card__main-items'>\n                        <tbody>\n                            {Object.entries(items).map(([label, value], index) => {\n                                return (\n                                    <tr key={index} className='account-card__main-item'>\n                                        <td className='account-card__main-item-label'>{label}</td>\n                                        <td className='account-card__main-item-value'>{value}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            )}\n            {platforms && (\n                <div className='account-card__platforms'>\n                    <p className='account-card__platforms-title'>Available on</p>\n                    <div className='account-card__platforms-icons'>\n                        {platforms.map((platform, index) => {\n                            return (\n                                <div key={index} className='account-card__platforms-icon'>\n                                    <a href={platform.path} target='_blank' rel='noopener noreferrer'>\n                                        <Icon icon={platform.icon} size={24} />\n                                    </a>\n\n                                    <p className='account-card__platforms-name'>{platform.name}</p>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            )}\n            <Button\n                className='account-card__main-button'\n                text={button_text}\n                is_disabled={is_button_disabled}\n                onClick={buttonOnClick}\n                has_effect\n                primary\n            />\n        </div>\n    );\n};\n\nconst AccountCard = ({ button_text, buttonOnClick, items, platforms, subtitle, title, is_button_disabled }) => {\n    return (\n        <div className='account-card'>\n            <div className={classNames('account-card__wrapper')}>\n                <MainCard\n                    items={items}\n                    subtitle={subtitle}\n                    title={title}\n                    is_button_disabled={is_button_disabled}\n                    platforms={platforms}\n                    button_text={button_text}\n                    buttonOnClick={buttonOnClick}\n                />\n            </div>\n        </div>\n    );\n};\n\nAccountCard.propTypes = {\n    button_text: PropTypes.string,\n    buttonOnClick: PropTypes.func,\n    items: PropTypes.object,\n    platforms: PropTypes.arrayOf(PropTypes.object),\n    subtitle: PropTypes.string,\n    title: PropTypes.string,\n};\n\nexport default AccountCard;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport {\n    MobileWrapper,\n    MobileCarousel,\n    DesktopWrapper,\n    Div100vhContainer,\n    Icon,\n    Modal,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport { isDesktop, isMobile, routes, getDerivComLink, urlFor } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport AccountCard from './account-card.jsx';\n\nimport 'Sass/app/modules/account-types.scss';\n\nconst getTargetLoginid = (accounts, target_landing_company_shortcode) =>\n    Object.entries(accounts).reduce((acc, [loginid, { landing_company_shortcode }]) => {\n        if (landing_company_shortcode === target_landing_company_shortcode) {\n            // eslint-disable-next-line no-param-reassign\n            acc += loginid;\n        }\n        return acc;\n    }, '');\n\nconst Box = ({ title, description, footer_text, icons, cards }) => {\n    return (\n        <div className='account-types__box'>\n            <div className='account-types__box-left'>\n                <h2 className='account-types__box-title'>{title}</h2>\n                <p className='account-types__box-description'>{description}</p>\n                {footer_text && <p className='account-types__box-footer'>{footer_text}</p>}\n                <div className='account-types__box-icons'>\n                    {icons.map((icon, index) => {\n                        return <Icon className='account-types__box-icon' icon={icon} key={index} />;\n                    })}\n                </div>\n            </div>\n            <MobileWrapper>\n                <MobileCarousel>{cards}</MobileCarousel>\n            </MobileWrapper>\n            <DesktopWrapper>{cards}</DesktopWrapper>\n        </div>\n    );\n};\n\nBox.propTypes = {\n    title: PropTypes.string,\n    description: PropTypes.string,\n    footer_text: PropTypes.string,\n    icons: PropTypes.arrayOf(PropTypes.string),\n    cards: PropTypes.array,\n};\n\nconst FinancialBox = ({ derivOnClick, mt5OnClick, has_maltainvest_account, add_account_label }) => {\n    return (\n        <Box\n            title={localize('Financial')}\n            description={localize(\n                'Trade commodities, cryptocurrencies, major and minor currency pairs with high leverage and variable spreads for maximum flexibility.'\n            )}\n            footer_text={localize('Over 50 tradable financial assets')}\n            icons={['IcUnderlyingFRXNZDJPY', 'IcUnderlyingOTC_NDX', 'IcUnderlyingFRXXAUUSD', 'IcUnderlyingFRXBROUSD']}\n            cards={[\n                <AccountCard\n                    key={0}\n                    title={localize('Trade Options')}\n                    subtitle={localize('with a Deriv Financial account')}\n                    button_text={has_maltainvest_account ? add_account_label[0] : add_account_label[1]}\n                    buttonOnClick={derivOnClick}\n                    items={{\n                        [localize('Multiplier')]: localize('Up to X1000'),\n                        [localize('Stop loss')]: localize('Flexible'),\n                        [localize('Take profit')]: localize('Flexible'),\n                        [localize('Cancel trade')]: localize('Allowed'),\n                        [localize('Currency')]: localize('USD/GBP/EUR'),\n                    }}\n                    platforms={[\n                        {\n                            icon: 'IcBrandDtrader',\n                            name: 'DTrader',\n                            path: getDerivComLink('/dtrader'),\n                        },\n                        {\n                            icon: 'IcBrandDbot',\n                            name: 'DBot',\n                            path: getDerivComLink('/dbot'),\n                        },\n                        {\n                            icon: 'IcBrandSmarttrader',\n                            name: 'SmartTrader',\n                            path: 'https://smarttrader.deriv.app/en/trading.html',\n                        },\n                    ]}\n                >\n                    <p className='account-card__description-text'>\n                        {localize(\n                            'Options are contracts that give the owner the right to buy or sell an asset at a fixed price for a specific period of time. That period could be as short as a day or as long as a couple of years, depending on the type of option contract.'\n                        )}\n                    </p>\n                    <p className='account-card__description-text--small'>{localize('Supported platform:')}</p>\n                    <p className='account-card__description-text--small'>{localize('DTrader and Dbot')}</p>\n                </AccountCard>,\n                <AccountCard\n                    key={1}\n                    title={localize('Trade on Margin')}\n                    subtitle={localize('with a DMT5 Financial account')}\n                    button_text={!has_maltainvest_account ? add_account_label[2] : add_account_label[0]}\n                    buttonOnClick={mt5OnClick}\n                    is_button_disabled={!has_maltainvest_account}\n                    items={{\n                        [localize('Leverage')]: localize('Up to 1:1000'),\n                        [localize('Margin call')]: localize('150%'),\n                        [localize('Stop out level')]: localize('75%'),\n                        [localize('Currency')]: localize('USD'),\n                    }}\n                    platforms={[\n                        {\n                            icon: 'IcBrandDMT5',\n                            name: 'MetaTrader 5',\n                            path: getDerivComLink('/dmt5'),\n                        },\n                    ]}\n                >\n                    <p className='account-card__description-text'>\n                        {localize(\n                            'Margin trading is a method of trading assets using funds provided by Deriv.com. It allow you to access greater sums of capital to leverage your positions and realize larger profits on successful trades.'\n                        )}\n                    </p>\n                    <p className='account-card__description-text--small'>{localize('Supported platform:')} </p>\n                    <p className='account-card__description-text--small'>\n                        {localize('DMT5')} <br />\n                    </p>\n                </AccountCard>,\n            ]}\n        />\n    );\n};\n\nconst SyntheticBox = ({ derivOnClick, add_account_label }) => {\n    return (\n        <Box\n            title={localize('Synthetic')}\n            description={localize(\n                'Trade synthetic indices that are available 24/7, have constant volatility, and are free of market and liquidity risks.'\n            )}\n            icons={[\n                'IcUnderlying1HZ10V',\n                'IcUnderlying1HZ100V',\n                'IcUnderlyingR_10',\n                'IcUnderlyingR_25',\n                'IcUnderlyingR_50',\n                'IcUnderlyingR_75',\n                'IcUnderlyingR_100',\n            ]}\n            cards={[\n                <AccountCard\n                    key={0}\n                    title={localize('Trade Options')}\n                    subtitle={localize('with a Deriv Synthetic account')}\n                    button_text={add_account_label}\n                    buttonOnClick={derivOnClick}\n                    items={{\n                        [localize('Trade type')]: localize('10+'),\n                        [localize('Min duration')]: localize('1 tick'),\n                        [localize('Max duration')]: localize('365 days'),\n                        [localize('Availability')]: localize('24/7'),\n                        [localize('Currency')]: localize('USD/GBP/EUR'),\n                    }}\n                    platforms={[\n                        {\n                            icon: 'IcBrandDtrader',\n                            name: 'DTrader',\n                            path: getDerivComLink('dtrader'),\n                        },\n                        {\n                            icon: 'IcBrandDbot',\n                            name: 'DBot',\n                            path: getDerivComLink('dbot'),\n                        },\n                        {\n                            icon: 'IcBrandSmarttrader',\n                            name: 'SmartTrader',\n                            path: 'https://smarttrader.deriv.app',\n                        },\n                    ]}\n                >\n                    <p className='account-card__description-text'>\n                        {localize(\n                            'Options are contracts that give the owner the right to buy or sell an asset at a fixed price for a specific period of time. That period could be as short as a day or as long as a couple of years, depending on the type of option contract.'\n                        )}\n                    </p>\n                    <p className='account-card__description-text--small'>{localize('Supported platform:')}</p>\n                    <p className='account-card__description-text--small'>{localize('DTrader and Dbot')}</p>\n                </AccountCard>,\n            ]}\n        />\n    );\n};\n\nclass AccountTypesModal extends React.Component {\n    closeModal = () => {\n        this.props.toggleAccountTypesModal(false);\n    };\n\n    redirectToMt5 = account_type => {\n        this.closeModal();\n        this.props.history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    redirectToMt5Real = () => {\n        this.closeModal();\n        if (!this.props.is_logged_in || this.props.is_mt5_allowed) {\n            this.redirectToMt5('real');\n        } else {\n            window.open(urlFor('user/metatrader', { legacy: true }));\n        }\n    };\n\n    createRealAccount = target => {\n        this.closeModal();\n        this.props.openRealAccountSignup(target);\n    };\n\n    render() {\n        return (\n            <Modal\n                title={localize('Account types')}\n                width='904px'\n                className='account-types'\n                is_open={this.props.is_account_types_modal_visible}\n                toggleModal={this.closeModal}\n                has_close_icon={this.props.is_dismissible}\n            >\n                <ThemedScrollbars is_bypassed={isMobile()} autohide={false}>\n                    <Div100vhContainer\n                        height_offset='120px'\n                        is_disabled={isDesktop()}\n                        className='account-types__container'\n                    >\n                        <div className='account-types'>\n                            <p className='account-types__intro'>\n                                {localize('Choose an account that suits your needs.')}\n                            </p>\n                            <div>\n                                <SyntheticBox\n                                    derivOnClick={() => {\n                                        if (this.props.has_iom_account) {\n                                            if (this.props.landing_company_shortcode !== 'iom') {\n                                                this.props.switchAccount(getTargetLoginid(this.props.accounts, 'iom'));\n                                            }\n                                            this.closeModal();\n                                        } else {\n                                            this.createRealAccount(this.props.standpoint.gaming_company);\n                                        }\n                                    }}\n                                    add_account_label={\n                                        this.props.has_iom_account\n                                            ? localize('Trade with this account')\n                                            : localize('Add this real account')\n                                    }\n                                />\n                                <FinancialBox\n                                    derivOnClick={() => {\n                                        if (this.props.has_maltainvest_account) {\n                                            if (this.props.landing_company_shortcode !== 'maltainvest') {\n                                                this.props.switchAccount(\n                                                    getTargetLoginid(this.props.accounts, 'maltainvest')\n                                                );\n                                            }\n                                            this.closeModal();\n                                        } else {\n                                            this.createRealAccount(this.props.standpoint.financial_company);\n                                        }\n                                    }}\n                                    mt5OnClick={this.redirectToMt5Real}\n                                    has_maltainvest_account={this.props.has_maltainvest_account}\n                                    add_account_label={[\n                                        localize('Trade with this account'),\n                                        localize('Add this real account'),\n                                        localize('Deriv Financial required'),\n                                    ]}\n                                />\n                            </div>\n                        </div>\n                    </Div100vhContainer>\n                </ThemedScrollbars>\n            </Modal>\n        );\n    }\n}\n\nAccountTypesModal.propTypes = {\n    has_any_real_account: PropTypes.bool,\n    is_account_types_modal_visible: PropTypes.bool,\n    is_dismissible: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_mt5_allowed: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    residence: PropTypes.string,\n    standpoint: PropTypes.object,\n    toggleAccountTypesModal: PropTypes.func,\n};\n\nexport default withRouter(\n    connect(({ ui, client }) => ({\n        can_upgrade: client.can_upgrade,\n        can_upgrade_to: client.can_upgrade_to,\n        has_any_real_account: client.has_any_real_account,\n        is_account_types_modal_visible: ui.is_account_types_modal_visible,\n        accounts: client.accounts,\n        landing_company_shortcode: client.landing_company_shortcode,\n        has_iom_account: client.has_iom_account,\n        has_maltainvest_account: client.has_maltainvest_account,\n        is_dismissible: !client.should_have_real_account,\n        is_logged_in: client.is_logged_in,\n        is_mt5_allowed: client.is_mt5_allowed,\n        is_virtual: client.is_virtual,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        residence: client.residence,\n        standpoint: client.standpoint,\n        switchAccount: client.switchAccount,\n        toggleAccountTypesModal: ui.toggleAccountTypesModal,\n    }))(AccountTypesModal)\n);\n"],"sourceRoot":""}