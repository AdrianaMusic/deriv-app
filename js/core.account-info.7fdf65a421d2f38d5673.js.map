{"version":3,"sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher-account-list.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-account-wrapper.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-mobile.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["CurrencyDisplay","currency","is_eu","is_virtual","market_type","i18n_default_text","getCurrencyDisplayCode","AccountDisplay","account_type","getMT5AccountDisplay","AccountList","balance","currency_icon","display_type","has_balance","is_disabled","loginid","onClickAccount","selected_loginid","React","startsWith","localize","id","className","classNames","onClick","undefined","icon","size","amount","formatMoney","should_format","AccountWrapper","children","header","is_visible","toggleVisibility","propTypes","PropTypes","node","oneOfType","object","string","bool","func","AccountSwitcher","props","section","setState","state","setWrapperRef","wrapper_ref","updateAccountTabIndex","index","active_tab_index","handleClickOutside","event","accounts_toggle_btn","target","classList","contains","closeAccountsDialog","handleLogout","is_positions_drawer_on","togglePositionsDrawer","logoutClient","then","routeBackInApp","history","toggleAccountsDialog","redirectToMt5","push","routes","mt5","openMt5RealAccount","has_required_account","has_malta_account","has_maltainvest_account","is_eu_enabled","openAccountNeededModal","standpoint","gaming_company","financial_company","sessionStorage","setItem","redirectToMt5Real","is_logged_in","is_mt5_allowed","window","open","urlFor","legacy","onListEnter","has_autohide","onListLeave","openMt5DemoAccount","redirectToMt5Demo","setAccountCurrency","toggleSetCurrencyModal","showAccountTypesModal","toggleAccountTypesModal","onClickUpgrade","account","openRealAccountSignup","isDemo","test","group","isReal","getRemainingAccounts","existing_mt5_groups","mt5_config","account_types","title","type","api_key","forEach","split","index_to_remove","findIndex","indexOf","splice","filter","config_item","company","landing_companies","is_demo_deriv_visible","is_demo_dmt5_visible","is_real_deriv_visible","is_real_dmt5_visible","document","addEventListener","this","updateMt5LoginList","removeEventListener","account_loginid","switchAccount","total_assets_message_demo","total_assets_message_real","total_assets_message","is_real_account_tab","demo_accounts","sorted_account_list","map","key","accounts","doSwitch","bind","is_loading_mt5","speed","demo_mt5","length","login","getMT5Account","display_login","remaining_demo_mt5","secondary","small","real_accounts","onMouseEnter","onMouseLeave","remaining_real_accounts","getAccountTitle","can_upgrade","can_open_multi","can_change_fiat_currency","has_set_currency","real_mt5","remaining_real_mt5","has_any_real_account","is_pending_authentication","ref","active_index","onTabItemClick","top","label","height","max_autoheight_offset","is_mobile","obj_total_balance","total_real_assets","total_demo_assets","is_uk","has_effect","text","account_list","slice","sort","a","b","a_currency","b_currency","a_is_crypto","isCryptocurrency","b_is_crypto","a_is_fiat","b_is_fiat","mt5_login_list","sorted_mt5_list","existing_demo_mt5_groups","Object","keys","existing_real_mt5_groups","upgradeable_landing_companies","some","can_upgrade_to","available_crypto_currencies","has_fiat","vrtc_loginid","find","vrtc_balance","mt5_demo_total","reduce","total","Array","isArray","amount_real","amount_mt5","array","account_switcher","withRouter","connect","client","common","ui","is_populating_mt5_account_list","logout","AccountSwitcherMobile","disableApp","enableApp","is_upgrade_enabled","toggle","is_open","is_vertical_top","has_close_icon","toggleModal","width","any","onClose","visible","wrapperClassName","AccountInfoWrapper","disabled_message","alignment","message","zIndex","AccountInfo","acc_switcher_disabled_message","is_dialog_on","toggleDialog","toLowerCase","in","timeout","enter","enterDone","exit","unmountOnExit"],"mappings":"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","file":"js/core.account-info.7fdf65a421d2f38d5673.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Money } from '@deriv/components';\nimport { formatMoney, getCurrencyDisplayCode, getMT5AccountDisplay } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\nconst AccountList = ({\n    account_type,\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    is_eu,\n    is_disabled,\n    is_virtual,\n    loginid,\n    onClickAccount,\n    selected_loginid,\n}) => {\n    const market_type = React.useMemo(() => {\n        if (loginid.startsWith('MX') || loginid.startsWith('MLT')) {\n            return localize('Synthetic');\n        } else if (loginid.startsWith('MF')) {\n            return localize('Financial');\n        }\n        return '';\n    }, [loginid]);\n\n    if (is_disabled && !currency) return null;\n\n    return (\n        <>\n            <div\n                id={`dt_${loginid}`}\n                className={classNames('acc-switcher__account', {\n                    'acc-switcher__account--selected': loginid === selected_loginid,\n                    'acc-switcher__account--disabled': is_disabled,\n                })}\n                onClick={is_disabled ? undefined : onClickAccount}\n            >\n                <span className='acc-switcher__id'>\n                    <Icon\n                        icon={currency ? currency_icon : 'IcCurrencyUnknown'}\n                        className={'acc-switcher__id-icon'}\n                        size={24}\n                    />\n                    <span>\n                        {display_type === 'currency' ? (\n                            <CurrencyDisplay\n                                is_virtual={is_virtual}\n                                currency={currency}\n                                is_eu={is_eu}\n                                market_type={market_type}\n                            />\n                        ) : (\n                            <AccountDisplay account_type={account_type} />\n                        )}\n                        <div className='acc-switcher__loginid-text'>{loginid}</div>\n                    </span>\n                    {has_balance && (\n                        <span className='acc-switcher__balance'>\n                            {currency && (\n                                <Money\n                                    currency={currency}\n                                    amount={formatMoney(currency, balance, true)}\n                                    should_format={false}\n                                />\n                            )}\n                        </span>\n                    )}\n                </span>\n            </div>\n        </>\n    );\n};\n\nconst CurrencyDisplay = ({ currency, is_eu, is_virtual, market_type }) => {\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n    if (!currency) {\n        return <Localize i18n_default_text='No currency assigned' />;\n    }\n    if (is_eu) {\n        return `${getCurrencyDisplayCode(currency)} ${market_type}`;\n    }\n    return getCurrencyDisplayCode(currency);\n};\n\nconst AccountDisplay = ({ account_type }) => <div>{getMT5AccountDisplay(account_type)}</div>;\n\nexport default AccountList;\n","import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@deriv/components';\n\nconst AccountWrapper = ({ children, header, is_visible, toggleVisibility }) => (\n    <React.Fragment>\n        <div className={classNames('acc-switcher', { 'acc-info--show': !is_visible })} onClick={toggleVisibility}>\n            <span className='acc-switcher__list-title'>{header}</span>\n            <Icon icon='IcChevronDown' className='acc-info__select-arrow acc-info__select-arrow--invert' />\n        </div>\n        {is_visible && <React.Fragment>{children}</React.Fragment>}\n    </React.Fragment>\n);\n\nAccountWrapper.propTypes = {\n    children: PropTypes.node,\n    header: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    is_visible: PropTypes.bool,\n    toggleVisibility: PropTypes.func,\n};\n\nexport default AccountWrapper;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport {\n    Button,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Icon,\n    Money,\n    Tabs,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport { urlFor, routes, isCryptocurrency, formatMoney, getMT5Account } from '@deriv/shared';\n\nimport { localize, Localize } from '@deriv/translations';\nimport { getAccountTitle } from 'App/Containers/RealAccountSignup/helpers/constants';\nimport { connect } from 'Stores/connect';\nimport { AccountsItemLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport AccountList from './account-switcher-account-list.jsx';\nimport AccountWrapper from './account-switcher-account-wrapper.jsx';\n\nclass AccountSwitcher extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active_tab_index: props.is_virtual ? 1 : 0,\n            is_demo_deriv_visible: true,\n            is_demo_dmt5_visible: true,\n            is_real_deriv_visible: true,\n            is_real_dmt5_visible: true,\n            has_autohide: true,\n        };\n    }\n\n    toggleVisibility = section => {\n        this.setState({ [`is_${section}_visible`]: !this.state[`is_${section}_visible`] });\n    };\n\n    setWrapperRef = node => {\n        this.wrapper_ref = node;\n    };\n\n    updateAccountTabIndex = index => {\n        this.setState({ active_tab_index: index });\n    };\n\n    handleClickOutside = event => {\n        const accounts_toggle_btn = !event.target.classList.contains('acc-info');\n        if (\n            this.wrapper_ref &&\n            !this.wrapper_ref.contains(event.target) &&\n            this.props.is_visible &&\n            accounts_toggle_btn\n        ) {\n            this.closeAccountsDialog();\n        }\n    };\n\n    handleLogout = () => {\n        this.closeAccountsDialog();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        this.props.logoutClient().then(() => {\n            this.props.routeBackInApp(this.props.history);\n        });\n    };\n\n    closeAccountsDialog = () => {\n        this.props.toggleAccountsDialog(false);\n    };\n\n    redirectToMt5 = account_type => {\n        this.closeAccountsDialog();\n        this.props.history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    openMt5RealAccount = account_type => {\n        const has_required_account =\n            account_type === 'synthetic' ? this.props.has_malta_account : this.props.has_maltainvest_account;\n\n        if (this.props.is_eu_enabled && this.props.is_eu && !has_required_account) {\n            // TODO [deriv-eu] remove is_eu_enabled check once EU is ready for production\n            this.closeAccountsDialog();\n            this.props.openAccountNeededModal(\n                account_type === 'synthetic'\n                    ? this.props.standpoint.gaming_company\n                    : this.props.standpoint.financial_company,\n                account_type === 'synthetic' ? localize('Deriv Synthetic') : localize('Deriv Financial'),\n                account_type === 'synthetic' ? localize('DMT5 Synthetic') : localize('DMT5 Financial')\n            );\n        } else {\n            sessionStorage.setItem('open_mt5_account_type', `real.${account_type}`);\n            this.redirectToMt5Real();\n        }\n    };\n\n    redirectToMt5Real = () => {\n        if (!this.props.is_logged_in || this.props.is_mt5_allowed) {\n            this.redirectToMt5('real');\n        } else {\n            window.open(urlFor('user/metatrader', { legacy: true }));\n        }\n    };\n\n    onListEnter = () => this.setState({ has_autohide: false });\n\n    onListLeave = () => this.setState({ has_autohide: true });\n\n    openMt5DemoAccount = account_type => {\n        sessionStorage.setItem('open_mt5_account_type', `demo.${account_type}`);\n        this.redirectToMt5Demo();\n    };\n\n    redirectToMt5Demo = () => {\n        this.redirectToMt5('demo');\n    };\n\n    setAccountCurrency = () => {\n        this.closeAccountsDialog();\n        this.props.toggleSetCurrencyModal();\n    };\n\n    showAccountTypesModal = () => {\n        this.closeAccountsDialog();\n        this.props.toggleAccountTypesModal(true);\n    };\n\n    onClickUpgrade = account => {\n        // TODO [deriv-eu] remove is_eu_enabled check once EU is ready for production\n        const is_account_signup_supported = this.props.is_eu ? this.props.is_eu_enabled : !this.props.is_eu;\n        if (is_account_signup_supported) {\n            this.props.openRealAccountSignup(account);\n        } else {\n            window.open(urlFor('user/accounts', { legacy: true })); // TODO [deriv-eu] Remove this before launching eu production\n        }\n    };\n\n    isDemo = account => /^demo/.test(account.group);\n\n    isReal = account => !this.isDemo(account);\n\n    getRemainingAccounts = existing_mt5_groups => {\n        const byAvailableCompanies = config_item => {\n            const [company, type] = config_item.api_key.split('.');\n            return !!this.props.landing_companies?.[company]?.[type];\n        };\n\n        const mt5_config = [\n            {\n                account_types: ['svg', 'malta'],\n                icon: 'Synthetic',\n                title: localize('Synthetic'),\n                type: 'synthetic',\n                api_key: 'mt_gaming_company.financial',\n            },\n            {\n                // TODO: [remove-standard-advanced] remove standard when API groups are updated\n                account_types: ['vanuatu', 'svg_standard', 'svg_financial', 'maltainvest_financial'],\n                icon: 'Financial',\n                title: localize('Financial'),\n                type: 'financial',\n                api_key: 'mt_financial_company.financial',\n            },\n            {\n                account_types: ['labuan'],\n                icon: 'Financial STP',\n                title: localize('Financial STP'),\n                type: 'financial_stp',\n                api_key: 'mt_financial_company.financial_stp',\n            },\n        ];\n\n        existing_mt5_groups.forEach(group => {\n            const type = group.split(/[demo|real]_/)[1];\n            const index_to_remove = mt5_config.findIndex(account => account.account_types.indexOf(type) > -1);\n            mt5_config.splice(index_to_remove, 1);\n        });\n\n        return mt5_config.filter(byAvailableCompanies);\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n        this.props.updateMt5LoginList();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    async doSwitch(loginid) {\n        this.closeAccountsDialog();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.switchAccount(loginid);\n    }\n\n    get is_real_account_tab() {\n        // Real accounts is always the first tab index based on design\n        return this.state.active_tab_index === 0;\n    }\n\n    get sorted_account_list() {\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        return this.props.account_list.slice().sort((a, b) => {\n            const a_currency = this.props.accounts[a.loginid].currency;\n            const b_currency = this.props.accounts[b.loginid].currency;\n            const a_is_crypto = isCryptocurrency(a_currency);\n            const b_is_crypto = isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n    }\n\n    get sorted_mt5_list() {\n        // for MT5, synthetic, financial, financial stp\n        return this.props.mt5_login_list.slice().sort((a, b) => {\n            if (/demo/.test(a.group) && !/demo/.test(b.group)) {\n                return 1;\n            }\n            if (/demo/.test(b.group) && !/demo/.test(a.group)) {\n                return -1;\n            }\n            if (/svg$/.test(a.group)) {\n                return -1;\n            }\n            // TODO: [remove-standard-advanced] remove standard when API groups are updated\n            if (/vanuatu|svg_(standard|financial)/.test(a.group)) {\n                return /svg$/.test(b.group) ? 1 : -1;\n            }\n            return 1;\n        });\n    }\n\n    get demo_mt5() {\n        return this.sorted_mt5_list.filter(this.isDemo);\n    }\n\n    get remaining_demo_mt5() {\n        const existing_demo_mt5_groups = Object.keys(this.demo_mt5).map(account => this.demo_mt5[account].group);\n        return this.getRemainingAccounts(existing_demo_mt5_groups);\n    }\n\n    get real_mt5() {\n        return this.sorted_mt5_list.filter(this.isReal);\n    }\n\n    get remaining_real_mt5() {\n        const existing_real_mt5_groups = Object.keys(this.real_mt5).map(account => this.real_mt5[account].group);\n        return this.getRemainingAccounts(existing_real_mt5_groups);\n    }\n\n    // SVG clients can't upgrade.\n    get remaining_real_accounts() {\n        return this.can_open_multi ? [] : this.props.upgradeable_landing_companies;\n    }\n\n    get has_set_currency() {\n        return this.props.account_list.filter(account => !account.is_virtual).some(account => account.title !== 'Real');\n    }\n\n    get can_upgrade() {\n        return !!(this.props.is_virtual && this.props.can_upgrade_to);\n    }\n\n    get can_open_multi() {\n        if (this.props.is_eu) return false;\n        if (this.props.available_crypto_currencies.length < 1 && !this.props.has_fiat) return true;\n        return !!(!this.props.is_virtual && this.props.available_crypto_currencies.length > 0);\n    }\n\n    get total_demo_assets() {\n        const vrtc_loginid = this.props.account_list.find(account => account.is_virtual).loginid;\n        const vrtc_balance = this.props.accounts[vrtc_loginid] ? this.props.accounts[vrtc_loginid].balance : 0;\n        const mt5_demo_total = this.props.mt5_login_list\n            .filter(account => /^demo/.test(account.group))\n            .reduce(\n                (total, account) => {\n                    total.balance += account.balance;\n                    return total;\n                },\n                { balance: 0 }\n            );\n        return Array.isArray(this.props.mt5_login_list) ? mt5_demo_total.balance + vrtc_balance : vrtc_balance;\n    }\n\n    get total_real_assets() {\n        return this.props.obj_total_balance.amount_real + this.props.obj_total_balance.amount_mt5;\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n\n        const total_assets_message_demo = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 demo accounts.')\n            : localize('Total assets in your Deriv demo accounts.');\n\n        const total_assets_message_real = this.props.is_mt5_allowed\n            ? localize('Total assets in your Deriv and DMT5 real accounts.')\n            : localize('Total assets in your Deriv real accounts.');\n\n        const total_assets_message = this.is_real_account_tab ? total_assets_message_real : total_assets_message_demo;\n\n        const demo_accounts = (\n            <div className='acc-switcher__list-wrapper'>\n                <AccountWrapper\n                    header={localize('Deriv Accounts')}\n                    is_visible={this.state.is_demo_deriv_visible}\n                    toggleVisibility={() => {\n                        this.toggleVisibility('demo_deriv');\n                    }}\n                >\n                    <div className='acc-switcher__accounts'>\n                        {this.sorted_account_list\n                            .filter(account => account.is_virtual)\n                            .map(account => (\n                                <AccountList\n                                    key={account.loginid}\n                                    balance={this.props.accounts[account.loginid].balance}\n                                    currency={this.props.accounts[account.loginid].currency}\n                                    currency_icon={`IcCurrency-${account.icon}`}\n                                    display_type={'currency'}\n                                    has_balance={'balance' in this.props.accounts[account.loginid]}\n                                    is_disabled={account.is_disabled}\n                                    is_virtual={account.is_virtual}\n                                    loginid={account.loginid}\n                                    onClickAccount={\n                                        account.is_disabled ? undefined : this.doSwitch.bind(this, account.loginid)\n                                    }\n                                    selected_loginid={this.props.account_loginid}\n                                />\n                            ))}\n                    </div>\n                </AccountWrapper>\n                {this.props.is_mt5_allowed && (\n                    <React.Fragment>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={localize('DMT5 Accounts')}\n                            is_visible={this.state.is_demo_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('demo_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {!!this.demo_mt5.length && (\n                                        <div className='acc-switcher__accounts'>\n                                            {this.demo_mt5.map(account => (\n                                                <AccountList\n                                                    key={account.login}\n                                                    account_type={account.group}\n                                                    balance={account.balance}\n                                                    currency={account.currency}\n                                                    currency_icon={`IcMt5-${getMT5Account(account.group)}`}\n                                                    has_balance={'balance' in account}\n                                                    is_virtual\n                                                    loginid={account.display_login}\n                                                    onClickAccount={this.redirectToMt5Demo}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                    {this.remaining_demo_mt5.map(account => (\n                                        <div key={account.title} className='acc-switcher__new-account'>\n                                            <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                            <span className='acc-switcher__new-account-text'>{account.title}</span>\n                                            <Button\n                                                onClick={() => this.openMt5DemoAccount(account.type)}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n\n        const real_accounts = (\n            <div className='acc-switcher__list-wrapper' onMouseEnter={this.onListEnter} onMouseLeave={this.onListLeave}>\n                <React.Fragment>\n                    <AccountWrapper\n                        header={localize('Deriv Accounts')}\n                        is_visible={this.state.is_real_deriv_visible}\n                        toggleVisibility={() => {\n                            this.toggleVisibility('real_deriv');\n                        }}\n                    >\n                        <div className='acc-switcher__accounts'>\n                            {this.sorted_account_list\n                                .filter(account => !account.is_virtual)\n                                .map(account => {\n                                    return (\n                                        <AccountList\n                                            key={account.loginid}\n                                            balance={this.props.accounts[account.loginid].balance}\n                                            currency={this.props.accounts[account.loginid].currency}\n                                            currency_icon={`IcCurrency-${account.icon}`}\n                                            display_type={'currency'}\n                                            has_balance={'balance' in this.props.accounts[account.loginid]}\n                                            is_disabled={account.is_disabled}\n                                            is_virtual={account.is_virtual}\n                                            is_eu={this.props.is_eu}\n                                            loginid={account.loginid}\n                                            onClickAccount={\n                                                account.is_disabled\n                                                    ? undefined\n                                                    : this.doSwitch.bind(this, account.loginid)\n                                            }\n                                            selected_loginid={this.props.account_loginid}\n                                        />\n                                    );\n                                })}\n                        </div>\n                        {this.remaining_real_accounts.map((account, index) => (\n                            <div key={index} className='acc-switcher__new-account'>\n                                <Icon icon='IcDeriv' size={24} />\n                                <span className='acc-switcher__new-account-text'>{getAccountTitle(account)}</span>\n                                <Button\n                                    onClick={() => this.onClickUpgrade(account)}\n                                    className='acc-switcher__new-account-btn'\n                                    secondary\n                                    small\n                                >\n                                    {localize('Add')}\n                                </Button>\n                            </div>\n                        ))}\n                        {!this.can_upgrade &&\n                            (this.can_open_multi || this.props.can_change_fiat_currency || !this.has_set_currency) && (\n                                <Button\n                                    className='acc-switcher__btn'\n                                    secondary\n                                    onClick={\n                                        this.has_set_currency\n                                            ? () => this.props.openRealAccountSignup('manage')\n                                            : this.setAccountCurrency\n                                    }\n                                >\n                                    {this.can_open_multi\n                                        ? localize('Add or manage account')\n                                        : localize('Manage account')}\n                                </Button>\n                            )}\n                    </AccountWrapper>\n                </React.Fragment>\n                {this.props.is_mt5_allowed && (\n                    <React.Fragment>\n                        <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                        <AccountWrapper\n                            header={localize('DMT5 Accounts')}\n                            is_visible={this.state.is_real_dmt5_visible}\n                            toggleVisibility={() => {\n                                this.toggleVisibility('real_dmt5');\n                            }}\n                        >\n                            {this.props.is_loading_mt5 ? (\n                                <div className='acc-switcher__accounts--is-loading'>\n                                    <AccountsItemLoader speed={3} />\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {!!this.real_mt5.length && (\n                                        <div className='acc-switcher__accounts'>\n                                            {this.real_mt5.map(account => (\n                                                <AccountList\n                                                    key={account.login}\n                                                    account_type={account.group}\n                                                    balance={account.balance}\n                                                    currency={account.currency}\n                                                    currency_icon={`IcMt5-${getMT5Account(account.group)}`}\n                                                    has_balance={'balance' in account}\n                                                    loginid={account.display_login}\n                                                    onClickAccount={this.redirectToMt5Real}\n                                                />\n                                            ))}\n                                        </div>\n                                    )}\n                                    {this.remaining_real_mt5.map(account => (\n                                        <div key={account.title} className='acc-switcher__new-account'>\n                                            <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                            <span className='acc-switcher__new-account-text'>{account.title}</span>\n                                            <Button\n                                                onClick={() => this.openMt5RealAccount(account.type)}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                                is_disabled={\n                                                    ((!this.props.is_eu_enabled || !this.props.is_eu) && // TODO [deriv-eu] remove is_eu_enabled check once EU is ready for production\n                                                        !this.props.has_any_real_account) ||\n                                                    (account.type === 'financial_stp' &&\n                                                        this.props.is_pending_authentication)\n                                                }\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </AccountWrapper>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef}>\n                <Tabs\n                    active_index={this.state.active_tab_index}\n                    className='acc-switcher__list-tabs'\n                    onTabItemClick={this.updateAccountTabIndex}\n                    top\n                >\n                    {/* TODO: De-couple and refactor demo and real accounts groups\n                        into a single reusable AccountListItem component */}\n                    <div label={localize('Real')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars height='354px'>{real_accounts}</ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                                {real_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                    <div label={localize('Demo')}>\n                        <DesktopWrapper>\n                            <ThemedScrollbars height='354px'>{demo_accounts}</ThemedScrollbars>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                                {demo_accounts}\n                            </Div100vhContainer>\n                        </MobileWrapper>\n                    </div>\n                </Tabs>\n                <div\n                    className={classNames('acc-switcher__separator', {\n                        'acc-switcher__separator--auto-margin': this.props.is_mobile,\n                    })}\n                />\n                <div className='acc-switcher__total'>\n                    <span>\n                        <Localize i18n_default_text='Total assets' />\n                    </span>\n                    <span className='acc-switcher__balance'>\n                        <Money\n                            currency={this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD'}\n                            amount={formatMoney(\n                                this.is_real_account_tab ? this.props.obj_total_balance.currency : 'USD',\n                                this.is_real_account_tab ? this.total_real_assets : this.total_demo_assets,\n                                true\n                            )}\n                            should_format={false}\n                        />\n                    </span>\n                </div>\n                <div className='acc-switcher__total-subtitle'>\n                    <span>{total_assets_message}</span>\n                </div>\n                <div className='acc-switcher__separator' />\n                <div className='acc-switcher__footer'>\n                    {this.props.is_uk && this.props.has_any_real_account && (\n                        <Button\n                            className='acc-switcher__compare'\n                            type='button'\n                            has_effect\n                            onClick={this.showAccountTypesModal}\n                            text={localize('Compare')}\n                            secondary\n                        />\n                    )}\n                    <div id='dt_logout_button' className='acc-switcher__logout'>\n                        <span className='acc-switcher__logout-text' onClick={this.handleLogout}>\n                            {localize('Log out')}\n                        </span>\n                        <Icon\n                            icon='IcLogout'\n                            className='acc-switcher__logout-icon drawer__icon'\n                            onClick={this.handleLogout}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    available_crypto_currencies: PropTypes.array,\n    account_list: PropTypes.array,\n    account_loginid: PropTypes.string,\n    accounts: PropTypes.object,\n    can_change_fiat_currency: PropTypes.bool,\n    can_upgrade_to: PropTypes.string,\n    has_fiat: PropTypes.bool,\n    has_any_real_account: PropTypes.bool,\n    is_eu: PropTypes.bool,\n    is_eu_enabled: PropTypes.bool, // TODO [deriv-eu] remove is_eu_enabled check once EU is ready for production\n    is_loading_mt5: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_mt5_allowed: PropTypes.bool,\n    is_pending_authentication: PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_uk: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    mt5_login_list: PropTypes.array,\n    obj_total_balance: PropTypes.object,\n    openRealAccountSignup: PropTypes.func,\n    switchAccount: PropTypes.func,\n    toggleAccountsDialog: PropTypes.func,\n    toggleAccountTypesModal: PropTypes.func,\n    togglePositionsDrawer: PropTypes.func,\n    toggleSetCurrencyModal: PropTypes.func,\n    updateMt5LoginList: PropTypes.func,\n};\n\nconst account_switcher = withRouter(\n    connect(({ client, common, ui }) => ({\n        available_crypto_currencies: client.available_crypto_currencies,\n        account_loginid: client.loginid,\n        accounts: client.accounts,\n        can_change_fiat_currency: client.can_change_fiat_currency,\n        account_list: client.account_list,\n        can_upgrade_to: client.can_upgrade_to,\n        is_eu: client.is_eu,\n        is_eu_enabled: ui.is_eu_enabled, // TODO [deriv-eu] remove is_eu_enabled check once EU is ready for production\n        is_loading_mt5: client.is_populating_mt5_account_list,\n        is_logged_in: client.is_logged_in,\n        is_mt5_allowed: client.is_mt5_allowed,\n        is_pending_authentication: client.is_pending_authentication,\n        is_uk: client.is_uk,\n        is_virtual: client.is_virtual,\n        has_fiat: client.has_fiat,\n        has_any_real_account: client.has_any_real_account,\n        mt5_login_list: client.mt5_login_list,\n        obj_total_balance: client.obj_total_balance,\n        switchAccount: client.switchAccount,\n        has_malta_account: client.has_malta_account,\n        has_maltainvest_account: client.has_maltainvest_account,\n        openAccountNeededModal: ui.openAccountNeededModal,\n        logoutClient: client.logout,\n        landing_companies: client.landing_companies,\n        upgradeable_landing_companies: client.upgradeable_landing_companies,\n        updateMt5LoginList: client.updateMt5LoginList,\n        routeBackInApp: common.routeBackInApp,\n        standpoint: client.standpoint,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        toggleAccountsDialog: ui.toggleAccountsDialog,\n        toggleAccountTypesModal: ui.toggleAccountTypesModal,\n        togglePositionsDrawer: ui.togglePositionsDrawer,\n        toggleSetCurrencyModal: ui.toggleSetCurrencyModal,\n    }))(AccountSwitcher)\n);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Div100vhContainer, Modal } from '@deriv/components';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountSwitcherMobile = props => {\n    const { disableApp, enableApp, is_visible, is_upgrade_enabled, toggle } = props;\n    return (\n        <Modal\n            id='dt_account_switcher_modal'\n            className='accounts-switcher'\n            enableApp={enableApp}\n            is_open={is_visible}\n            is_vertical_top\n            disableApp={disableApp}\n            has_close_icon={false}\n            toggleModal={toggle}\n            height='auto'\n            width='calc(100vw - 32px)'\n        >\n            <Div100vhContainer\n                className={classNames('acc-switcher__wrapper', 'acc-switcher__wrapper--is-mobile')}\n                max_autoheight_offset='48px'\n            >\n                <AccountSwitcher is_mobile is_visible={true} toggle={toggle} is_upgrade_enabled={is_upgrade_enabled} />\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nAccountSwitcherMobile.propTypes = {\n    children: PropTypes.any,\n    onClose: PropTypes.func,\n    title: PropTypes.string,\n    visible: PropTypes.bool,\n    wrapperClassName: PropTypes.string,\n};\n\nexport default AccountSwitcherMobile;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, Icon, MobileWrapper, Popover } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport AccountSwitcherMobile from 'App/Containers/AccountSwitcher/account-switcher-mobile.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountInfoWrapper = ({ is_disabled, disabled_message, children }) =>\n    is_disabled && disabled_message ? (\n        <Popover alignment='bottom' message={disabled_message} zIndex={99999}>\n            {children}\n        </Popover>\n    ) : (\n        <React.Fragment>{children}</React.Fragment>\n    );\n\nconst AccountInfo = ({\n    acc_switcher_disabled_message,\n    balance,\n    currency,\n    disableApp,\n    enableApp,\n    is_dialog_on,\n    is_virtual,\n    toggleDialog,\n    is_disabled,\n}) => (\n    <div className='acc-info__wrapper'>\n        <div className='acc-info__separator' />\n        <AccountInfoWrapper is_disabled={is_disabled} disabled_message={acc_switcher_disabled_message}>\n            <div\n                className={classNames('acc-info', {\n                    'acc-info--show': is_dialog_on,\n                    'acc-info--is-virtual': is_virtual,\n                    'acc-info--is-disabled': is_disabled,\n                })}\n                onClick={is_disabled ? undefined : () => toggleDialog()}\n            >\n                <span className='acc-info__id'>\n                    <DesktopWrapper>\n                        <Icon\n                            icon={`IcCurrency-${is_virtual ? 'virtual' : currency || 'Unknown'}`}\n                            className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n                            size={24}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        {(is_virtual || currency) && (\n                            <Icon\n                                icon={`IcCurrency-${is_virtual ? 'virtual' : currency}`}\n                                className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n                                size={24}\n                            />\n                        )}\n                    </MobileWrapper>\n                </span>\n                {(typeof balance !== 'undefined' || !currency) && (\n                    <p\n                        className={classNames('acc-info__balance', {\n                            'acc-info__balance--no-currency': !currency && !is_virtual,\n                        })}\n                    >\n                        <span\n                            className={classNames('symbols', {\n                                [`symbols--${(currency || '').toLowerCase()}`]: currency,\n                            })}\n                        />\n                        {!currency && <Localize i18n_default_text='No currency assigned' />}\n                        {currency && balance}\n                    </p>\n                )}\n                {is_disabled ? (\n                    <Icon icon='IcLock' />\n                ) : (\n                    <Icon icon='IcChevronDownBold' className='acc-info__select-arrow' />\n                )}\n            </div>\n        </AccountInfoWrapper>\n        <MobileWrapper>\n            <AccountSwitcherMobile\n                is_visible={is_dialog_on}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                toggle={toggleDialog}\n            />\n        </MobileWrapper>\n        <DesktopWrapper>\n            <CSSTransition\n                in={is_dialog_on}\n                timeout={200}\n                classNames={{\n                    enter: 'acc-switcher__wrapper--enter',\n                    enterDone: 'acc-switcher__wrapper--enter-done',\n                    exit: 'acc-switcher__wrapper--exit',\n                }}\n                unmountOnExit\n            >\n                <div className='acc-switcher__wrapper'>\n                    <AccountSwitcher is_visible={is_dialog_on} toggle={toggleDialog} />\n                </div>\n            </CSSTransition>\n        </DesktopWrapper>\n    </div>\n);\n\nAccountInfo.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.string,\n    currency: PropTypes.string,\n    is_dialog_on: PropTypes.bool,\n    is_disabled: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    loginid: PropTypes.string,\n    toggleDialog: PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}