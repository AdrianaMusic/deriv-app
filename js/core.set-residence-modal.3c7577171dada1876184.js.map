{"version":3,"sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx","webpack:///./App/Containers/SetResidenceModal/set-residence-modal.jsx"],"names":["SetResidenceForm","class_prefix","children","header_text","errors","touched","setFieldTouched","setFieldValue","residence_list","className","as","weight","localize","name","field","autoComplete","type","label","error","residence","required","list_items","onItemSelection","value","text","placeholder","use_text","onChange","e","target","propTypes","PropTypes","node","string","arrayOf","object","isResidenceText","item","values","toLowerCase","SetResidence","onSetResidenceComplete","Error","props","isModalVisible","enableApp","this","onSetResidence","initialValues","validate","index_of_selection","findIndex","disabled","website_name","validateResidence","onSubmit","modded_values","isSubmitting","size","classNames","is_disabled","primary","React","func","array","SetResidenceModal","disableApp","is_loading","is_visible","toggleSetResidenceModal","length","is_content_centered","bool","connect","ui","client","is_set_residence_modal_visible"],"mappings":"8WAMA,IAAMA,EAAmB,SAAC,GAAD,QACrBC,oBADqB,MACN,gBADM,EAErBC,EAFqB,EAErBA,SACAC,EAHqB,EAGrBA,YACAC,EAJqB,EAIrBA,OACAC,EALqB,EAKrBA,QACAC,EANqB,EAMrBA,gBACAC,EAPqB,EAOrBA,cACAC,EARqB,EAQrBA,eARqB,OAUrB,uBAAKC,UAAS,UAAKR,EAAL,4BACPE,GACC,gBAAC,OAAD,CAAMO,GAAG,IAAIC,OAAO,OAAOF,UAAS,UAAKR,EAAL,cAC/BE,GAGT,qBAAGM,UAAS,UAAKR,EAAL,aAAsBE,EAAc,OAAS,YAAcS,mBAAS,uBAChF,gBAAC,QAAD,CAAOC,KAAK,cACP,gBAAGC,EAAH,EAAGA,MAAH,OACG,gBAAC,WAAD,KACI,gBAAC,iBAAD,KACI,gBAAC,eAAD,KACQA,EADR,CAEIC,aAAa,MACbN,UAAS,UAAKR,EAAL,qBACTe,KAAK,OACLC,MAAOL,mBAAS,kBAChBM,MAAOb,EAAQc,WAAaf,EAAOe,UACnCC,UAAQ,EACRC,WAAYb,EACZc,gBAAiB,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OAAqBjB,EAAc,YAAagB,EAAQC,EAAO,IAAI,QAG5F,gBAAC,gBAAD,KACI,gBAAC,eAAD,CACIC,YAAab,mBAAS,iBACtBK,MAAOL,mBAAS,kBAChBW,MAAOT,EAAMS,MACbF,WAAYb,EACZU,MAAOb,EAAQc,WAAaf,EAAOe,UACnCC,UAAQ,EACRM,UAAQ,EACRC,SAAU,SAAAC,GACNtB,EAAgB,aAAa,GAC7BC,EAAc,YAAaqB,EAAEC,OAAON,OAAO,WAOlErB,IAITF,EAAiB8B,UAAY,CACzB5B,SAAU6B,IAAUC,KACpB/B,aAAc8B,IAAUE,OACxB9B,YAAa4B,IAAUE,OACvBzB,eAAgBuB,IAAUG,QAAQH,IAAUI,SAGjCnC,O,mqECxDf,IAAMoC,EAAkB,SAACC,EAAMC,GAAP,OAAkBD,EAAKb,KAAKe,gBAAkBD,EAAOnB,UAAUoB,eAoBjFC,E,sZACFC,uBAAyB,SAAAvB,GAErB,GAAIA,EACA,MAAMwB,MAAMxB,GAGhB,EAAKyB,MAAMC,gBAAe,GAC1B,EAAKD,MAAME,a,gDAGN,aACsCC,KAAKH,MAAxCI,EADH,EACGA,eAAgBvC,EADnB,EACmBA,eAMxB,OACI,uBAAKC,UAAU,iBACX,gBAAC,SAAD,CACIuC,cAAe,CAAE7B,UAAW,IAC5B8B,SAAU,SAAAX,GAAM,OAxCV,SAACA,EAAQ9B,GAC/B,IAAMJ,EAAS,GAEf,GAAKkC,EAAOnB,UAEL,CACH,IAAM+B,EAAqB1C,EAAe2C,WAAU,SAAAd,GAAI,OAAID,EAAgBC,EAAMC,OAEtD,IAAxBY,GAA6E,aAAhD1C,EAAe0C,GAAoBE,WAChEhD,EAAOe,UAAYP,mBAAS,oEAAqE,CAC7FyC,oCANRjD,EAAOe,WAAY,EAWvB,OAAOf,EAyB6BkD,CAAkBhB,EAAQ9B,IAC9C+C,SAVsB,SAAAjB,GAC9B,IAAMY,EAAqB1C,EAAe2C,WAAU,SAAAd,GAAI,OAAID,EAAgBC,EAAMC,MAC5EkB,EAAgB,EAAH,KAAQlB,GAAR,IAAgBnB,UAAWX,EAAe0C,GAAoB3B,QACjFwB,EAAeS,EAAe,EAAKf,2BAS1B,gBAAGgB,EAAH,EAAGA,aAAcrD,EAAjB,EAAiBA,OAAQkC,EAAzB,EAAyBA,OAAQ/B,EAAjC,EAAiCA,cAAeF,EAAhD,EAAgDA,QAAhD,OACG,gBAAC,OAAD,KACI,gBAAC,WAAD,KACI,gBAAC,IAAD,CACID,OAAQA,EACRC,QAASA,EACTE,cAAeA,EACfC,eAAgBA,GAEhB,gBAAC,OAAD,CAAME,GAAG,IAAIgD,KAAK,MAAM/C,OAAO,OAAOF,UAAU,0BAC3CG,mBACG,8FAGR,gBAAC,SAAD,CACIH,UAAWkD,IAAW,qBAAsB,CACxC,gCACKrB,EAAOnB,WAAaf,EAAOe,WAAasC,IAEjDzC,KAAK,SACL4C,aAActB,EAAOnB,aAAef,EAAOe,WAAasC,EACxDjC,KAAMZ,mBAAS,iBACfiD,SAAO,gB,8BA/CpBC,aA2D3BtB,EAAaV,UAAY,CACrBiB,eAAgBhB,IAAUgC,KAC1BvD,eAAgBuB,IAAUiC,OAG9B,IAAMC,EAAoB,SAAC,GAQrB,IAPFpB,EAOE,EAPFA,UACAqB,EAME,EANFA,WACAC,EAKE,EALFA,WACAC,EAIE,EAJFA,WACArB,EAGE,EAHFA,eACAvC,EAEE,EAFFA,eACA6D,EACE,EADFA,wBAEA,OAAI7D,EAAe8D,OAAS,EAAU,KAElC,gBAAC,SAAD,CACIF,WAAYA,EACZF,WAAYA,EACZrB,UAAWA,EACXsB,WAAYA,IAAe3D,EAAe8D,OAC1CC,qBAAmB,GAEnB,gBAAC,EAAD,CACIxB,eAAgBA,EAChBvC,eAAgBA,EAChBoC,eAAgByB,EAChBxB,UAAWA,MAM3BoB,EAAkBnC,UAAY,CAC1BoC,WAAYnC,IAAUgC,KACtBlB,UAAWd,IAAUgC,KACrBI,WAAYpC,IAAUyC,KACtBJ,WAAYrC,IAAUyC,KACtBzB,eAAgBhB,IAAUgC,KAC1BvD,eAAgBuB,IAAUG,QAAQH,IAAUI,SAGjCsC,mBAAQ,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAP,MAAqB,CACxCP,WAAYM,EAAGE,+BACfP,wBAAyBK,EAAGL,wBAC5BxB,UAAW6B,EAAG7B,UACdqB,WAAYQ,EAAGR,WACfC,WAAYO,EAAGP,WACfpB,eAAgB4B,EAAO5B,eACvBvC,eAAgBmE,EAAOnE,kBAPZiE,CAQXR","file":"js/core.set-residence-modal.3c7577171dada1876184.js","sourcesContent":["import { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Autocomplete, DesktopWrapper, MobileWrapper, SelectNative, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    class_prefix = 'set-residence',\n    children,\n    header_text,\n    errors,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => (\n    <div className={`${class_prefix}__residence-selection`}>\n        {!!header_text && (\n            <Text as='p' weight='bold' className={`${class_prefix}__heading`}>\n                {header_text}\n            </Text>\n        )}\n        <p className={`${class_prefix}__${header_text ? 'text' : 'heading'}`}>{localize('Where do you live?')}</p>\n        <Field name='residence'>\n            {({ field }) => (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            className={`${class_prefix}__residence-field`}\n                            type='text'\n                            label={localize('Choose country')}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => setFieldValue('residence', value ? text : '', true)}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <SelectNative\n                            placeholder={localize('Please select')}\n                            label={localize('Choose country')}\n                            value={field.value}\n                            list_items={residence_list}\n                            error={touched.residence && errors.residence}\n                            required\n                            use_text\n                            onChange={e => {\n                                setFieldTouched('residence', true);\n                                setFieldValue('residence', e.target.value, true);\n                            }}\n                        />\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n        </Field>\n        {children}\n    </div>\n);\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.node,\n    class_prefix: PropTypes.string,\n    header_text: PropTypes.string,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SetResidenceForm;\n","import classNames from 'classnames';\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Dialog, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { website_name } from '@deriv/shared';\nimport ResidenceForm from './set-residence-form.jsx';\nimport 'Sass/app/modules/set-residence.scss';\n\n// TODO: Move some of these functions to helpers since some of them are shared with AccountSignUpModal\nconst isResidenceText = (item, values) => item.text.toLowerCase() === values.residence.toLowerCase();\n\nconst validateResidence = (values, residence_list) => {\n    const errors = {};\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(item => isResidenceText(item, values));\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    return errors;\n};\n\nclass SetResidence extends React.Component {\n    onSetResidenceComplete = error => {\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error) {\n            throw Error(error);\n        }\n        // Handle lower level modal controls due to overriding modal rendering\n        this.props.isModalVisible(false);\n        this.props.enableApp();\n    };\n\n    render() {\n        const { onSetResidence, residence_list } = this.props;\n        const onSetResidencePassthrough = values => {\n            const index_of_selection = residence_list.findIndex(item => isResidenceText(item, values));\n            const modded_values = { ...values, residence: residence_list[index_of_selection].value };\n            onSetResidence(modded_values, this.onSetResidenceComplete);\n        };\n        return (\n            <div className='set-residence'>\n                <Formik\n                    initialValues={{ residence: '' }}\n                    validate={values => validateResidence(values, residence_list)}\n                    onSubmit={onSetResidencePassthrough}\n                >\n                    {({ isSubmitting, errors, values, setFieldValue, touched }) => (\n                        <Form>\n                            <React.Fragment>\n                                <ResidenceForm\n                                    errors={errors}\n                                    touched={touched}\n                                    setFieldValue={setFieldValue}\n                                    residence_list={residence_list}\n                                >\n                                    <Text as='p' size='xxs' weight='bold' className='set-residence__subtext'>\n                                        {localize(\n                                            'We need this to make sure our service complies with laws and regulations in your country.'\n                                        )}\n                                    </Text>\n                                    <Button\n                                        className={classNames('set-residence__btn', {\n                                            'set-residence__btn--disabled':\n                                                !values.residence || errors.residence || isSubmitting,\n                                        })}\n                                        type='submit'\n                                        is_disabled={!values.residence || !!errors.residence || isSubmitting}\n                                        text={localize('Set residence')}\n                                        primary\n                                    />\n                                </ResidenceForm>\n                            </React.Fragment>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        );\n    }\n}\n\nSetResidence.propTypes = {\n    onSetResidence: PropTypes.func,\n    residence_list: PropTypes.array,\n};\n\nconst SetResidenceModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    onSetResidence,\n    residence_list,\n    toggleSetResidenceModal,\n}) => {\n    if (residence_list.length < 1) return null;\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_content_centered\n        >\n            <SetResidence\n                onSetResidence={onSetResidence}\n                residence_list={residence_list}\n                isModalVisible={toggleSetResidenceModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n};\n\nSetResidenceModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    onSetResidence: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_set_residence_modal_visible,\n    toggleSetResidenceModal: ui.toggleSetResidenceModal,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    onSetResidence: client.onSetResidence,\n    residence_list: client.residence_list,\n}))(SetResidenceModal);\n"],"sourceRoot":""}